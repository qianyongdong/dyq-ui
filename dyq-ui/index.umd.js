(function(AI,S){typeof exports=="object"&&typeof module<"u"?S(exports,require("vue-demi")):typeof define=="function"&&define.amd?define(["exports","vue-demi"],S):(AI=typeof globalThis<"u"?globalThis:AI||self,S(AI.index={},AI.VueDemi))})(this,function(AI,S){"use strict";var oN=Object.defineProperty;var qV=AI=>{throw TypeError(AI)};var aN=(AI,S,pI)=>S in AI?oN(AI,S,{enumerable:!0,configurable:!0,writable:!0,value:pI}):AI[S]=pI;var dI=(AI,S,pI)=>aN(AI,typeof S!="symbol"?S+"":S,pI),Pc=(AI,S,pI)=>S.has(AI)||qV("Cannot "+pI);var F=(AI,S,pI)=>(Pc(AI,S,"read from private field"),pI?pI.call(AI):S.get(AI)),m=(AI,S,pI)=>S.has(AI)?qV("Cannot add the same private member more than once"):S instanceof WeakSet?S.add(AI):S.set(AI,pI),U=(AI,S,pI,hZ)=>(Pc(AI,S,"write to private field"),hZ?hZ.call(AI,pI):S.set(AI,pI),pI),b=(AI,S,pI)=>(Pc(AI,S,"access private method"),pI);var rg=(AI,S,pI,hZ)=>({set _(qB){U(AI,S,qB,pI)},get _(){return F(AI,S,hZ)}});var IA,Fi,fc,Z0,Nl,SC,gA,Mg,LF,hl,E,Ug,Jd,Md,ii,_V,qc,Dd,kB,KB,_c,TB,ol,al,ug,Yl,EF,$V,Qg,IR,gR,ci,CR,$c,d0,wl,nl,kA,AR,lR,ZR,xF,B0,OF,qg,F0,IG,_I,KA,i0,$I,rF,dR,tZ,pg,rI,gg,yZ,CA,HZ,FC,eZ,Sl,JC,iC,Jl,c0,G0,MC,uZ,TA,DC,PF,zA,W0,Ml,V0,pZ,Cg,oI,AA,Dl,R0,s0,U0,b0,m0,Q0,N0,h0,o0,a0,Y0,w0,n0,LA,XC,lA,S0,K,Gi,BR,FR,Wi,iR,cR,GR,gG,WR,CG,AG,VR,ag,Bl,RR,sR,lG,UR,zB,ZG,ZA,dA,cC,BA,kg,KZ,GC,J0,dG,Xl,WC,Wg,TZ,tl,Ag,yl,zZ,LZ,Vg,M0,Hl,EA,D0,el,iA,tC,EZ,jZ,_g,X0,fF,cI,BG,t0,FG,iG,bR,mR,cG,GG,WG,QR,NR,hR,oR,VG,LB,ul,lg,qF,aR,y0,xZ,jA,RG,sG,H0,e0,yC,YR,wR,Vi,pl,u0,p0,k0,K0,OZ,xA,YI,rZ,vZ,T0,UG,rV,OA,Dg,z0,L0,kl,cA,E0,j0,Kl,PZ,fZ,rA,qZ,x0,_Z,Tl,O0,r0,zl,Ll,vA,$Z,GA,nR,SR,bG,HC,Ri,JR,MR,$F,PA,WA,$g,Xd,si,El,gi,jl,Id,Ui,gd,bi,VA,eC,Cd,Ad,uC,xl,EB,VC,v0,mG,fA,qA,Ol,vl,ld,Zd,P0,QG,Tg,mZ,DR,XR,dd,Ci,Ai,Bd,Pl,uI,RA,fl,f0,q0,Fd,sA,RC,UA,_0,bA,$0,ql,_l,wI,mi,NG,tR,yR,HR,eR,Qi,Ni,hG,IB,gB,CB,AB,lB,ZB,dB,oG,BB,$l,id,IZ,uR,aG,FB,iB,cB,GB,WB,sC,zg,VB,Lg,cd,EI,pR,kR,KR,hi,mA,oi,ai,TR,YG,zR,RB,_A,UC,Ng,LR,Yi,ER,jR,wG,sB,Gd,pC,QA,Wd,Vd,kC,VI,gZ,CZ,UB,bB,Rd,sd,$A,mB,li,Zi,QB,nG,Ud,AZ,hA,NB,Eg,hB,KI,Xg,jB,xB,xR,oB,aB,bC,lZ,bd,vI,YB,md,wB,nB,mC,Qd,SI,SG,JG,OR,QZ,rR,Fl,Nd,SB,Il,ZZ,hd,IC,JB,MB,dZ,QC,hg,jg,di,od,BZ,PI,ad,KC,DB,GI,MG,DG,vR,PR,fR,XG,OB,gC,td,qR,wi,rB,_R,$R,Is,gs,FZ,iZ,XB,tB,yB,cZ,TC,aA,CC,GZ,WZ,YA,VZ,RZ,gl,T,Cs,As,ls,Zs,tG,ds,yG,Bs,Fs,is,cs,Gs,NZ,HG,ni,Si,yd,eG,Ji,wA,Ws,uG,Vs,Rs,pG,Mi,vB,Zg,dg,Cl,nA,Al,Yd,zC,SA,LC,NC,HB,mI,PB,fB,Di,kG,ss,Us,KG,Xi,bs,sZ,wd,EC,UZ,JA,MA,DA,xg,ll,nd,Sd,og,r,Zl,Bg,ms,TG,zG,LG,ti,jC,uB,fI,dl,pB,EG,bZ,jG,Qs;var pI=typeof global=="object"&&global&&global.Object===Object&&global,hZ=typeof self=="object"&&self&&self.Object===Object&&self,qB=pI||hZ||Function("return this")(),_B=qB.Symbol,xG=Object.prototype,Ns=xG.hasOwnProperty,hs=xG.toString,Hd=_B?_B.toStringTag:void 0;function os(d){var I=Ns.call(d,Hd),g=d[Hd];try{d[Hd]=void 0;var C=!0}catch{}var A=hs.call(d);return C&&(I?d[Hd]=g:delete d[Hd]),A}var as=Object.prototype,Ys=as.toString;function ws(d){return Ys.call(d)}var ns="[object Null]",Ss="[object Undefined]",OG=_B?_B.toStringTag:void 0;function Js(d){return d==null?d===void 0?Ss:ns:OG&&OG in Object(d)?os(d):ws(d)}function Ms(d){return d!=null&&typeof d=="object"}var Ds="[object Symbol]";function Xs(d){return typeof d=="symbol"||Ms(d)&&Js(d)==Ds}var ts=/\s/;function ys(d){for(var I=d.length;I--&&ts.test(d.charAt(I)););return I}var Hs=/^\s+/;function es(d){return d&&d.slice(0,ys(d)+1).replace(Hs,"")}function yi(d){var I=typeof d;return d!=null&&(I=="object"||I=="function")}var rG=NaN,us=/^[-+]0x[0-9a-f]+$/i,ps=/^0b[01]+$/i,ks=/^0o[0-7]+$/i,Ks=parseInt;function vG(d){if(typeof d=="number")return d;if(Xs(d))return rG;if(yi(d)){var I=typeof d.valueOf=="function"?d.valueOf():d;d=yi(I)?I+"":I}if(typeof d!="string")return d===0?d:+d;d=es(d);var g=ps.test(d);return g||ks.test(d)?Ks(d.slice(2),g?2:8):us.test(d)?rG:+d}var Hi=function(){return qB.Date.now()},Ts="Expected a function",zs=Math.max,Ls=Math.min;function PG(d,I,g){var C,A,l,Z,B,i,c=0,G=!1,W=!1,V=!0;if(typeof d!="function")throw new TypeError(Ts);I=vG(I)||0,yi(g)&&(G=!!g.leading,W="maxWait"in g,l=W?zs(vG(g.maxWait)||0,I):l,V="trailing"in g?!!g.trailing:V);function R(w){var X=C,J=A;return C=A=void 0,c=w,Z=d.apply(J,X),Z}function s(w){return c=w,B=setTimeout(N,I),G?R(w):Z}function Q(w){var X=w-i,J=w-c,y=I-X;return W?Ls(y,l-J):y}function h(w){var X=w-i,J=w-c;return i===void 0||X>=I||X<0||W&&J>=l}function N(){var w=Hi();if(h(w))return o(w);B=setTimeout(N,Q(w))}function o(w){return B=void 0,V&&C?R(w):(C=A=void 0,Z)}function Y(){B!==void 0&&clearTimeout(B),c=0,C=i=A=B=void 0}function n(){return B===void 0?Z:o(Hi())}function a(){var w=Hi(),X=h(w);if(C=arguments,A=this,i=w,X){if(B===void 0)return s(i);if(W)return clearTimeout(B),B=setTimeout(N,I),R(i)}return B===void 0&&(B=setTimeout(N,I)),Z}return a.cancel=Y,a.flush=n,a}function Es(d){return d.replace(/-(\w)/g,(I,g)=>g?g.toUpperCase():"")}function js(d){return Object.keys(d).reduce((I,g)=>(typeof d[g]<"u"&&(I[Es(g)]=d[g]),I),{})}function xs(d,I,g,C){const A=g/d,l=C/I,Z=Math.min(A,l);let B=Math.floor(d*Z),i=Math.floor(I*Z);const c=0,G=0;return[c,G,c+B,G+i]}function Os(d,I,g){const C=fG(d,I),A=fG(g,I),l=C+A;return Math.floor((I+A)/l)}function fG(d,I){const g=/(\d+)(px|em|%)/,C=d.match(g);if(!C)throw new Error("子元素宽度格式无效");let A=parseFloat(C[1]),l=C[2],Z;switch(l){case"px":Z=A;break;case"em":Z=A*16;break;case"%":Z=A/100*I;break;default:throw new Error("不支持的单位类型")}return Z}function qG(d,I,g,C){return xs(d,I,g,C)[2]/d}function rs(){const d=localStorage.getItem("auth");return d?d.split(",").filter(Boolean):[]}const vs=async d=>{try{const I=await fetch(d);if(!I.ok)throw new Error(`Failed to fetch file: ${I.statusText}`);const g=I.headers.get("Content-Type");return{arrayBuffer:await I.arrayBuffer(),mimeType:g}}catch(I){return console.error("Error Processing URL:",I),null}},Ps=d=>/^[A-Za-z0-9+/]+={0,2}$/.test(d),fs=d=>{if(!Ps(d))throw console.log(d),new Error("Invalid Base64 string");const I=atob(d),g=I.length,C=new Uint8Array(g);for(let A=0;A<g;A++)C[A]=I.charCodeAt(A);return C.buffer},qs=d=>{try{const I=d.match(/^data:(.+);base64,(.*)$/);if(!I)return console.error("base64 was not contentType"),null;const g=I[1],C=I[2];return{arrayBuffer:fs(C),mimeType:g}}catch(I){return console.error("Error Processing Base64:",I),null}},_s=d=>new Promise((I,g)=>{const C=new FileReader;C.onload=()=>I(C.result),C.onerror=A=>g(A),C.readAsArrayBuffer(d)}),$s=async d=>{try{const I=await _s(d),g=d.type;return{arrayBuffer:I,mimeType:g}}catch(I){return console.error("Error reading file as ArrayBuffer:",I),null}},_G=async d=>typeof d=="string"?d.startsWith("data:")?qs(d):await vs(d):d instanceof File?await $s(d):null;function IU(d){if(d&&"$el"in d){const I=d.$el;return(I==null?void 0:I.nodeType)===Node.TEXT_NODE?I.nextElementSibling:I}return d}function gU(){const d=S.shallowRef(),I=g=>{d.value=g};return Object.defineProperty(I,"value",{enumerable:!0,get:()=>d.value,set:g=>d.value=g}),Object.defineProperty(I,"el",{enumerable:!0,get:()=>IU(d.value)}),I}const CU=d=>d?Object.entries(d).reduce((I,[g,C])=>(g=g.charAt(0).toUpperCase()+g.slice(1),g=`on${g}`,{...I,[g]:C}),{}):null,MI=(d,I={},g)=>{if(S.isVue2)return S.h(d,I,g);const{props:C,domProps:A,on:l,scopedSlots:Z,attrs:B,...i}=I;let c=CU(l);const G={...i,...C,...A,...B,...c};return S.h(d,G,Z||g)};function ei(d,I="content"){const g=gU(),C=S.ref(),A=new ResizeObserver(l=>{d==null||d(l,A),l.length&&(I==="content"?C.value=l[0].contentRect:C.value=l[0].target.getBoundingClientRect())});return S.onBeforeUnmount(()=>{A.disconnect()}),S.watch(()=>g.el,(l,Z)=>{Z&&(A.unobserve(Z),C.value=void 0),l&&A.observe(l)},{flush:"post"}),{resizeRef:g,contentRect:S.readonly(C)}}/**!
 * Sortable 1.15.2
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */function $G(d,I){var g=Object.keys(d);if(Object.getOwnPropertySymbols){var C=Object.getOwnPropertySymbols(d);I&&(C=C.filter(function(A){return Object.getOwnPropertyDescriptor(d,A).enumerable})),g.push.apply(g,C)}return g}function aC(d){for(var I=1;I<arguments.length;I++){var g=arguments[I]!=null?arguments[I]:{};I%2?$G(Object(g),!0).forEach(function(C){AU(d,C,g[C])}):Object.getOwnPropertyDescriptors?Object.defineProperties(d,Object.getOwnPropertyDescriptors(g)):$G(Object(g)).forEach(function(C){Object.defineProperty(d,C,Object.getOwnPropertyDescriptor(g,C))})}return d}function $B(d){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?$B=function(I){return typeof I}:$B=function(I){return I&&typeof Symbol=="function"&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},$B(d)}function AU(d,I,g){return I in d?Object.defineProperty(d,I,{value:g,enumerable:!0,configurable:!0,writable:!0}):d[I]=g,d}function xC(){return xC=Object.assign||function(d){for(var I=1;I<arguments.length;I++){var g=arguments[I];for(var C in g)Object.prototype.hasOwnProperty.call(g,C)&&(d[C]=g[C])}return d},xC.apply(this,arguments)}function lU(d,I){if(d==null)return{};var g={},C=Object.keys(d),A,l;for(l=0;l<C.length;l++)A=C[l],!(I.indexOf(A)>=0)&&(g[A]=d[A]);return g}function ZU(d,I){if(d==null)return{};var g=lU(d,I),C,A;if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(d);for(A=0;A<l.length;A++)C=l[A],!(I.indexOf(C)>=0)&&Object.prototype.propertyIsEnumerable.call(d,C)&&(g[C]=d[C])}return g}var dU="1.15.2";function OC(d){if(typeof window<"u"&&window.navigator)return!!navigator.userAgent.match(d)}var rC=OC(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),ed=OC(/Edge/i),IW=OC(/firefox/i),ud=OC(/safari/i)&&!OC(/chrome/i)&&!OC(/android/i),gW=OC(/iP(ad|od|hone)/i),CW=OC(/chrome/i)&&OC(/android/i),AW={capture:!1,passive:!1};function QI(d,I,g){d.addEventListener(I,g,!rC&&AW)}function UI(d,I,g){d.removeEventListener(I,g,!rC&&AW)}function IF(d,I){if(I){if(I[0]===">"&&(I=I.substring(1)),d)try{if(d.matches)return d.matches(I);if(d.msMatchesSelector)return d.msMatchesSelector(I);if(d.webkitMatchesSelector)return d.webkitMatchesSelector(I)}catch{return!1}return!1}}function BU(d){return d.host&&d!==document&&d.host.nodeType?d.host:d.parentNode}function lC(d,I,g,C){if(d){g=g||document;do{if(I!=null&&(I[0]===">"?d.parentNode===g&&IF(d,I):IF(d,I))||C&&d===g)return d;if(d===g)break}while(d=BU(d))}return null}var lW=/\s+/g;function tg(d,I,g){if(d&&I)if(d.classList)d.classList[g?"add":"remove"](I);else{var C=(" "+d.className+" ").replace(lW," ").replace(" "+I+" "," ");d.className=(C+(g?" "+I:"")).replace(lW," ")}}function f(d,I,g){var C=d&&d.style;if(C){if(g===void 0)return document.defaultView&&document.defaultView.getComputedStyle?g=document.defaultView.getComputedStyle(d,""):d.currentStyle&&(g=d.currentStyle),I===void 0?g:g[I];!(I in C)&&I.indexOf("webkit")===-1&&(I="-webkit-"+I),C[I]=g+(typeof g=="string"?"":"px")}}function oZ(d,I){var g="";if(typeof d=="string")g=d;else do{var C=f(d,"transform");C&&C!=="none"&&(g=C+" "+g)}while(!I&&(d=d.parentNode));var A=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return A&&new A(g)}function ZW(d,I,g){if(d){var C=d.getElementsByTagName(I),A=0,l=C.length;if(g)for(;A<l;A++)g(C[A],A);return C}return[]}function YC(){var d=document.scrollingElement;return d||document.documentElement}function TI(d,I,g,C,A){if(!(!d.getBoundingClientRect&&d!==window)){var l,Z,B,i,c,G,W;if(d!==window&&d.parentNode&&d!==YC()?(l=d.getBoundingClientRect(),Z=l.top,B=l.left,i=l.bottom,c=l.right,G=l.height,W=l.width):(Z=0,B=0,i=window.innerHeight,c=window.innerWidth,G=window.innerHeight,W=window.innerWidth),(I||g)&&d!==window&&(A=A||d.parentNode,!rC))do if(A&&A.getBoundingClientRect&&(f(A,"transform")!=="none"||g&&f(A,"position")!=="static")){var V=A.getBoundingClientRect();Z-=V.top+parseInt(f(A,"border-top-width")),B-=V.left+parseInt(f(A,"border-left-width")),i=Z+l.height,c=B+l.width;break}while(A=A.parentNode);if(C&&d!==window){var R=oZ(A||d),s=R&&R.a,Q=R&&R.d;R&&(Z/=Q,B/=s,W/=s,G/=Q,i=Z+G,c=B+W)}return{top:Z,left:B,bottom:i,right:c,width:W,height:G}}}function dW(d,I,g){for(var C=XA(d,!0),A=TI(d)[I];C;){var l=TI(C)[g],Z=void 0;if(Z=A>=l,!Z)return C;if(C===YC())break;C=XA(C,!1)}return!1}function aZ(d,I,g,C){for(var A=0,l=0,Z=d.children;l<Z.length;){if(Z[l].style.display!=="none"&&Z[l]!==q.ghost&&(C||Z[l]!==q.dragged)&&lC(Z[l],g.draggable,d,!1)){if(A===I)return Z[l];A++}l++}return null}function ui(d,I){for(var g=d.lastElementChild;g&&(g===q.ghost||f(g,"display")==="none"||I&&!IF(g,I));)g=g.previousElementSibling;return g||null}function vg(d,I){var g=0;if(!d||!d.parentNode)return-1;for(;d=d.previousElementSibling;)d.nodeName.toUpperCase()!=="TEMPLATE"&&d!==q.clone&&(!I||IF(d,I))&&g++;return g}function BW(d){var I=0,g=0,C=YC();if(d)do{var A=oZ(d),l=A.a,Z=A.d;I+=d.scrollLeft*l,g+=d.scrollTop*Z}while(d!==C&&(d=d.parentNode));return[I,g]}function FU(d,I){for(var g in d)if(d.hasOwnProperty(g)){for(var C in I)if(I.hasOwnProperty(C)&&I[C]===d[g][C])return Number(g)}return-1}function XA(d,I){if(!d||!d.getBoundingClientRect)return YC();var g=d,C=!1;do if(g.clientWidth<g.scrollWidth||g.clientHeight<g.scrollHeight){var A=f(g);if(g.clientWidth<g.scrollWidth&&(A.overflowX=="auto"||A.overflowX=="scroll")||g.clientHeight<g.scrollHeight&&(A.overflowY=="auto"||A.overflowY=="scroll")){if(!g.getBoundingClientRect||g===document.body)return YC();if(C||I)return g;C=!0}}while(g=g.parentNode);return YC()}function iU(d,I){if(d&&I)for(var g in I)I.hasOwnProperty(g)&&(d[g]=I[g]);return d}function pi(d,I){return Math.round(d.top)===Math.round(I.top)&&Math.round(d.left)===Math.round(I.left)&&Math.round(d.height)===Math.round(I.height)&&Math.round(d.width)===Math.round(I.width)}var pd;function FW(d,I){return function(){if(!pd){var g=arguments,C=this;g.length===1?d.call(C,g[0]):d.apply(C,g),pd=setTimeout(function(){pd=void 0},I)}}}function cU(){clearTimeout(pd),pd=void 0}function iW(d,I,g){d.scrollLeft+=I,d.scrollTop+=g}function cW(d){var I=window.Polymer,g=window.jQuery||window.Zepto;return I&&I.dom?I.dom(d).cloneNode(!0):g?g(d).clone(!0)[0]:d.cloneNode(!0)}function GW(d,I,g){var C={};return Array.from(d.children).forEach(function(A){var l,Z,B,i;if(!(!lC(A,I.draggable,d,!1)||A.animated||A===g)){var c=TI(A);C.left=Math.min((l=C.left)!==null&&l!==void 0?l:1/0,c.left),C.top=Math.min((Z=C.top)!==null&&Z!==void 0?Z:1/0,c.top),C.right=Math.max((B=C.right)!==null&&B!==void 0?B:-1/0,c.right),C.bottom=Math.max((i=C.bottom)!==null&&i!==void 0?i:-1/0,c.bottom)}}),C.width=C.right-C.left,C.height=C.bottom-C.top,C.x=C.left,C.y=C.top,C}var yg="Sortable"+new Date().getTime();function GU(){var d=[],I;return{captureAnimationState:function(){if(d=[],!!this.options.animation){var C=[].slice.call(this.el.children);C.forEach(function(A){if(!(f(A,"display")==="none"||A===q.ghost)){d.push({target:A,rect:TI(A)});var l=aC({},d[d.length-1].rect);if(A.thisAnimationDuration){var Z=oZ(A,!0);Z&&(l.top-=Z.f,l.left-=Z.e)}A.fromRect=l}})}},addAnimationState:function(C){d.push(C)},removeAnimationState:function(C){d.splice(FU(d,{target:C}),1)},animateAll:function(C){var A=this;if(!this.options.animation){clearTimeout(I),typeof C=="function"&&C();return}var l=!1,Z=0;d.forEach(function(B){var i=0,c=B.target,G=c.fromRect,W=TI(c),V=c.prevFromRect,R=c.prevToRect,s=B.rect,Q=oZ(c,!0);Q&&(W.top-=Q.f,W.left-=Q.e),c.toRect=W,c.thisAnimationDuration&&pi(V,W)&&!pi(G,W)&&(s.top-W.top)/(s.left-W.left)===(G.top-W.top)/(G.left-W.left)&&(i=VU(s,V,R,A.options)),pi(W,G)||(c.prevFromRect=G,c.prevToRect=W,i||(i=A.options.animation),A.animate(c,s,W,i)),i&&(l=!0,Z=Math.max(Z,i),clearTimeout(c.animationResetTimer),c.animationResetTimer=setTimeout(function(){c.animationTime=0,c.prevFromRect=null,c.fromRect=null,c.prevToRect=null,c.thisAnimationDuration=null},i),c.thisAnimationDuration=i)}),clearTimeout(I),l?I=setTimeout(function(){typeof C=="function"&&C()},Z):typeof C=="function"&&C(),d=[]},animate:function(C,A,l,Z){if(Z){f(C,"transition",""),f(C,"transform","");var B=oZ(this.el),i=B&&B.a,c=B&&B.d,G=(A.left-l.left)/(i||1),W=(A.top-l.top)/(c||1);C.animatingX=!!G,C.animatingY=!!W,f(C,"transform","translate3d("+G+"px,"+W+"px,0)"),this.forRepaintDummy=WU(C),f(C,"transition","transform "+Z+"ms"+(this.options.easing?" "+this.options.easing:"")),f(C,"transform","translate3d(0,0,0)"),typeof C.animated=="number"&&clearTimeout(C.animated),C.animated=setTimeout(function(){f(C,"transition",""),f(C,"transform",""),C.animated=!1,C.animatingX=!1,C.animatingY=!1},Z)}}}}function WU(d){return d.offsetWidth}function VU(d,I,g,C){return Math.sqrt(Math.pow(I.top-d.top,2)+Math.pow(I.left-d.left,2))/Math.sqrt(Math.pow(I.top-g.top,2)+Math.pow(I.left-g.left,2))*C.animation}var YZ=[],ki={initializeByDefault:!0},kd={mount:function(I){for(var g in ki)ki.hasOwnProperty(g)&&!(g in I)&&(I[g]=ki[g]);YZ.forEach(function(C){if(C.pluginName===I.pluginName)throw"Sortable: Cannot mount plugin ".concat(I.pluginName," more than once")}),YZ.push(I)},pluginEvent:function(I,g,C){var A=this;this.eventCanceled=!1,C.cancel=function(){A.eventCanceled=!0};var l=I+"Global";YZ.forEach(function(Z){g[Z.pluginName]&&(g[Z.pluginName][l]&&g[Z.pluginName][l](aC({sortable:g},C)),g.options[Z.pluginName]&&g[Z.pluginName][I]&&g[Z.pluginName][I](aC({sortable:g},C)))})},initializePlugins:function(I,g,C,A){YZ.forEach(function(B){var i=B.pluginName;if(!(!I.options[i]&&!B.initializeByDefault)){var c=new B(I,g,I.options);c.sortable=I,c.options=I.options,I[i]=c,xC(C,c.defaults)}});for(var l in I.options)if(I.options.hasOwnProperty(l)){var Z=this.modifyOption(I,l,I.options[l]);typeof Z<"u"&&(I.options[l]=Z)}},getEventProperties:function(I,g){var C={};return YZ.forEach(function(A){typeof A.eventProperties=="function"&&xC(C,A.eventProperties.call(g[A.pluginName],I))}),C},modifyOption:function(I,g,C){var A;return YZ.forEach(function(l){I[l.pluginName]&&l.optionListeners&&typeof l.optionListeners[g]=="function"&&(A=l.optionListeners[g].call(I[l.pluginName],C))}),A}};function RU(d){var I=d.sortable,g=d.rootEl,C=d.name,A=d.targetEl,l=d.cloneEl,Z=d.toEl,B=d.fromEl,i=d.oldIndex,c=d.newIndex,G=d.oldDraggableIndex,W=d.newDraggableIndex,V=d.originalEvent,R=d.putSortable,s=d.extraEventProperties;if(I=I||g&&g[yg],!!I){var Q,h=I.options,N="on"+C.charAt(0).toUpperCase()+C.substr(1);window.CustomEvent&&!rC&&!ed?Q=new CustomEvent(C,{bubbles:!0,cancelable:!0}):(Q=document.createEvent("Event"),Q.initEvent(C,!0,!0)),Q.to=Z||g,Q.from=B||g,Q.item=A||g,Q.clone=l,Q.oldIndex=i,Q.newIndex=c,Q.oldDraggableIndex=G,Q.newDraggableIndex=W,Q.originalEvent=V,Q.pullMode=R?R.lastPutMode:void 0;var o=aC(aC({},s),kd.getEventProperties(C,I));for(var Y in o)Q[Y]=o[Y];g&&g.dispatchEvent(Q),h[N]&&h[N].call(I,Q)}}var sU=["evt"],Yg=function(I,g){var C=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},A=C.evt,l=ZU(C,sU);kd.pluginEvent.bind(q)(I,g,aC({dragEl:e,parentEl:eI,ghostEl:lI,rootEl:XI,nextEl:il,lastDownEl:gF,cloneEl:tI,cloneHidden:tA,dragStarted:Td,putSortable:Ig,activeSortable:q.active,originalEvent:A,oldIndex:wZ,oldDraggableIndex:Kd,newIndex:Hg,newDraggableIndex:yA,hideGhostForTarget:mW,unhideGhostForTarget:QW,cloneNowHidden:function(){tA=!0},cloneNowShown:function(){tA=!1},dispatchSortableEvent:function(B){bg({sortable:g,name:B,originalEvent:A})}},l))};function bg(d){RU(aC({putSortable:Ig,cloneEl:tI,targetEl:e,rootEl:XI,oldIndex:wZ,oldDraggableIndex:Kd,newIndex:Hg,newDraggableIndex:yA},d))}var e,eI,lI,XI,il,gF,tI,tA,wZ,Hg,Kd,yA,CF,Ig,nZ=!1,AF=!1,lF=[],cl,ZC,Ki,Ti,WW,VW,Td,SZ,zd,Ld=!1,ZF=!1,dF,ig,zi=[],Li=!1,BF=[],FF=typeof document<"u",iF=gW,RW=ed||rC?"cssFloat":"float",UU=FF&&!CW&&!gW&&"draggable"in document.createElement("div"),sW=function(){if(FF){if(rC)return!1;var d=document.createElement("x");return d.style.cssText="pointer-events:auto",d.style.pointerEvents==="auto"}}(),UW=function(I,g){var C=f(I),A=parseInt(C.width)-parseInt(C.paddingLeft)-parseInt(C.paddingRight)-parseInt(C.borderLeftWidth)-parseInt(C.borderRightWidth),l=aZ(I,0,g),Z=aZ(I,1,g),B=l&&f(l),i=Z&&f(Z),c=B&&parseInt(B.marginLeft)+parseInt(B.marginRight)+TI(l).width,G=i&&parseInt(i.marginLeft)+parseInt(i.marginRight)+TI(Z).width;if(C.display==="flex")return C.flexDirection==="column"||C.flexDirection==="column-reverse"?"vertical":"horizontal";if(C.display==="grid")return C.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(l&&B.float&&B.float!=="none"){var W=B.float==="left"?"left":"right";return Z&&(i.clear==="both"||i.clear===W)?"vertical":"horizontal"}return l&&(B.display==="block"||B.display==="flex"||B.display==="table"||B.display==="grid"||c>=A&&C[RW]==="none"||Z&&C[RW]==="none"&&c+G>A)?"vertical":"horizontal"},bU=function(I,g,C){var A=C?I.left:I.top,l=C?I.right:I.bottom,Z=C?I.width:I.height,B=C?g.left:g.top,i=C?g.right:g.bottom,c=C?g.width:g.height;return A===B||l===i||A+Z/2===B+c/2},mU=function(I,g){var C;return lF.some(function(A){var l=A[yg].options.emptyInsertThreshold;if(!(!l||ui(A))){var Z=TI(A),B=I>=Z.left-l&&I<=Z.right+l,i=g>=Z.top-l&&g<=Z.bottom+l;if(B&&i)return C=A}}),C},bW=function(I){function g(l,Z){return function(B,i,c,G){var W=B.options.group.name&&i.options.group.name&&B.options.group.name===i.options.group.name;if(l==null&&(Z||W))return!0;if(l==null||l===!1)return!1;if(Z&&l==="clone")return l;if(typeof l=="function")return g(l(B,i,c,G),Z)(B,i,c,G);var V=(Z?B:i).options.group.name;return l===!0||typeof l=="string"&&l===V||l.join&&l.indexOf(V)>-1}}var C={},A=I.group;(!A||$B(A)!="object")&&(A={name:A}),C.name=A.name,C.checkPull=g(A.pull,!0),C.checkPut=g(A.put),C.revertClone=A.revertClone,I.group=C},mW=function(){!sW&&lI&&f(lI,"display","none")},QW=function(){!sW&&lI&&f(lI,"display","")};FF&&!CW&&document.addEventListener("click",function(d){if(AF)return d.preventDefault(),d.stopPropagation&&d.stopPropagation(),d.stopImmediatePropagation&&d.stopImmediatePropagation(),AF=!1,!1},!0);var Gl=function(I){if(e){I=I.touches?I.touches[0]:I;var g=mU(I.clientX,I.clientY);if(g){var C={};for(var A in I)I.hasOwnProperty(A)&&(C[A]=I[A]);C.target=C.rootEl=g,C.preventDefault=void 0,C.stopPropagation=void 0,g[yg]._onDragOver(C)}}},QU=function(I){e&&e.parentNode[yg]._isOutsideThisEl(I.target)};function q(d,I){if(!(d&&d.nodeType&&d.nodeType===1))throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(d));this.el=d,this.options=I=xC({},I),d[yg]=this;var g={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(d.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return UW(d,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(Z,B){Z.setData("Text",B.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:q.supportPointer!==!1&&"PointerEvent"in window&&!ud,emptyInsertThreshold:5};kd.initializePlugins(this,d,g);for(var C in g)!(C in I)&&(I[C]=g[C]);bW(I);for(var A in this)A.charAt(0)==="_"&&typeof this[A]=="function"&&(this[A]=this[A].bind(this));this.nativeDraggable=I.forceFallback?!1:UU,this.nativeDraggable&&(this.options.touchStartThreshold=1),I.supportPointer?QI(d,"pointerdown",this._onTapStart):(QI(d,"mousedown",this._onTapStart),QI(d,"touchstart",this._onTapStart)),this.nativeDraggable&&(QI(d,"dragover",this),QI(d,"dragenter",this)),lF.push(this.el),I.store&&I.store.get&&this.sort(I.store.get(this)||[]),xC(this,GU())}q.prototype={constructor:q,_isOutsideThisEl:function(I){!this.el.contains(I)&&I!==this.el&&(SZ=null)},_getDirection:function(I,g){return typeof this.options.direction=="function"?this.options.direction.call(this,I,g,e):this.options.direction},_onTapStart:function(I){if(I.cancelable){var g=this,C=this.el,A=this.options,l=A.preventOnFilter,Z=I.type,B=I.touches&&I.touches[0]||I.pointerType&&I.pointerType==="touch"&&I,i=(B||I).target,c=I.target.shadowRoot&&(I.path&&I.path[0]||I.composedPath&&I.composedPath()[0])||i,G=A.filter;if(SU(C),!e&&!(/mousedown|pointerdown/.test(Z)&&I.button!==0||A.disabled)&&!c.isContentEditable&&!(!this.nativeDraggable&&ud&&i&&i.tagName.toUpperCase()==="SELECT")&&(i=lC(i,A.draggable,C,!1),!(i&&i.animated)&&gF!==i)){if(wZ=vg(i),Kd=vg(i,A.draggable),typeof G=="function"){if(G.call(this,I,i,this)){bg({sortable:g,rootEl:c,name:"filter",targetEl:i,toEl:C,fromEl:C}),Yg("filter",g,{evt:I}),l&&I.cancelable&&I.preventDefault();return}}else if(G&&(G=G.split(",").some(function(W){if(W=lC(c,W.trim(),C,!1),W)return bg({sortable:g,rootEl:W,name:"filter",targetEl:i,fromEl:C,toEl:C}),Yg("filter",g,{evt:I}),!0}),G)){l&&I.cancelable&&I.preventDefault();return}A.handle&&!lC(c,A.handle,C,!1)||this._prepareDragStart(I,B,i)}}},_prepareDragStart:function(I,g,C){var A=this,l=A.el,Z=A.options,B=l.ownerDocument,i;if(C&&!e&&C.parentNode===l){var c=TI(C);if(XI=l,e=C,eI=e.parentNode,il=e.nextSibling,gF=C,CF=Z.group,q.dragged=e,cl={target:e,clientX:(g||I).clientX,clientY:(g||I).clientY},WW=cl.clientX-c.left,VW=cl.clientY-c.top,this._lastX=(g||I).clientX,this._lastY=(g||I).clientY,e.style["will-change"]="all",i=function(){if(Yg("delayEnded",A,{evt:I}),q.eventCanceled){A._onDrop();return}A._disableDelayedDragEvents(),!IW&&A.nativeDraggable&&(e.draggable=!0),A._triggerDragStart(I,g),bg({sortable:A,name:"choose",originalEvent:I}),tg(e,Z.chosenClass,!0)},Z.ignore.split(",").forEach(function(G){ZW(e,G.trim(),Ei)}),QI(B,"dragover",Gl),QI(B,"mousemove",Gl),QI(B,"touchmove",Gl),QI(B,"mouseup",A._onDrop),QI(B,"touchend",A._onDrop),QI(B,"touchcancel",A._onDrop),IW&&this.nativeDraggable&&(this.options.touchStartThreshold=4,e.draggable=!0),Yg("delayStart",this,{evt:I}),Z.delay&&(!Z.delayOnTouchOnly||g)&&(!this.nativeDraggable||!(ed||rC))){if(q.eventCanceled){this._onDrop();return}QI(B,"mouseup",A._disableDelayedDrag),QI(B,"touchend",A._disableDelayedDrag),QI(B,"touchcancel",A._disableDelayedDrag),QI(B,"mousemove",A._delayedDragTouchMoveHandler),QI(B,"touchmove",A._delayedDragTouchMoveHandler),Z.supportPointer&&QI(B,"pointermove",A._delayedDragTouchMoveHandler),A._dragStartTimer=setTimeout(i,Z.delay)}else i()}},_delayedDragTouchMoveHandler:function(I){var g=I.touches?I.touches[0]:I;Math.max(Math.abs(g.clientX-this._lastX),Math.abs(g.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){e&&Ei(e),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var I=this.el.ownerDocument;UI(I,"mouseup",this._disableDelayedDrag),UI(I,"touchend",this._disableDelayedDrag),UI(I,"touchcancel",this._disableDelayedDrag),UI(I,"mousemove",this._delayedDragTouchMoveHandler),UI(I,"touchmove",this._delayedDragTouchMoveHandler),UI(I,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(I,g){g=g||I.pointerType=="touch"&&I,!this.nativeDraggable||g?this.options.supportPointer?QI(document,"pointermove",this._onTouchMove):g?QI(document,"touchmove",this._onTouchMove):QI(document,"mousemove",this._onTouchMove):(QI(e,"dragend",this),QI(XI,"dragstart",this._onDragStart));try{document.selection?GF(function(){document.selection.empty()}):window.getSelection().removeAllRanges()}catch{}},_dragStarted:function(I,g){if(nZ=!1,XI&&e){Yg("dragStarted",this,{evt:g}),this.nativeDraggable&&QI(document,"dragover",QU);var C=this.options;!I&&tg(e,C.dragClass,!1),tg(e,C.ghostClass,!0),q.active=this,I&&this._appendGhost(),bg({sortable:this,name:"start",originalEvent:g})}else this._nulling()},_emulateDragOver:function(){if(ZC){this._lastX=ZC.clientX,this._lastY=ZC.clientY,mW();for(var I=document.elementFromPoint(ZC.clientX,ZC.clientY),g=I;I&&I.shadowRoot&&(I=I.shadowRoot.elementFromPoint(ZC.clientX,ZC.clientY),I!==g);)g=I;if(e.parentNode[yg]._isOutsideThisEl(I),g)do{if(g[yg]){var C=void 0;if(C=g[yg]._onDragOver({clientX:ZC.clientX,clientY:ZC.clientY,target:I,rootEl:g}),C&&!this.options.dragoverBubble)break}I=g}while(g=g.parentNode);QW()}},_onTouchMove:function(I){if(cl){var g=this.options,C=g.fallbackTolerance,A=g.fallbackOffset,l=I.touches?I.touches[0]:I,Z=lI&&oZ(lI,!0),B=lI&&Z&&Z.a,i=lI&&Z&&Z.d,c=iF&&ig&&BW(ig),G=(l.clientX-cl.clientX+A.x)/(B||1)+(c?c[0]-zi[0]:0)/(B||1),W=(l.clientY-cl.clientY+A.y)/(i||1)+(c?c[1]-zi[1]:0)/(i||1);if(!q.active&&!nZ){if(C&&Math.max(Math.abs(l.clientX-this._lastX),Math.abs(l.clientY-this._lastY))<C)return;this._onDragStart(I,!0)}if(lI){Z?(Z.e+=G-(Ki||0),Z.f+=W-(Ti||0)):Z={a:1,b:0,c:0,d:1,e:G,f:W};var V="matrix(".concat(Z.a,",").concat(Z.b,",").concat(Z.c,",").concat(Z.d,",").concat(Z.e,",").concat(Z.f,")");f(lI,"webkitTransform",V),f(lI,"mozTransform",V),f(lI,"msTransform",V),f(lI,"transform",V),Ki=G,Ti=W,ZC=l}I.cancelable&&I.preventDefault()}},_appendGhost:function(){if(!lI){var I=this.options.fallbackOnBody?document.body:XI,g=TI(e,!0,iF,!0,I),C=this.options;if(iF){for(ig=I;f(ig,"position")==="static"&&f(ig,"transform")==="none"&&ig!==document;)ig=ig.parentNode;ig!==document.body&&ig!==document.documentElement?(ig===document&&(ig=YC()),g.top+=ig.scrollTop,g.left+=ig.scrollLeft):ig=YC(),zi=BW(ig)}lI=e.cloneNode(!0),tg(lI,C.ghostClass,!1),tg(lI,C.fallbackClass,!0),tg(lI,C.dragClass,!0),f(lI,"transition",""),f(lI,"transform",""),f(lI,"box-sizing","border-box"),f(lI,"margin",0),f(lI,"top",g.top),f(lI,"left",g.left),f(lI,"width",g.width),f(lI,"height",g.height),f(lI,"opacity","0.8"),f(lI,"position",iF?"absolute":"fixed"),f(lI,"zIndex","100000"),f(lI,"pointerEvents","none"),q.ghost=lI,I.appendChild(lI),f(lI,"transform-origin",WW/parseInt(lI.style.width)*100+"% "+VW/parseInt(lI.style.height)*100+"%")}},_onDragStart:function(I,g){var C=this,A=I.dataTransfer,l=C.options;if(Yg("dragStart",this,{evt:I}),q.eventCanceled){this._onDrop();return}Yg("setupClone",this),q.eventCanceled||(tI=cW(e),tI.removeAttribute("id"),tI.draggable=!1,tI.style["will-change"]="",this._hideClone(),tg(tI,this.options.chosenClass,!1),q.clone=tI),C.cloneId=GF(function(){Yg("clone",C),!q.eventCanceled&&(C.options.removeCloneOnHide||XI.insertBefore(tI,e),C._hideClone(),bg({sortable:C,name:"clone"}))}),!g&&tg(e,l.dragClass,!0),g?(AF=!0,C._loopId=setInterval(C._emulateDragOver,50)):(UI(document,"mouseup",C._onDrop),UI(document,"touchend",C._onDrop),UI(document,"touchcancel",C._onDrop),A&&(A.effectAllowed="move",l.setData&&l.setData.call(C,A,e)),QI(document,"drop",C),f(e,"transform","translateZ(0)")),nZ=!0,C._dragStartId=GF(C._dragStarted.bind(C,g,I)),QI(document,"selectstart",C),Td=!0,ud&&f(document.body,"user-select","none")},_onDragOver:function(I){var g=this.el,C=I.target,A,l,Z,B=this.options,i=B.group,c=q.active,G=CF===i,W=B.sort,V=Ig||c,R,s=this,Q=!1;if(Li)return;function h(L,t){Yg(L,s,aC({evt:I,isOwner:G,axis:R?"vertical":"horizontal",revert:Z,dragRect:A,targetRect:l,canSort:W,fromSortable:V,target:C,completed:o,onMove:function(H,j){return cF(XI,g,e,A,H,TI(H),I,j)},changed:Y},t))}function N(){h("dragOverAnimationCapture"),s.captureAnimationState(),s!==V&&V.captureAnimationState()}function o(L){return h("dragOverCompleted",{insertion:L}),L&&(G?c._hideClone():c._showClone(s),s!==V&&(tg(e,Ig?Ig.options.ghostClass:c.options.ghostClass,!1),tg(e,B.ghostClass,!0)),Ig!==s&&s!==q.active?Ig=s:s===q.active&&Ig&&(Ig=null),V===s&&(s._ignoreWhileAnimating=C),s.animateAll(function(){h("dragOverAnimationComplete"),s._ignoreWhileAnimating=null}),s!==V&&(V.animateAll(),V._ignoreWhileAnimating=null)),(C===e&&!e.animated||C===g&&!C.animated)&&(SZ=null),!B.dragoverBubble&&!I.rootEl&&C!==document&&(e.parentNode[yg]._isOutsideThisEl(I.target),!L&&Gl(I)),!B.dragoverBubble&&I.stopPropagation&&I.stopPropagation(),Q=!0}function Y(){Hg=vg(e),yA=vg(e,B.draggable),bg({sortable:s,name:"change",toEl:g,newIndex:Hg,newDraggableIndex:yA,originalEvent:I})}if(I.preventDefault!==void 0&&I.cancelable&&I.preventDefault(),C=lC(C,B.draggable,g,!0),h("dragOver"),q.eventCanceled)return Q;if(e.contains(I.target)||C.animated&&C.animatingX&&C.animatingY||s._ignoreWhileAnimating===C)return o(!1);if(AF=!1,c&&!B.disabled&&(G?W||(Z=eI!==XI):Ig===this||(this.lastPutMode=CF.checkPull(this,c,e,I))&&i.checkPut(this,c,e,I))){if(R=this._getDirection(I,C)==="vertical",A=TI(e),h("dragOverValid"),q.eventCanceled)return Q;if(Z)return eI=XI,N(),this._hideClone(),h("revert"),q.eventCanceled||(il?XI.insertBefore(e,il):XI.appendChild(e)),o(!0);var n=ui(g,B.draggable);if(!n||aU(I,R,this)&&!n.animated){if(n===e)return o(!1);if(n&&g===I.target&&(C=n),C&&(l=TI(C)),cF(XI,g,e,A,C,l,I,!!C)!==!1)return N(),n&&n.nextSibling?g.insertBefore(e,n.nextSibling):g.appendChild(e),eI=g,Y(),o(!0)}else if(n&&oU(I,R,this)){var a=aZ(g,0,B,!0);if(a===e)return o(!1);if(C=a,l=TI(C),cF(XI,g,e,A,C,l,I,!1)!==!1)return N(),g.insertBefore(e,a),eI=g,Y(),o(!0)}else if(C.parentNode===g){l=TI(C);var w=0,X,J=e.parentNode!==g,y=!bU(e.animated&&e.toRect||A,C.animated&&C.toRect||l,R),z=R?"top":"left",u=dW(C,"top","top")||dW(e,"top","top"),II=u?u.scrollTop:void 0;SZ!==C&&(X=l[z],Ld=!1,ZF=!y&&B.invertSwap||J),w=YU(I,C,l,R,y?1:B.swapThreshold,B.invertedSwapThreshold==null?B.swapThreshold:B.invertedSwapThreshold,ZF,SZ===C);var _;if(w!==0){var BI=vg(e);do BI-=w,_=eI.children[BI];while(_&&(f(_,"display")==="none"||_===lI))}if(w===0||_===C)return o(!1);SZ=C,zd=w;var FI=C.nextElementSibling,RI=!1;RI=w===1;var O=cF(XI,g,e,A,C,l,I,RI);if(O!==!1)return(O===1||O===-1)&&(RI=O===1),Li=!0,setTimeout(hU,30),N(),RI&&!FI?g.appendChild(e):C.parentNode.insertBefore(e,RI?FI:C),u&&iW(u,0,II-u.scrollTop),eI=e.parentNode,X!==void 0&&!ZF&&(dF=Math.abs(X-TI(C)[z])),Y(),o(!0)}if(g.contains(e))return o(!1)}return!1},_ignoreWhileAnimating:null,_offMoveEvents:function(){UI(document,"mousemove",this._onTouchMove),UI(document,"touchmove",this._onTouchMove),UI(document,"pointermove",this._onTouchMove),UI(document,"dragover",Gl),UI(document,"mousemove",Gl),UI(document,"touchmove",Gl)},_offUpEvents:function(){var I=this.el.ownerDocument;UI(I,"mouseup",this._onDrop),UI(I,"touchend",this._onDrop),UI(I,"pointerup",this._onDrop),UI(I,"touchcancel",this._onDrop),UI(document,"selectstart",this)},_onDrop:function(I){var g=this.el,C=this.options;if(Hg=vg(e),yA=vg(e,C.draggable),Yg("drop",this,{evt:I}),eI=e&&e.parentNode,Hg=vg(e),yA=vg(e,C.draggable),q.eventCanceled){this._nulling();return}nZ=!1,ZF=!1,Ld=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),ji(this.cloneId),ji(this._dragStartId),this.nativeDraggable&&(UI(document,"drop",this),UI(g,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),ud&&f(document.body,"user-select",""),f(e,"transform",""),I&&(Td&&(I.cancelable&&I.preventDefault(),!C.dropBubble&&I.stopPropagation()),lI&&lI.parentNode&&lI.parentNode.removeChild(lI),(XI===eI||Ig&&Ig.lastPutMode!=="clone")&&tI&&tI.parentNode&&tI.parentNode.removeChild(tI),e&&(this.nativeDraggable&&UI(e,"dragend",this),Ei(e),e.style["will-change"]="",Td&&!nZ&&tg(e,Ig?Ig.options.ghostClass:this.options.ghostClass,!1),tg(e,this.options.chosenClass,!1),bg({sortable:this,name:"unchoose",toEl:eI,newIndex:null,newDraggableIndex:null,originalEvent:I}),XI!==eI?(Hg>=0&&(bg({rootEl:eI,name:"add",toEl:eI,fromEl:XI,originalEvent:I}),bg({sortable:this,name:"remove",toEl:eI,originalEvent:I}),bg({rootEl:eI,name:"sort",toEl:eI,fromEl:XI,originalEvent:I}),bg({sortable:this,name:"sort",toEl:eI,originalEvent:I})),Ig&&Ig.save()):Hg!==wZ&&Hg>=0&&(bg({sortable:this,name:"update",toEl:eI,originalEvent:I}),bg({sortable:this,name:"sort",toEl:eI,originalEvent:I})),q.active&&((Hg==null||Hg===-1)&&(Hg=wZ,yA=Kd),bg({sortable:this,name:"end",toEl:eI,originalEvent:I}),this.save()))),this._nulling()},_nulling:function(){Yg("nulling",this),XI=e=eI=lI=il=tI=gF=tA=cl=ZC=Td=Hg=yA=wZ=Kd=SZ=zd=Ig=CF=q.dragged=q.ghost=q.clone=q.active=null,BF.forEach(function(I){I.checked=!0}),BF.length=Ki=Ti=0},handleEvent:function(I){switch(I.type){case"drop":case"dragend":this._onDrop(I);break;case"dragenter":case"dragover":e&&(this._onDragOver(I),NU(I));break;case"selectstart":I.preventDefault();break}},toArray:function(){for(var I=[],g,C=this.el.children,A=0,l=C.length,Z=this.options;A<l;A++)g=C[A],lC(g,Z.draggable,this.el,!1)&&I.push(g.getAttribute(Z.dataIdAttr)||nU(g));return I},sort:function(I,g){var C={},A=this.el;this.toArray().forEach(function(l,Z){var B=A.children[Z];lC(B,this.options.draggable,A,!1)&&(C[l]=B)},this),g&&this.captureAnimationState(),I.forEach(function(l){C[l]&&(A.removeChild(C[l]),A.appendChild(C[l]))}),g&&this.animateAll()},save:function(){var I=this.options.store;I&&I.set&&I.set(this)},closest:function(I,g){return lC(I,g||this.options.draggable,this.el,!1)},option:function(I,g){var C=this.options;if(g===void 0)return C[I];var A=kd.modifyOption(this,I,g);typeof A<"u"?C[I]=A:C[I]=g,I==="group"&&bW(C)},destroy:function(){Yg("destroy",this);var I=this.el;I[yg]=null,UI(I,"mousedown",this._onTapStart),UI(I,"touchstart",this._onTapStart),UI(I,"pointerdown",this._onTapStart),this.nativeDraggable&&(UI(I,"dragover",this),UI(I,"dragenter",this)),Array.prototype.forEach.call(I.querySelectorAll("[draggable]"),function(g){g.removeAttribute("draggable")}),this._onDrop(),this._disableDelayedDragEvents(),lF.splice(lF.indexOf(this.el),1),this.el=I=null},_hideClone:function(){if(!tA){if(Yg("hideClone",this),q.eventCanceled)return;f(tI,"display","none"),this.options.removeCloneOnHide&&tI.parentNode&&tI.parentNode.removeChild(tI),tA=!0}},_showClone:function(I){if(I.lastPutMode!=="clone"){this._hideClone();return}if(tA){if(Yg("showClone",this),q.eventCanceled)return;e.parentNode==XI&&!this.options.group.revertClone?XI.insertBefore(tI,e):il?XI.insertBefore(tI,il):XI.appendChild(tI),this.options.group.revertClone&&this.animate(e,tI),f(tI,"display",""),tA=!1}}};function NU(d){d.dataTransfer&&(d.dataTransfer.dropEffect="move"),d.cancelable&&d.preventDefault()}function cF(d,I,g,C,A,l,Z,B){var i,c=d[yg],G=c.options.onMove,W;return window.CustomEvent&&!rC&&!ed?i=new CustomEvent("move",{bubbles:!0,cancelable:!0}):(i=document.createEvent("Event"),i.initEvent("move",!0,!0)),i.to=I,i.from=d,i.dragged=g,i.draggedRect=C,i.related=A||I,i.relatedRect=l||TI(I),i.willInsertAfter=B,i.originalEvent=Z,d.dispatchEvent(i),G&&(W=G.call(c,i,Z)),W}function Ei(d){d.draggable=!1}function hU(){Li=!1}function oU(d,I,g){var C=TI(aZ(g.el,0,g.options,!0)),A=GW(g.el,g.options,lI),l=10;return I?d.clientX<A.left-l||d.clientY<C.top&&d.clientX<C.right:d.clientY<A.top-l||d.clientY<C.bottom&&d.clientX<C.left}function aU(d,I,g){var C=TI(ui(g.el,g.options.draggable)),A=GW(g.el,g.options,lI),l=10;return I?d.clientX>A.right+l||d.clientY>C.bottom&&d.clientX>C.left:d.clientY>A.bottom+l||d.clientX>C.right&&d.clientY>C.top}function YU(d,I,g,C,A,l,Z,B){var i=C?d.clientY:d.clientX,c=C?g.height:g.width,G=C?g.top:g.left,W=C?g.bottom:g.right,V=!1;if(!Z){if(B&&dF<c*A){if(!Ld&&(zd===1?i>G+c*l/2:i<W-c*l/2)&&(Ld=!0),Ld)V=!0;else if(zd===1?i<G+dF:i>W-dF)return-zd}else if(i>G+c*(1-A)/2&&i<W-c*(1-A)/2)return wU(I)}return V=V||Z,V&&(i<G+c*l/2||i>W-c*l/2)?i>G+c/2?1:-1:0}function wU(d){return vg(e)<vg(d)?1:-1}function nU(d){for(var I=d.tagName+d.className+d.src+d.href+d.textContent,g=I.length,C=0;g--;)C+=I.charCodeAt(g);return C.toString(36)}function SU(d){BF.length=0;for(var I=d.getElementsByTagName("input"),g=I.length;g--;){var C=I[g];C.checked&&BF.push(C)}}function GF(d){return setTimeout(d,0)}function ji(d){return clearTimeout(d)}FF&&QI(document,"touchmove",function(d){(q.active||nZ)&&d.cancelable&&d.preventDefault()}),q.utils={on:QI,off:UI,css:f,find:ZW,is:function(I,g){return!!lC(I,g,I,!1)},extend:iU,throttle:FW,closest:lC,toggleClass:tg,clone:cW,index:vg,nextTick:GF,cancelNextTick:ji,detectDirection:UW,getChild:aZ},q.get=function(d){return d[yg]},q.mount=function(){for(var d=arguments.length,I=new Array(d),g=0;g<d;g++)I[g]=arguments[g];I[0].constructor===Array&&(I=I[0]),I.forEach(function(C){if(!C.prototype||!C.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(C));C.utils&&(q.utils=aC(aC({},q.utils),C.utils)),kd.mount(C)})},q.create=function(d,I){return new q(d,I)},q.version=dU;var zI=[],Ed,xi,Oi=!1,ri,vi,WF,jd;function JU(){function d(){this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0};for(var I in this)I.charAt(0)==="_"&&typeof this[I]=="function"&&(this[I]=this[I].bind(this))}return d.prototype={dragStarted:function(g){var C=g.originalEvent;this.sortable.nativeDraggable?QI(document,"dragover",this._handleAutoScroll):this.options.supportPointer?QI(document,"pointermove",this._handleFallbackAutoScroll):C.touches?QI(document,"touchmove",this._handleFallbackAutoScroll):QI(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(g){var C=g.originalEvent;!this.options.dragOverBubble&&!C.rootEl&&this._handleAutoScroll(C)},drop:function(){this.sortable.nativeDraggable?UI(document,"dragover",this._handleAutoScroll):(UI(document,"pointermove",this._handleFallbackAutoScroll),UI(document,"touchmove",this._handleFallbackAutoScroll),UI(document,"mousemove",this._handleFallbackAutoScroll)),NW(),VF(),cU()},nulling:function(){WF=xi=Ed=Oi=jd=ri=vi=null,zI.length=0},_handleFallbackAutoScroll:function(g){this._handleAutoScroll(g,!0)},_handleAutoScroll:function(g,C){var A=this,l=(g.touches?g.touches[0]:g).clientX,Z=(g.touches?g.touches[0]:g).clientY,B=document.elementFromPoint(l,Z);if(WF=g,C||this.options.forceAutoScrollFallback||ed||rC||ud){Pi(g,this.options,B,C);var i=XA(B,!0);Oi&&(!jd||l!==ri||Z!==vi)&&(jd&&NW(),jd=setInterval(function(){var c=XA(document.elementFromPoint(l,Z),!0);c!==i&&(i=c,VF()),Pi(g,A.options,c,C)},10),ri=l,vi=Z)}else{if(!this.options.bubbleScroll||XA(B,!0)===YC()){VF();return}Pi(g,this.options,XA(B,!1),!1)}}},xC(d,{pluginName:"scroll",initializeByDefault:!0})}function VF(){zI.forEach(function(d){clearInterval(d.pid)}),zI=[]}function NW(){clearInterval(jd)}var Pi=FW(function(d,I,g,C){if(I.scroll){var A=(d.touches?d.touches[0]:d).clientX,l=(d.touches?d.touches[0]:d).clientY,Z=I.scrollSensitivity,B=I.scrollSpeed,i=YC(),c=!1,G;xi!==g&&(xi=g,VF(),Ed=I.scroll,G=I.scrollFn,Ed===!0&&(Ed=XA(g,!0)));var W=0,V=Ed;do{var R=V,s=TI(R),Q=s.top,h=s.bottom,N=s.left,o=s.right,Y=s.width,n=s.height,a=void 0,w=void 0,X=R.scrollWidth,J=R.scrollHeight,y=f(R),z=R.scrollLeft,u=R.scrollTop;R===i?(a=Y<X&&(y.overflowX==="auto"||y.overflowX==="scroll"||y.overflowX==="visible"),w=n<J&&(y.overflowY==="auto"||y.overflowY==="scroll"||y.overflowY==="visible")):(a=Y<X&&(y.overflowX==="auto"||y.overflowX==="scroll"),w=n<J&&(y.overflowY==="auto"||y.overflowY==="scroll"));var II=a&&(Math.abs(o-A)<=Z&&z+Y<X)-(Math.abs(N-A)<=Z&&!!z),_=w&&(Math.abs(h-l)<=Z&&u+n<J)-(Math.abs(Q-l)<=Z&&!!u);if(!zI[W])for(var BI=0;BI<=W;BI++)zI[BI]||(zI[BI]={});(zI[W].vx!=II||zI[W].vy!=_||zI[W].el!==R)&&(zI[W].el=R,zI[W].vx=II,zI[W].vy=_,clearInterval(zI[W].pid),(II!=0||_!=0)&&(c=!0,zI[W].pid=setInterval((function(){C&&this.layer===0&&q.active._onTouchMove(WF);var FI=zI[this.layer].vy?zI[this.layer].vy*B:0,RI=zI[this.layer].vx?zI[this.layer].vx*B:0;typeof G=="function"&&G.call(q.dragged.parentNode[yg],RI,FI,d,WF,zI[this.layer].el)!=="continue"||iW(zI[this.layer].el,RI,FI)}).bind({layer:W}),24))),W++}while(I.bubbleScroll&&V!==i&&(V=XA(V,!1)));Oi=c}},30),hW=function(I){var g=I.originalEvent,C=I.putSortable,A=I.dragEl,l=I.activeSortable,Z=I.dispatchSortableEvent,B=I.hideGhostForTarget,i=I.unhideGhostForTarget;if(g){var c=C||l;B();var G=g.changedTouches&&g.changedTouches.length?g.changedTouches[0]:g,W=document.elementFromPoint(G.clientX,G.clientY);i(),c&&!c.el.contains(W)&&(Z("spill"),this.onSpill({dragEl:A,putSortable:C}))}};function fi(){}fi.prototype={startIndex:null,dragStart:function(I){var g=I.oldDraggableIndex;this.startIndex=g},onSpill:function(I){var g=I.dragEl,C=I.putSortable;this.sortable.captureAnimationState(),C&&C.captureAnimationState();var A=aZ(this.sortable.el,this.startIndex,this.options);A?this.sortable.el.insertBefore(g,A):this.sortable.el.appendChild(g),this.sortable.animateAll(),C&&C.animateAll()},drop:hW},xC(fi,{pluginName:"revertOnSpill"});function qi(){}qi.prototype={onSpill:function(I){var g=I.dragEl,C=I.putSortable,A=C||this.sortable;A.captureAnimationState(),g.parentNode&&g.parentNode.removeChild(g),A.animateAll()},drop:hW},xC(qi,{pluginName:"removeOnSpill"}),q.mount(new JU),q.mount(qi,fi);const oW="[vue-draggable-plus]: ";function MU(d){console.warn(oW+d)}function DU(d){console.error(oW+d)}function aW(d,I,g){return g>=0&&g<d.length&&d.splice(g,0,d.splice(I,1)[0]),d}function YW(d,I){return Array.isArray(d)&&d.splice(I,1),d}function wW(d,I,g){return Array.isArray(d)&&d.splice(I,0,g),d}function XU(d){return typeof d>"u"}function tU(d){return typeof d=="string"}function nW(d,I,g){const C=d.children[g];d.insertBefore(I,C)}function _i(d){d.parentNode&&d.parentNode.removeChild(d)}function yU(d,I=document){var C;let g=null;return typeof(I==null?void 0:I.querySelector)=="function"?g=(C=I==null?void 0:I.querySelector)==null?void 0:C.call(I,d):g=document.querySelector(d),g||MU(`Element not found: ${d}`),g}function HU(d,I,g=null){return function(...C){return d.apply(g,C),I.apply(g,C)}}function eU(d,I){const g={...d};return Object.keys(I).forEach(C=>{g[C]?g[C]=HU(d[C],I[C]):g[C]=I[C]}),g}function uU(d){return d instanceof HTMLElement}function pU(d,I){Object.keys(d).forEach(g=>{I(g,d[g])})}function kU(d){return d==null?d:JSON.parse(JSON.stringify(d))}function KU(d){S.getCurrentInstance()&&S.onUnmounted(d)}function TU(d){S.getCurrentInstance()?S.onMounted(d):S.nextTick(d)}const SW=Symbol("cloneElement");function zU(...d){var n;const I=(n=S.getCurrentInstance())==null?void 0:n.proxy,g=d[0];let[,C,A]=d;Array.isArray(S.unref(C))||(A=C,C=null);let l=null;const{immediate:Z=!0,clone:B=kU,customUpdate:i}=S.unref(A)??{};function c(a){var w;a.item[SW]=B(S.unref((w=S.unref(C))==null?void 0:w[a.oldIndex]))}function G(a){const w=a.item[SW];if(!XU(w)){if(_i(a.item),S.isRef(C)){const X=[...S.unref(C)];C.value=wW(X,a.newDraggableIndex,w);return}wW(S.unref(C),a.newDraggableIndex,w)}}function W(a){const{from:w,item:X,oldIndex:J,oldDraggableIndex:y,pullMode:z,clone:u}=a;if(nW(w,X,J),z==="clone"){_i(u);return}if(S.isRef(C)){const II=[...S.unref(C)];C.value=YW(II,y);return}YW(S.unref(C),y)}function V(a){if(i){i(a);return}const{from:w,item:X,oldIndex:J,newIndex:y}=a;if(_i(X),nW(w,X,J),S.isRef(C)){const z=[...S.unref(C)];C.value=aW(z,J,y);return}aW(S.unref(C),J,y)}const R={onUpdate:V,onStart:c,onAdd:G,onRemove:W};function s(a){const w=S.unref(g);return a||(a=tU(w)?yU(w,I==null?void 0:I.$el):w),a&&!uU(a)&&(a=a.$el),a||DU("Root element not found"),a}function Q(){const{immediate:a,clone:w,...X}=S.unref(A)??{};return eU(C===null?{}:R,X)}const h=a=>{a=s(a),l&&N.destroy(),l=new q(a,Q())};S.watch(()=>A,()=>{l&&pU(Q(),(a,w)=>{l==null||l.option(a,w)})},{deep:!0});const N={option:(a,w)=>l==null?void 0:l.option(a,w),destroy:()=>{l==null||l.destroy(),l=null},save:()=>l==null?void 0:l.save(),toArray:()=>l==null?void 0:l.toArray(),closest:(...a)=>l==null?void 0:l.closest(...a)},o=()=>N==null?void 0:N.option("disabled",!0),Y=()=>N==null?void 0:N.option("disabled",!1);return TU(()=>{Z&&h()}),KU(N.destroy),{start:h,pause:o,resume:Y,...N}}const RF=["update","start","add","remove","choose","unchoose","end","sort","filter","clone","move","change"],JW=["modelValue","column","row","gap","itemHeight","itemWidth","disabled",...RF.map(d=>`on${d.replace(/^\S/,I=>I.toUpperCase())}`)],xd=S.defineComponent({name:"DList",model:{prop:"modelValue",event:"update:modelValue"},props:JW,emits:["update:modelValue",...RF],setup(d,{slots:I,emit:g,expose:C,attrs:A}){const l=RF.reduce((R,s)=>{const Q=`on${s.replace(/^\S/,h=>h.toUpperCase())}`;return R[Q]=(...h)=>g(s,...h),R},{}),Z=S.computed(()=>{const{modelValue:R,...s}=S.toRefs(d),Q=Object.entries(s).reduce((h,[N,o])=>{const Y=S.unref(o);return Y!==void 0&&(h[N]=N==="disabled"&&Y===""?!0:Y),h},{});return{...l,...js({...A,...Q})}}),{resizeRef:B,contentRect:i}=ei(),c=S.computed({get:()=>d.modelValue,set:R=>g("update:modelValue",R)}),G=S.computed(()=>{const R=Z.value.gap||0,s=[Z.value.itemWidth?Os(Z.value.itemWidth,i.value?i.value.width:400,R):Z.value.column||4,Z.value.itemWidth?Z.value.itemWidth:"1fr"],Q=Z.value.itemHeight||(Z.value.row?(100/Z.value.row).toFixed(2)+"%":"25%");return{"grid-template-columns":`repeat(${s[0]},${s[1]})`,"grid-auto-rows":Q,gap:R}}),W=S.ref(),V=S.reactive(zU(W,c,Z));return C(V),()=>S.h("div",{ref:B,class:"d-list"},[S.h("div",{class:"d-list__content",style:G.value,ref:W},[c.value.map((R,s)=>{var Q;return S.h("div",{class:{move:!Z.value.disabled}},[((Q=I.default)==null?void 0:Q.call(I,{item:R,index:s}))||S.h("div",{class:"list__content__item"},R)])})])])}});xd.install=d=>{const I=xd.name;d.component(I,xd)};var Od={};Od.d=(d,I)=>{for(var g in I)Od.o(I,g)&&!Od.o(d,g)&&Object.defineProperty(d,g,{enumerable:!0,get:I[g]})},Od.o=(d,I)=>Object.prototype.hasOwnProperty.call(d,I);var $=globalThis.pdfjsLib={};Od.d($,{AbortException:()=>Vl,AnnotationEditorLayer:()=>Hc,AnnotationEditorParamsType:()=>gI,AnnotationEditorType:()=>sI,AnnotationEditorUIManager:()=>sl,AnnotationLayer:()=>Km,AnnotationMode:()=>HA,CMapCompressionType:()=>gc,ColorPicker:()=>uF,DOMSVGFactory:()=>Fc,DrawLayer:()=>ec,FeatureTest:()=>wg,GlobalWorkerOptions:()=>qC,ImageKind:()=>sF,InvalidPDFException:()=>DW,MissingPDFException:()=>Wl,OPS:()=>dC,Outliner:()=>Dc,PDFDataRangeTransport:()=>iV,PDFDateString:()=>KW,PDFWorker:()=>DZ,PasswordResponses:()=>xU,PermissionFlag:()=>jU,PixelsPerInch:()=>uA,RenderingCancelledException:()=>ic,TextLayer:()=>MZ,UnexpectedResponseException:()=>QF,Util:()=>x,VerbosityLevel:()=>UF,XfaLayer:()=>VV,build:()=>Qm,createValidAbsoluteUrl:()=>PU,fetchData:()=>wF,getDocument:()=>cm,getFilenameFromUrl:()=>Zb,getPdfFilenameFromUrl:()=>db,getXfaPageViewport:()=>Bb,isDataScheme:()=>cc,isPdfFile:()=>Gc,noContextMenu:()=>ng,normalizeUnicode:()=>gb,renderTextLayer:()=>gm,setLayerDimensions:()=>Rl,shadow:()=>bI,updateTextLayer:()=>Cm,version:()=>mm});const cg=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser"),MW=[1,0,0,1,0,0],$i=[.001,0,0,.001,0,0],LU=1e7,Ic=1.35,Pg={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256},HA={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},EU="pdfjs_internal_editor_",sI={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15},gI={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_DEFAULT_COLOR:32,HIGHLIGHT_THICKNESS:33,HIGHLIGHT_FREE:34,HIGHLIGHT_SHOW_ALL:35},jU={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},Gg={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},sF={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},xI={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},rd={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},UF={ERRORS:0,WARNINGS:1,INFOS:5},gc={NONE:0,BINARY:1},dC={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},xU={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let bF=UF.WARNINGS;function OU(d){Number.isInteger(d)&&(bF=d)}function rU(){return bF}function mF(d){bF>=UF.INFOS&&console.log(`Info: ${d}`)}function iI(d){bF>=UF.WARNINGS&&console.log(`Warning: ${d}`)}function aI(d){throw new Error(d)}function OI(d,I){d||aI(I)}function vU(d){switch(d==null?void 0:d.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function PU(d,I=null,g=null){if(!d)return null;try{if(g&&typeof d=="string"){if(g.addDefaultProtocol&&d.startsWith("www.")){const A=d.match(/\./g);(A==null?void 0:A.length)>=2&&(d=`http://${d}`)}if(g.tryConvertEncoding)try{d=Ib(d)}catch{}}const C=I?new URL(d,I):new URL(d);if(vU(C))return C}catch{}return null}function bI(d,I,g,C=!1){return Object.defineProperty(d,I,{value:g,enumerable:!C,configurable:!0,writable:!1}),g}const eA=function(){function I(g,C){this.constructor===I&&aI("Cannot initialize BaseException."),this.message=g,this.name=C}return I.prototype=new Error,I.constructor=I,I}();class Cc extends eA{constructor(I,g){super(I,"PasswordException"),this.code=g}}class Ac extends eA{constructor(I,g){super(I,"UnknownErrorException"),this.details=g}}class DW extends eA{constructor(I){super(I,"InvalidPDFException")}}class Wl extends eA{constructor(I){super(I,"MissingPDFException")}}class QF extends eA{constructor(I,g){super(I,"UnexpectedResponseException"),this.status=g}}class fU extends eA{constructor(I){super(I,"FormatError")}}class Vl extends eA{constructor(I){super(I,"AbortException")}}function XW(d){(typeof d!="object"||(d==null?void 0:d.length)===void 0)&&aI("Invalid argument for bytesToString");const I=d.length,g=8192;if(I<g)return String.fromCharCode.apply(null,d);const C=[];for(let A=0;A<I;A+=g){const l=Math.min(A+g,I),Z=d.subarray(A,l);C.push(String.fromCharCode.apply(null,Z))}return C.join("")}function NF(d){typeof d!="string"&&aI("Invalid argument for stringToBytes");const I=d.length,g=new Uint8Array(I);for(let C=0;C<I;++C)g[C]=d.charCodeAt(C)&255;return g}function qU(d){return String.fromCharCode(d>>24&255,d>>16&255,d>>8&255,d&255)}function lc(d){const I=Object.create(null);for(const[g,C]of d)I[g]=C;return I}function _U(){const d=new Uint8Array(4);return d[0]=1,new Uint32Array(d.buffer,0,1)[0]===1}function $U(){try{return new Function(""),!0}catch{return!1}}class wg{static get isLittleEndian(){return bI(this,"isLittleEndian",_U())}static get isEvalSupported(){return bI(this,"isEvalSupported",$U())}static get isOffscreenCanvasSupported(){return bI(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get platform(){return typeof navigator<"u"&&typeof(navigator==null?void 0:navigator.platform)=="string"?bI(this,"platform",{isMac:navigator.platform.includes("Mac")}):bI(this,"platform",{isMac:!1})}static get isCSSRoundSupported(){var I,g;return bI(this,"isCSSRoundSupported",(g=(I=globalThis.CSS)==null?void 0:I.supports)==null?void 0:g.call(I,"width: round(1.5px, 1px)"))}}const Zc=Array.from(Array(256).keys(),d=>d.toString(16).padStart(2,"0"));class x{static makeHexColor(I,g,C){return`#${Zc[I]}${Zc[g]}${Zc[C]}`}static scaleMinMax(I,g){let C;I[0]?(I[0]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[0],g[2]*=I[0],I[3]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[3],g[3]*=I[3]):(C=g[0],g[0]=g[1],g[1]=C,C=g[2],g[2]=g[3],g[3]=C,I[1]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[1],g[3]*=I[1],I[2]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[2],g[2]*=I[2]),g[0]+=I[4],g[1]+=I[5],g[2]+=I[4],g[3]+=I[5]}static transform(I,g){return[I[0]*g[0]+I[2]*g[1],I[1]*g[0]+I[3]*g[1],I[0]*g[2]+I[2]*g[3],I[1]*g[2]+I[3]*g[3],I[0]*g[4]+I[2]*g[5]+I[4],I[1]*g[4]+I[3]*g[5]+I[5]]}static applyTransform(I,g){const C=I[0]*g[0]+I[1]*g[2]+g[4],A=I[0]*g[1]+I[1]*g[3]+g[5];return[C,A]}static applyInverseTransform(I,g){const C=g[0]*g[3]-g[1]*g[2],A=(I[0]*g[3]-I[1]*g[2]+g[2]*g[5]-g[4]*g[3])/C,l=(-I[0]*g[1]+I[1]*g[0]+g[4]*g[1]-g[5]*g[0])/C;return[A,l]}static getAxialAlignedBoundingBox(I,g){const C=this.applyTransform(I,g),A=this.applyTransform(I.slice(2,4),g),l=this.applyTransform([I[0],I[3]],g),Z=this.applyTransform([I[2],I[1]],g);return[Math.min(C[0],A[0],l[0],Z[0]),Math.min(C[1],A[1],l[1],Z[1]),Math.max(C[0],A[0],l[0],Z[0]),Math.max(C[1],A[1],l[1],Z[1])]}static inverseTransform(I){const g=I[0]*I[3]-I[1]*I[2];return[I[3]/g,-I[1]/g,-I[2]/g,I[0]/g,(I[2]*I[5]-I[4]*I[3])/g,(I[4]*I[1]-I[5]*I[0])/g]}static singularValueDecompose2dScale(I){const g=[I[0],I[2],I[1],I[3]],C=I[0]*g[0]+I[1]*g[2],A=I[0]*g[1]+I[1]*g[3],l=I[2]*g[0]+I[3]*g[2],Z=I[2]*g[1]+I[3]*g[3],B=(C+Z)/2,i=Math.sqrt((C+Z)**2-4*(C*Z-l*A))/2,c=B+i||1,G=B-i||1;return[Math.sqrt(c),Math.sqrt(G)]}static normalizeRect(I){const g=I.slice(0);return I[0]>I[2]&&(g[0]=I[2],g[2]=I[0]),I[1]>I[3]&&(g[1]=I[3],g[3]=I[1]),g}static intersect(I,g){const C=Math.max(Math.min(I[0],I[2]),Math.min(g[0],g[2])),A=Math.min(Math.max(I[0],I[2]),Math.max(g[0],g[2]));if(C>A)return null;const l=Math.max(Math.min(I[1],I[3]),Math.min(g[1],g[3])),Z=Math.min(Math.max(I[1],I[3]),Math.max(g[1],g[3]));return l>Z?null:[C,l,A,Z]}static bezierBoundingBox(I,g,C,A,l,Z,B,i,c){return c?(c[0]=Math.min(c[0],I,B),c[1]=Math.min(c[1],g,i),c[2]=Math.max(c[2],I,B),c[3]=Math.max(c[3],g,i)):c=[Math.min(I,B),Math.min(g,i),Math.max(I,B),Math.max(g,i)],b(this,IA,fc).call(this,I,C,l,B,g,A,Z,i,3*(-I+3*(C-l)+B),6*(I-2*C+l),3*(C-I),c),b(this,IA,fc).call(this,I,C,l,B,g,A,Z,i,3*(-g+3*(A-Z)+i),6*(g-2*A+Z),3*(A-g),c),c}}IA=new WeakSet,Fi=function(I,g,C,A,l,Z,B,i,c,G){if(c<=0||c>=1)return;const W=1-c,V=c*c,R=V*c,s=W*(W*(W*I+3*c*g)+3*V*C)+R*A,Q=W*(W*(W*l+3*c*Z)+3*V*B)+R*i;G[0]=Math.min(G[0],s),G[1]=Math.min(G[1],Q),G[2]=Math.max(G[2],s),G[3]=Math.max(G[3],Q)},fc=function(I,g,C,A,l,Z,B,i,c,G,W,V){if(Math.abs(c)<1e-12){Math.abs(G)>=1e-12&&b(this,IA,Fi).call(this,I,g,C,A,l,Z,B,i,-W/G,V);return}const R=G**2-4*W*c;if(R<0)return;const s=Math.sqrt(R),Q=2*c;b(this,IA,Fi).call(this,I,g,C,A,l,Z,B,i,(-G+s)/Q,V),b(this,IA,Fi).call(this,I,g,C,A,l,Z,B,i,(-G-s)/Q,V)},m(x,IA);function Ib(d){return decodeURIComponent(escape(d))}let dc=null,tW=null;function gb(d){return dc||(dc=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,tW=new Map([["ﬅ","ſt"]])),d.replaceAll(dc,(I,g,C)=>g?g.normalize("NFKC"):tW.get(C))}function Cb(){if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const d=new Uint8Array(32);if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(d);else for(let I=0;I<32;I++)d[I]=Math.floor(Math.random()*255);return XW(d)}const yW="pdfjs_internal_id_",vC={BEZIER_CURVE_TO:0,MOVE_TO:1,LINE_TO:2,QUADRATIC_CURVE_TO:3,RESTORE:4,SAVE:5,SCALE:6,TRANSFORM:7,TRANSLATE:8};class hF{constructor(){this.constructor===hF&&aI("Cannot initialize BaseFilterFactory.")}addFilter(I){return"none"}addHCMFilter(I,g){return"none"}addAlphaFilter(I){return"none"}addLuminosityFilter(I){return"none"}addHighlightHCMFilter(I,g,C,A,l){return"none"}destroy(I=!1){}}const Lc=class Lc{constructor({enableHWA:I=!1}={}){m(this,Z0,!1);this.constructor===Lc&&aI("Cannot initialize BaseCanvasFactory."),U(this,Z0,I)}create(I,g){if(I<=0||g<=0)throw new Error("Invalid canvas size");const C=this._createCanvas(I,g);return{canvas:C,context:C.getContext("2d",{willReadFrequently:!F(this,Z0)})}}reset(I,g,C){if(!I.canvas)throw new Error("Canvas is not specified");if(g<=0||C<=0)throw new Error("Invalid canvas size");I.canvas.width=g,I.canvas.height=C}destroy(I){if(!I.canvas)throw new Error("Canvas is not specified");I.canvas.width=0,I.canvas.height=0,I.canvas=null,I.context=null}_createCanvas(I,g){aI("Abstract method `_createCanvas` called.")}};Z0=new WeakMap;let oF=Lc;class aF{constructor({baseUrl:I=null,isCompressed:g=!0}){this.constructor===aF&&aI("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=I,this.isCompressed=g}async fetch({name:I}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!I)throw new Error("CMap name must be specified.");const g=this.baseUrl+I+(this.isCompressed?".bcmap":""),C=this.isCompressed?gc.BINARY:gc.NONE;return this._fetchData(g,C).catch(A=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${g}`)})}_fetchData(I,g){aI("Abstract method `_fetchData` called.")}}class YF{constructor({baseUrl:I=null}){this.constructor===YF&&aI("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=I}async fetch({filename:I}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!I)throw new Error("Font filename must be specified.");const g=`${this.baseUrl}${I}`;return this._fetchData(g).catch(C=>{throw new Error(`Unable to load font data at: ${g}`)})}_fetchData(I){aI("Abstract method `_fetchData` called.")}}class Bc{constructor(){this.constructor===Bc&&aI("Cannot initialize BaseSVGFactory.")}create(I,g,C=!1){if(I<=0||g<=0)throw new Error("Invalid SVG dimensions");const A=this._createSVG("svg:svg");return A.setAttribute("version","1.1"),C||(A.setAttribute("width",`${I}px`),A.setAttribute("height",`${g}px`)),A.setAttribute("preserveAspectRatio","none"),A.setAttribute("viewBox",`0 0 ${I} ${g}`),A}createElement(I){if(typeof I!="string")throw new Error("Invalid SVG element type");return this._createSVG(I)}_createSVG(I){aI("Abstract method `_createSVG` called.")}}const PC="http://www.w3.org/2000/svg",Ql=class Ql{};dI(Ql,"CSS",96),dI(Ql,"PDF",72),dI(Ql,"PDF_TO_CSS_UNITS",Ql.CSS/Ql.PDF);let uA=Ql;class Ab extends hF{constructor({docId:g,ownerDocument:C=globalThis.document}={}){super();m(this,E);m(this,Nl);m(this,SC);m(this,gA);m(this,Mg);m(this,LF);m(this,hl,0);U(this,gA,g),U(this,Mg,C)}addFilter(g){if(!g)return"none";let C=F(this,E,Ug).get(g);if(C)return C;const[A,l,Z]=b(this,E,ii).call(this,g),B=g.length===1?A:`${A}${l}${Z}`;if(C=F(this,E,Ug).get(B),C)return F(this,E,Ug).set(g,C),C;const i=`g_${F(this,gA)}_transfer_map_${rg(this,hl)._++}`,c=`url(#${i})`;F(this,E,Ug).set(g,c),F(this,E,Ug).set(B,c);const G=b(this,E,Dd).call(this,i);return b(this,E,KB).call(this,A,l,Z,G),c}addHCMFilter(g,C){var s;const A=`${g}-${C}`,l="base";let Z=F(this,E,Jd).get(l);if((Z==null?void 0:Z.key)===A||(Z?((s=Z.filter)==null||s.remove(),Z.key=A,Z.url="none",Z.filter=null):(Z={key:A,url:"none",filter:null},F(this,E,Jd).set(l,Z)),!g||!C))return Z.url;const B=b(this,E,TB).call(this,g);g=x.makeHexColor(...B);const i=b(this,E,TB).call(this,C);if(C=x.makeHexColor(...i),F(this,E,Md).style.color="",g==="#000000"&&C==="#ffffff"||g===C)return Z.url;const c=new Array(256);for(let Q=0;Q<=255;Q++){const h=Q/255;c[Q]=h<=.03928?h/12.92:((h+.055)/1.055)**2.4}const G=c.join(","),W=`g_${F(this,gA)}_hcm_filter`,V=Z.filter=b(this,E,Dd).call(this,W);b(this,E,KB).call(this,G,G,G,V),b(this,E,qc).call(this,V);const R=(Q,h)=>{const N=B[Q]/255,o=i[Q]/255,Y=new Array(h+1);for(let n=0;n<=h;n++)Y[n]=N+n/h*(o-N);return Y.join(",")};return b(this,E,KB).call(this,R(0,5),R(1,5),R(2,5),V),Z.url=`url(#${W})`,Z.url}addAlphaFilter(g){let C=F(this,E,Ug).get(g);if(C)return C;const[A]=b(this,E,ii).call(this,[g]),l=`alpha_${A}`;if(C=F(this,E,Ug).get(l),C)return F(this,E,Ug).set(g,C),C;const Z=`g_${F(this,gA)}_alpha_map_${rg(this,hl)._++}`,B=`url(#${Z})`;F(this,E,Ug).set(g,B),F(this,E,Ug).set(l,B);const i=b(this,E,Dd).call(this,Z);return b(this,E,_c).call(this,A,i),B}addLuminosityFilter(g){let C=F(this,E,Ug).get(g||"luminosity");if(C)return C;let A,l;if(g?([A]=b(this,E,ii).call(this,[g]),l=`luminosity_${A}`):l="luminosity",C=F(this,E,Ug).get(l),C)return F(this,E,Ug).set(g,C),C;const Z=`g_${F(this,gA)}_luminosity_map_${rg(this,hl)._++}`,B=`url(#${Z})`;F(this,E,Ug).set(g,B),F(this,E,Ug).set(l,B);const i=b(this,E,Dd).call(this,Z);return b(this,E,_V).call(this,i),g&&b(this,E,_c).call(this,A,i),B}addHighlightHCMFilter(g,C,A,l,Z){var o;const B=`${C}-${A}-${l}-${Z}`;let i=F(this,E,Jd).get(g);if((i==null?void 0:i.key)===B||(i?((o=i.filter)==null||o.remove(),i.key=B,i.url="none",i.filter=null):(i={key:B,url:"none",filter:null},F(this,E,Jd).set(g,i)),!C||!A))return i.url;const[c,G]=[C,A].map(b(this,E,TB).bind(this));let W=Math.round(.2126*c[0]+.7152*c[1]+.0722*c[2]),V=Math.round(.2126*G[0]+.7152*G[1]+.0722*G[2]),[R,s]=[l,Z].map(b(this,E,TB).bind(this));V<W&&([W,V,R,s]=[V,W,s,R]),F(this,E,Md).style.color="";const Q=(Y,n,a)=>{const w=new Array(256),X=(V-W)/a,J=Y/255,y=(n-Y)/(255*a);let z=0;for(let u=0;u<=a;u++){const II=Math.round(W+u*X),_=J+u*y;for(let BI=z;BI<=II;BI++)w[BI]=_;z=II+1}for(let u=z;u<256;u++)w[u]=w[z-1];return w.join(",")},h=`g_${F(this,gA)}_hcm_${g}_filter`,N=i.filter=b(this,E,Dd).call(this,h);return b(this,E,qc).call(this,N),b(this,E,KB).call(this,Q(R[0],s[0],5),Q(R[1],s[1],5),Q(R[2],s[2],5),N),i.url=`url(#${h})`,i.url}destroy(g=!1){g&&F(this,E,Jd).size!==0||(F(this,SC)&&(F(this,SC).parentNode.parentNode.remove(),U(this,SC,null)),F(this,Nl)&&(F(this,Nl).clear(),U(this,Nl,null)),U(this,hl,0))}}Nl=new WeakMap,SC=new WeakMap,gA=new WeakMap,Mg=new WeakMap,LF=new WeakMap,hl=new WeakMap,E=new WeakSet,Ug=function(){return F(this,Nl)||U(this,Nl,new Map)},Jd=function(){return F(this,LF)||U(this,LF,new Map)},Md=function(){if(!F(this,SC)){const g=F(this,Mg).createElement("div"),{style:C}=g;C.visibility="hidden",C.contain="strict",C.width=C.height=0,C.position="absolute",C.top=C.left=0,C.zIndex=-1;const A=F(this,Mg).createElementNS(PC,"svg");A.setAttribute("width",0),A.setAttribute("height",0),U(this,SC,F(this,Mg).createElementNS(PC,"defs")),g.append(A),A.append(F(this,SC)),F(this,Mg).body.append(g)}return F(this,SC)},ii=function(g){if(g.length===1){const c=g[0],G=new Array(256);for(let V=0;V<256;V++)G[V]=c[V]/255;const W=G.join(",");return[W,W,W]}const[C,A,l]=g,Z=new Array(256),B=new Array(256),i=new Array(256);for(let c=0;c<256;c++)Z[c]=C[c]/255,B[c]=A[c]/255,i[c]=l[c]/255;return[Z.join(","),B.join(","),i.join(",")]},_V=function(g){const C=F(this,Mg).createElementNS(PC,"feColorMatrix");C.setAttribute("type","matrix"),C.setAttribute("values","0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"),g.append(C)},qc=function(g){const C=F(this,Mg).createElementNS(PC,"feColorMatrix");C.setAttribute("type","matrix"),C.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),g.append(C)},Dd=function(g){const C=F(this,Mg).createElementNS(PC,"filter");return C.setAttribute("color-interpolation-filters","sRGB"),C.setAttribute("id",g),F(this,E,Md).append(C),C},kB=function(g,C,A){const l=F(this,Mg).createElementNS(PC,C);l.setAttribute("type","discrete"),l.setAttribute("tableValues",A),g.append(l)},KB=function(g,C,A,l){const Z=F(this,Mg).createElementNS(PC,"feComponentTransfer");l.append(Z),b(this,E,kB).call(this,Z,"feFuncR",g),b(this,E,kB).call(this,Z,"feFuncG",C),b(this,E,kB).call(this,Z,"feFuncB",A)},_c=function(g,C){const A=F(this,Mg).createElementNS(PC,"feComponentTransfer");C.append(A),b(this,E,kB).call(this,A,"feFuncA",g)},TB=function(g){return F(this,E,Md).style.color=g,Wc(getComputedStyle(F(this,E,Md)).getPropertyValue("color"))};class lb extends oF{constructor({ownerDocument:I=globalThis.document,enableHWA:g=!1}={}){super({enableHWA:g}),this._document=I}_createCanvas(I,g){const C=this._document.createElement("canvas");return C.width=I,C.height=g,C}}async function wF(d,I="text"){if(Pd(d,document.baseURI)){const g=await fetch(d);if(!g.ok)throw new Error(g.statusText);switch(I){case"arraybuffer":return g.arrayBuffer();case"blob":return g.blob();case"json":return g.json()}return g.text()}return new Promise((g,C)=>{const A=new XMLHttpRequest;A.open("GET",d,!0),A.responseType=I,A.onreadystatechange=()=>{if(A.readyState===XMLHttpRequest.DONE){if(A.status===200||A.status===0){switch(I){case"arraybuffer":case"blob":case"json":g(A.response);return}g(A.responseText);return}C(new Error(A.statusText))}},A.send(null)})}class HW extends aF{_fetchData(I,g){return wF(I,this.isCompressed?"arraybuffer":"text").then(C=>({cMapData:C instanceof ArrayBuffer?new Uint8Array(C):NF(C),compressionType:g}))}}class eW extends YF{_fetchData(I){return wF(I,"arraybuffer").then(g=>new Uint8Array(g))}}class Fc extends Bc{_createSVG(I){return document.createElementNS(PC,I)}}class vd{constructor({viewBox:I,scale:g,rotation:C,offsetX:A=0,offsetY:l=0,dontFlip:Z=!1}){this.viewBox=I,this.scale=g,this.rotation=C,this.offsetX=A,this.offsetY=l;const B=(I[2]+I[0])/2,i=(I[3]+I[1])/2;let c,G,W,V;switch(C%=360,C<0&&(C+=360),C){case 180:c=-1,G=0,W=0,V=1;break;case 90:c=0,G=1,W=1,V=0;break;case 270:c=0,G=-1,W=-1,V=0;break;case 0:c=1,G=0,W=0,V=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}Z&&(W=-W,V=-V);let R,s,Q,h;c===0?(R=Math.abs(i-I[1])*g+A,s=Math.abs(B-I[0])*g+l,Q=(I[3]-I[1])*g,h=(I[2]-I[0])*g):(R=Math.abs(B-I[0])*g+A,s=Math.abs(i-I[1])*g+l,Q=(I[2]-I[0])*g,h=(I[3]-I[1])*g),this.transform=[c*g,G*g,W*g,V*g,R-c*g*B-W*g*i,s-G*g*B-V*g*i],this.width=Q,this.height=h}get rawDims(){const{viewBox:I}=this;return bI(this,"rawDims",{pageWidth:I[2]-I[0],pageHeight:I[3]-I[1],pageX:I[0],pageY:I[1]})}clone({scale:I=this.scale,rotation:g=this.rotation,offsetX:C=this.offsetX,offsetY:A=this.offsetY,dontFlip:l=!1}={}){return new vd({viewBox:this.viewBox.slice(),scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}convertToViewportPoint(I,g){return x.applyTransform([I,g],this.transform)}convertToViewportRectangle(I){const g=x.applyTransform([I[0],I[1]],this.transform),C=x.applyTransform([I[2],I[3]],this.transform);return[g[0],g[1],C[0],C[1]]}convertToPdfPoint(I,g){return x.applyInverseTransform([I,g],this.transform)}}class ic extends eA{constructor(I,g=0){super(I,"RenderingCancelledException"),this.extraDelay=g}}function cc(d){const I=d.length;let g=0;for(;g<I&&d[g].trim()==="";)g++;return d.substring(g,g+5).toLowerCase()==="data:"}function Gc(d){return typeof d=="string"&&/\.pdf$/i.test(d)}function Zb(d){return[d]=d.split(/[#?]/,1),d.substring(d.lastIndexOf("/")+1)}function db(d,I="document.pdf"){if(typeof d!="string")return I;if(cc(d))return iI('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),I;const g=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,C=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,A=g.exec(d);let l=C.exec(A[1])||C.exec(A[2])||C.exec(A[3]);if(l&&(l=l[0],l.includes("%")))try{l=C.exec(decodeURIComponent(l))[0]}catch{}return l||I}class uW{constructor(){dI(this,"started",Object.create(null));dI(this,"times",[])}time(I){I in this.started&&iI(`Timer is already running for ${I}`),this.started[I]=Date.now()}timeEnd(I){I in this.started||iI(`Timer has not been started for ${I}`),this.times.push({name:I,start:this.started[I],end:Date.now()}),delete this.started[I]}toString(){const I=[];let g=0;for(const{name:C}of this.times)g=Math.max(C.length,g);for(const{name:C,start:A,end:l}of this.times)I.push(`${C.padEnd(g)} ${l-A}ms
`);return I.join("")}}function Pd(d,I){try{const{protocol:g}=I?new URL(d,I):new URL(d);return g==="http:"||g==="https:"}catch{return!1}}function ng(d){d.preventDefault()}function pW(d){console.log("Deprecated API usage: "+d)}let kW;class KW{static toDateObject(I){if(!I||typeof I!="string")return null;kW||(kW=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const g=kW.exec(I);if(!g)return null;const C=parseInt(g[1],10);let A=parseInt(g[2],10);A=A>=1&&A<=12?A-1:0;let l=parseInt(g[3],10);l=l>=1&&l<=31?l:1;let Z=parseInt(g[4],10);Z=Z>=0&&Z<=23?Z:0;let B=parseInt(g[5],10);B=B>=0&&B<=59?B:0;let i=parseInt(g[6],10);i=i>=0&&i<=59?i:0;const c=g[7]||"Z";let G=parseInt(g[8],10);G=G>=0&&G<=23?G:0;let W=parseInt(g[9],10)||0;return W=W>=0&&W<=59?W:0,c==="-"?(Z+=G,B+=W):c==="+"&&(Z-=G,B-=W),new Date(Date.UTC(C,A,l,Z,B,i))}}function Bb(d,{scale:I=1,rotation:g=0}){const{width:C,height:A}=d.attributes.style,l=[0,0,parseInt(C),parseInt(A)];return new vd({viewBox:l,scale:I,rotation:g})}function Wc(d){if(d.startsWith("#")){const I=parseInt(d.slice(1),16);return[(I&16711680)>>16,(I&65280)>>8,I&255]}return d.startsWith("rgb(")?d.slice(4,-1).split(",").map(I=>parseInt(I)):d.startsWith("rgba(")?d.slice(5,-1).split(",").map(I=>parseInt(I)).slice(0,3):(iI(`Not a valid color format: "${d}"`),[0,0,0])}function Fb(d){const I=document.createElement("span");I.style.visibility="hidden",document.body.append(I);for(const g of d.keys()){I.style.color=g;const C=window.getComputedStyle(I).color;d.set(g,Wc(C))}I.remove()}function yI(d){const{a:I,b:g,c:C,d:A,e:l,f:Z}=d.getTransform();return[I,g,C,A,l,Z]}function fC(d){const{a:I,b:g,c:C,d:A,e:l,f:Z}=d.getTransform().invertSelf();return[I,g,C,A,l,Z]}function Rl(d,I,g=!1,C=!0){if(I instanceof vd){const{pageWidth:A,pageHeight:l}=I.rawDims,{style:Z}=d,B=wg.isCSSRoundSupported,i=`var(--scale-factor) * ${A}px`,c=`var(--scale-factor) * ${l}px`,G=B?`round(${i}, 1px)`:`calc(${i})`,W=B?`round(${c}, 1px)`:`calc(${c})`;!g||I.rotation%180===0?(Z.width=G,Z.height=W):(Z.width=W,Z.height=G)}C&&d.setAttribute("data-main-rotation",I.rotation)}const jF=class jF{constructor(I){m(this,Qg);m(this,ol,null);m(this,al,null);m(this,ug);m(this,Yl,null);U(this,ug,I)}render(){const I=U(this,ol,document.createElement("div"));I.className="editToolbar",I.setAttribute("role","toolbar");const g=F(this,ug)._uiManager._signal;I.addEventListener("contextmenu",ng,{signal:g}),I.addEventListener("pointerdown",b(jF,EF,$V),{signal:g});const C=U(this,Yl,document.createElement("div"));C.className="buttons",I.append(C);const A=F(this,ug).toolbarPosition;if(A){const{style:l}=I,Z=F(this,ug)._uiManager.direction==="ltr"?1-A[0]:A[0];l.insetInlineEnd=`${100*Z}%`,l.top=`calc(${100*A[1]}% + var(--editor-toolbar-vert-offset))`}return b(this,Qg,CR).call(this),I}hide(){var I;F(this,ol).classList.add("hidden"),(I=F(this,al))==null||I.hideDropdown()}show(){F(this,ol).classList.remove("hidden")}addAltTextButton(I){b(this,Qg,ci).call(this,I),F(this,Yl).prepend(I,F(this,Qg,$c))}addColorPicker(I){U(this,al,I);const g=I.renderButton();b(this,Qg,ci).call(this,g),F(this,Yl).prepend(g,F(this,Qg,$c))}remove(){var I;F(this,ol).remove(),(I=F(this,al))==null||I.destroy(),U(this,al,null)}};ol=new WeakMap,al=new WeakMap,ug=new WeakMap,Yl=new WeakMap,EF=new WeakSet,$V=function(I){I.stopPropagation()},Qg=new WeakSet,IR=function(I){F(this,ug)._focusEventsAllowed=!1,I.preventDefault(),I.stopPropagation()},gR=function(I){F(this,ug)._focusEventsAllowed=!0,I.preventDefault(),I.stopPropagation()},ci=function(I){const g=F(this,ug)._uiManager._signal;I.addEventListener("focusin",b(this,Qg,IR).bind(this),{capture:!0,signal:g}),I.addEventListener("focusout",b(this,Qg,gR).bind(this),{capture:!0,signal:g}),I.addEventListener("contextmenu",ng,{signal:g})},CR=function(){const I=document.createElement("button");I.className="delete",I.tabIndex=0,I.setAttribute("data-l10n-id",`pdfjs-editor-remove-${F(this,ug).editorType}-button`),b(this,Qg,ci).call(this,I),I.addEventListener("click",g=>{F(this,ug)._uiManager.delete()},{signal:F(this,ug)._uiManager._signal}),F(this,Yl).append(I)},$c=function(){const I=document.createElement("div");return I.className="divider",I},m(jF,EF);let Vc=jF;class ib{constructor(I){m(this,kA);m(this,d0,null);m(this,wl,null);m(this,nl);U(this,nl,I)}show(I,g,C){const[A,l]=b(this,kA,lR).call(this,g,C),{style:Z}=F(this,wl)||U(this,wl,b(this,kA,AR).call(this));I.append(F(this,wl)),Z.insetInlineEnd=`${100*A}%`,Z.top=`calc(${100*l}% + var(--editor-toolbar-vert-offset))`}hide(){F(this,wl).remove()}}d0=new WeakMap,wl=new WeakMap,nl=new WeakMap,kA=new WeakSet,AR=function(){const I=U(this,wl,document.createElement("div"));I.className="editToolbar",I.setAttribute("role","toolbar"),I.addEventListener("contextmenu",ng,{signal:F(this,nl)._signal});const g=U(this,d0,document.createElement("div"));return g.className="buttons",I.append(g),b(this,kA,ZR).call(this),I},lR=function(I,g){let C=0,A=0;for(const l of I){const Z=l.y+l.height;if(Z<C)continue;const B=l.x+(g?l.width:0);if(Z>C){A=B,C=Z;continue}g?B>A&&(A=B):B<A&&(A=B)}return[g?1-A:A,C]},ZR=function(){const I=document.createElement("button");I.className="highlightButton",I.tabIndex=0,I.setAttribute("data-l10n-id","pdfjs-highlight-floating-button1");const g=document.createElement("span");I.append(g),g.className="visuallyHidden",g.setAttribute("data-l10n-id","pdfjs-highlight-floating-button-label");const C=F(this,nl)._signal;I.addEventListener("contextmenu",ng,{signal:C}),I.addEventListener("click",()=>{F(this,nl).highlightSelection("floating_button")},{signal:C}),F(this,d0).append(I)};function nF(d,I,g){for(const C of g)I.addEventListener(C,d[C].bind(d))}function cb(d){return Math.round(Math.min(255,Math.max(1,255*d))).toString(16).padStart(2,"0")}class Gb{constructor(){m(this,xF,0)}get id(){return`${EU}${rg(this,xF)._++}`}}xF=new WeakMap;const Ec=class Ec{constructor(){m(this,F0);m(this,B0,Cb());m(this,OF,0);m(this,qg,null)}static get _isSVGFittingCanvas(){const I='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',C=new OffscreenCanvas(1,3).getContext("2d",{willReadFrequently:!0}),A=new Image;A.src=I;const l=A.decode().then(()=>(C.drawImage(A,0,0,1,1,0,0,1,3),new Uint32Array(C.getImageData(0,0,1,1).data.buffer)[0]===0));return bI(this,"_isSVGFittingCanvas",l)}async getFromFile(I){const{lastModified:g,name:C,size:A,type:l}=I;return b(this,F0,IG).call(this,`${g}_${C}_${A}_${l}`,I)}async getFromUrl(I){return b(this,F0,IG).call(this,I,I)}async getFromId(I){F(this,qg)||U(this,qg,new Map);const g=F(this,qg).get(I);return g?g.bitmap?(g.refCounter+=1,g):g.file?this.getFromFile(g.file):this.getFromUrl(g.url):null}getSvgUrl(I){const g=F(this,qg).get(I);return g!=null&&g.isSvg?g.svgUrl:null}deleteId(I){F(this,qg)||U(this,qg,new Map);const g=F(this,qg).get(I);g&&(g.refCounter-=1,g.refCounter===0&&(g.bitmap=null))}isValidId(I){return I.startsWith(`image_${F(this,B0)}_`)}};B0=new WeakMap,OF=new WeakMap,qg=new WeakMap,F0=new WeakSet,IG=async function(I,g){F(this,qg)||U(this,qg,new Map);let C=F(this,qg).get(I);if(C===null)return null;if(C!=null&&C.bitmap)return C.refCounter+=1,C;try{C||(C={bitmap:null,id:`image_${F(this,B0)}_${rg(this,OF)._++}`,refCounter:0,isSvg:!1});let A;if(typeof g=="string"?(C.url=g,A=await wF(g,"blob")):A=C.file=g,A.type==="image/svg+xml"){const l=Ec._isSVGFittingCanvas,Z=new FileReader,B=new Image,i=new Promise((c,G)=>{B.onload=()=>{C.bitmap=B,C.isSvg=!0,c()},Z.onload=async()=>{const W=C.svgUrl=Z.result;B.src=await l?`${W}#svgView(preserveAspectRatio(none))`:W},B.onerror=Z.onerror=G});Z.readAsDataURL(A),await i}else C.bitmap=await createImageBitmap(A);C.refCounter=1}catch(A){console.error(A),C=null}return F(this,qg).set(I,C),C&&F(this,qg).set(C.id,C),C};let Rc=Ec;class Wb{constructor(I=128){m(this,_I,[]);m(this,KA,!1);m(this,i0);m(this,$I,-1);U(this,i0,I)}add({cmd:I,undo:g,post:C,mustExec:A,type:l=NaN,overwriteIfSameType:Z=!1,keepUndo:B=!1}){if(A&&I(),F(this,KA))return;const i={cmd:I,undo:g,post:C,type:l};if(F(this,$I)===-1){F(this,_I).length>0&&(F(this,_I).length=0),U(this,$I,0),F(this,_I).push(i);return}if(Z&&F(this,_I)[F(this,$I)].type===l){B&&(i.undo=F(this,_I)[F(this,$I)].undo),F(this,_I)[F(this,$I)]=i;return}const c=F(this,$I)+1;c===F(this,i0)?F(this,_I).splice(0,1):(U(this,$I,c),c<F(this,_I).length&&F(this,_I).splice(c)),F(this,_I).push(i)}undo(){if(F(this,$I)===-1)return;U(this,KA,!0);const{undo:I,post:g}=F(this,_I)[F(this,$I)];I(),g==null||g(),U(this,KA,!1),U(this,$I,F(this,$I)-1)}redo(){if(F(this,$I)<F(this,_I).length-1){U(this,$I,F(this,$I)+1),U(this,KA,!0);const{cmd:I,post:g}=F(this,_I)[F(this,$I)];I(),g==null||g(),U(this,KA,!1)}}hasSomethingToUndo(){return F(this,$I)!==-1}hasSomethingToRedo(){return F(this,$I)<F(this,_I).length-1}destroy(){U(this,_I,null)}}_I=new WeakMap,KA=new WeakMap,i0=new WeakMap,$I=new WeakMap;class fd{constructor(I){m(this,rF);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:g}=wg.platform;for(const[C,A,l={}]of I)for(const Z of C){const B=Z.startsWith("mac+");g&&B?(this.callbacks.set(Z.slice(4),{callback:A,options:l}),this.allKeys.add(Z.split("+").at(-1))):!g&&!B&&(this.callbacks.set(Z,{callback:A,options:l}),this.allKeys.add(Z.split("+").at(-1)))}}exec(I,g){if(!this.allKeys.has(g.key))return;const C=this.callbacks.get(b(this,rF,dR).call(this,g));if(!C)return;const{callback:A,options:{bubbles:l=!1,args:Z=[],checker:B=null}}=C;B&&!B(I,g)||(A.bind(I,...Z,g)(),l||(g.stopPropagation(),g.preventDefault()))}}rF=new WeakSet,dR=function(I){I.altKey&&this.buffer.push("alt"),I.ctrlKey&&this.buffer.push("ctrl"),I.metaKey&&this.buffer.push("meta"),I.shiftKey&&this.buffer.push("shift"),this.buffer.push(I.key);const g=this.buffer.join("+");return this.buffer.length=0,g};const vF=class vF{get _colors(){const I=new Map([["CanvasText",null],["Canvas",null]]);return Fb(I),bI(this,"_colors",I)}convert(I){const g=Wc(I);if(!window.matchMedia("(forced-colors: active)").matches)return g;for(const[C,A]of this._colors)if(A.every((l,Z)=>l===g[Z]))return vF._colorsMapping.get(C);return g}getHexCode(I){const g=this._colors.get(I);return g?x.makeHexColor(...g):I}};dI(vF,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let sc=vF;const kZ=class kZ{constructor(I,g,C,A,l,Z,B,i,c){m(this,K);m(this,tZ,new AbortController);m(this,pg,null);m(this,rI,new Map);m(this,gg,new Map);m(this,yZ,null);m(this,CA,null);m(this,HZ,null);m(this,FC,new Wb);m(this,eZ,0);m(this,Sl,new Set);m(this,JC,null);m(this,iC,null);m(this,Jl,new Set);m(this,c0,!1);m(this,G0,null);m(this,MC,null);m(this,uZ,null);m(this,TA,!1);m(this,DC,null);m(this,PF,new Gb);m(this,zA,!1);m(this,W0,!1);m(this,Ml,null);m(this,V0,null);m(this,pZ,null);m(this,Cg,sI.NONE);m(this,oI,new Set);m(this,AA,null);m(this,Dl,null);m(this,R0,null);m(this,s0,this.blur.bind(this));m(this,U0,this.focus.bind(this));m(this,b0,this.copy.bind(this));m(this,m0,this.cut.bind(this));m(this,Q0,this.paste.bind(this));m(this,N0,this.keydown.bind(this));m(this,h0,this.keyup.bind(this));m(this,o0,this.onEditingAction.bind(this));m(this,a0,this.onPageChanging.bind(this));m(this,Y0,this.onScaleChanging.bind(this));m(this,w0,this.onRotationChanging.bind(this));m(this,n0,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1,hasSelectedText:!1});m(this,LA,[0,0]);m(this,XC,null);m(this,lA,null);m(this,S0,null);this._signal=F(this,tZ).signal,U(this,lA,I),U(this,S0,g),U(this,yZ,C),this._eventBus=A,this._eventBus._on("editingaction",F(this,o0)),this._eventBus._on("pagechanging",F(this,a0)),this._eventBus._on("scalechanging",F(this,Y0)),this._eventBus._on("rotationchanging",F(this,w0)),b(this,K,iR).call(this),b(this,K,VR).call(this),b(this,K,gG).call(this),U(this,CA,l.annotationStorage),U(this,G0,l.filterFactory),U(this,Dl,Z),U(this,uZ,B||null),U(this,c0,i),U(this,pZ,c||null),this.viewParameters={realScale:uA.PDF_TO_CSS_UNITS,rotation:0},this.isShiftKeyDown=!1}static get _keyboardManager(){const I=kZ.prototype,g=Z=>F(Z,lA).contains(document.activeElement)&&document.activeElement.tagName!=="BUTTON"&&Z.hasSomethingToControl(),C=(Z,{target:B})=>{if(B instanceof HTMLInputElement){const{type:i}=B;return i!=="text"&&i!=="number"}return!0},A=this.TRANSLATE_SMALL,l=this.TRANSLATE_BIG;return bI(this,"_keyboardManager",new fd([[["ctrl+a","mac+meta+a"],I.selectAll,{checker:C}],[["ctrl+z","mac+meta+z"],I.undo,{checker:C}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],I.redo,{checker:C}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],I.delete,{checker:C}],[["Enter","mac+Enter"],I.addNewEditorFromKeyboard,{checker:(Z,{target:B})=>!(B instanceof HTMLButtonElement)&&F(Z,lA).contains(B)&&!Z.isEnterHandled}],[[" ","mac+ "],I.addNewEditorFromKeyboard,{checker:(Z,{target:B})=>!(B instanceof HTMLButtonElement)&&F(Z,lA).contains(document.activeElement)}],[["Escape","mac+Escape"],I.unselectAll],[["ArrowLeft","mac+ArrowLeft"],I.translateSelectedEditors,{args:[-A,0],checker:g}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],I.translateSelectedEditors,{args:[-l,0],checker:g}],[["ArrowRight","mac+ArrowRight"],I.translateSelectedEditors,{args:[A,0],checker:g}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],I.translateSelectedEditors,{args:[l,0],checker:g}],[["ArrowUp","mac+ArrowUp"],I.translateSelectedEditors,{args:[0,-A],checker:g}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],I.translateSelectedEditors,{args:[0,-l],checker:g}],[["ArrowDown","mac+ArrowDown"],I.translateSelectedEditors,{args:[0,A],checker:g}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],I.translateSelectedEditors,{args:[0,l],checker:g}]]))}destroy(){var I,g,C;(I=F(this,tZ))==null||I.abort(),U(this,tZ,null),this._signal=null,this._eventBus._off("editingaction",F(this,o0)),this._eventBus._off("pagechanging",F(this,a0)),this._eventBus._off("scalechanging",F(this,Y0)),this._eventBus._off("rotationchanging",F(this,w0));for(const A of F(this,gg).values())A.destroy();F(this,gg).clear(),F(this,rI).clear(),F(this,Jl).clear(),U(this,pg,null),F(this,oI).clear(),F(this,FC).destroy(),(g=F(this,yZ))==null||g.destroy(),(C=F(this,DC))==null||C.hide(),U(this,DC,null),F(this,MC)&&(clearTimeout(F(this,MC)),U(this,MC,null)),F(this,XC)&&(clearTimeout(F(this,XC)),U(this,XC,null))}async mlGuess(I){var g;return((g=F(this,pZ))==null?void 0:g.guess(I))||null}get hasMLManager(){return!!F(this,pZ)}get hcmFilter(){return bI(this,"hcmFilter",F(this,Dl)?F(this,G0).addHCMFilter(F(this,Dl).foreground,F(this,Dl).background):"none")}get direction(){return bI(this,"direction",getComputedStyle(F(this,lA)).direction)}get highlightColors(){return bI(this,"highlightColors",F(this,uZ)?new Map(F(this,uZ).split(",").map(I=>I.split("=").map(g=>g.trim()))):null)}get highlightColorNames(){return bI(this,"highlightColorNames",this.highlightColors?new Map(Array.from(this.highlightColors,I=>I.reverse())):null)}setMainHighlightColorPicker(I){U(this,V0,I)}editAltText(I){var g;(g=F(this,yZ))==null||g.editAltText(this,I)}onPageChanging({pageNumber:I}){U(this,eZ,I-1)}focusMainContainer(){F(this,lA).focus()}findParent(I,g){for(const C of F(this,gg).values()){const{x:A,y:l,width:Z,height:B}=C.div.getBoundingClientRect();if(I>=A&&I<=A+Z&&g>=l&&g<=l+B)return C}return null}disableUserSelect(I=!1){F(this,S0).classList.toggle("noUserSelect",I)}addShouldRescale(I){F(this,Jl).add(I)}removeShouldRescale(I){F(this,Jl).delete(I)}onScaleChanging({scale:I}){this.commitOrRemove(),this.viewParameters.realScale=I*uA.PDF_TO_CSS_UNITS;for(const g of F(this,Jl))g.onScaleChanging()}onRotationChanging({pagesRotation:I}){this.commitOrRemove(),this.viewParameters.rotation=I}highlightSelection(I=""){const g=document.getSelection();if(!g||g.isCollapsed)return;const{anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z}=g,B=g.toString(),c=b(this,K,Gi).call(this,g).closest(".textLayer"),G=this.getSelectionBoxes(c);if(G){g.empty(),F(this,Cg)===sI.NONE&&(this._eventBus.dispatch("showannotationeditorui",{source:this,mode:sI.HIGHLIGHT}),this.showAllEditors("highlight",!0,!0));for(const W of F(this,gg).values())if(W.hasTextLayer(c)){W.createAndAddNewEditor({x:0,y:0},!1,{methodOfCreation:I,boxes:G,anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z,text:B});break}}}addToAnnotationStorage(I){!I.isEmpty()&&F(this,CA)&&!F(this,CA).has(I.id)&&F(this,CA).setValue(I.id,I)}blur(){if(this.isShiftKeyDown=!1,F(this,TA)&&(U(this,TA,!1),b(this,K,Wi).call(this,"main_toolbar")),!this.hasSelection)return;const{activeElement:I}=document;for(const g of F(this,oI))if(g.div.contains(I)){U(this,Ml,[g,I]),g._focusEventsAllowed=!1;break}}focus(){if(!F(this,Ml))return;const[I,g]=F(this,Ml);U(this,Ml,null),g.addEventListener("focusin",()=>{I._focusEventsAllowed=!0},{once:!0,signal:this._signal}),g.focus()}addEditListeners(){b(this,K,gG).call(this),b(this,K,CG).call(this)}removeEditListeners(){b(this,K,WR).call(this),b(this,K,AG).call(this)}dragOver(I){for(const{type:g}of I.dataTransfer.items)for(const C of F(this,iC))if(C.isHandlingMimeForPasting(g)){I.dataTransfer.dropEffect="copy",I.preventDefault();return}}drop(I){for(const g of I.dataTransfer.items)for(const C of F(this,iC))if(C.isHandlingMimeForPasting(g.type)){C.paste(g,this.currentLayer),I.preventDefault();return}}copy(I){var C;if(I.preventDefault(),(C=F(this,pg))==null||C.commitOrRemove(),!this.hasSelection)return;const g=[];for(const A of F(this,oI)){const l=A.serialize(!0);l&&g.push(l)}g.length!==0&&I.clipboardData.setData("application/pdfjs",JSON.stringify(g))}cut(I){this.copy(I),this.delete()}paste(I){I.preventDefault();const{clipboardData:g}=I;for(const l of g.items)for(const Z of F(this,iC))if(Z.isHandlingMimeForPasting(l.type)){Z.paste(l,this.currentLayer);return}let C=g.getData("application/pdfjs");if(!C)return;try{C=JSON.parse(C)}catch(l){iI(`paste: "${l.message}".`);return}if(!Array.isArray(C))return;this.unselectAll();const A=this.currentLayer;try{const l=[];for(const i of C){const c=A.deserialize(i);if(!c)return;l.push(c)}const Z=()=>{for(const i of l)b(this,K,lG).call(this,i);b(this,K,ZG).call(this,l)},B=()=>{for(const i of l)i.remove()};this.addCommands({cmd:Z,undo:B,mustExec:!0})}catch(l){iI(`paste: "${l.message}".`)}}keydown(I){!this.isShiftKeyDown&&I.key==="Shift"&&(this.isShiftKeyDown=!0),F(this,Cg)!==sI.NONE&&!this.isEditorHandlingKeyboard&&kZ._keyboardManager.exec(this,I)}keyup(I){this.isShiftKeyDown&&I.key==="Shift"&&(this.isShiftKeyDown=!1,F(this,TA)&&(U(this,TA,!1),b(this,K,Wi).call(this,"main_toolbar")))}onEditingAction({name:I}){switch(I){case"undo":case"redo":case"delete":case"selectAll":this[I]();break;case"highlightSelection":this.highlightSelection("context_menu");break}}setEditingState(I){I?(b(this,K,cR).call(this),b(this,K,CG).call(this),b(this,K,ag).call(this,{isEditing:F(this,Cg)!==sI.NONE,isEmpty:b(this,K,zB).call(this),hasSomethingToUndo:F(this,FC).hasSomethingToUndo(),hasSomethingToRedo:F(this,FC).hasSomethingToRedo(),hasSelectedEditor:!1})):(b(this,K,GR).call(this),b(this,K,AG).call(this),b(this,K,ag).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(I){if(!F(this,iC)){U(this,iC,I);for(const g of F(this,iC))b(this,K,Bl).call(this,g.defaultPropertiesToUpdate)}}getId(){return F(this,PF).id}get currentLayer(){return F(this,gg).get(F(this,eZ))}getLayer(I){return F(this,gg).get(I)}get currentPageIndex(){return F(this,eZ)}addLayer(I){F(this,gg).set(I.pageIndex,I),F(this,zA)?I.enable():I.disable()}removeLayer(I){F(this,gg).delete(I.pageIndex)}updateMode(I,g=null,C=!1){if(F(this,Cg)!==I){if(U(this,Cg,I),I===sI.NONE){this.setEditingState(!1),b(this,K,sR).call(this);return}this.setEditingState(!0),b(this,K,RR).call(this),this.unselectAll();for(const A of F(this,gg).values())A.updateMode(I);if(!g&&C){this.addNewEditorFromKeyboard();return}if(g){for(const A of F(this,rI).values())if(A.annotationElementId===g){this.setSelected(A),A.enterInEditMode();break}}}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(I){I!==F(this,Cg)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:I})}updateParams(I,g){var C;if(F(this,iC)){switch(I){case gI.CREATE:this.currentLayer.addNewEditor();return;case gI.HIGHLIGHT_DEFAULT_COLOR:(C=F(this,V0))==null||C.updateColor(g);break;case gI.HIGHLIGHT_SHOW_ALL:this._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:{type:"highlight",action:"toggle_visibility"}}}),(F(this,R0)||U(this,R0,new Map)).set(I,g),this.showAllEditors("highlight",g);break}for(const A of F(this,oI))A.updateParams(I,g);for(const A of F(this,iC))A.updateDefaultParams(I,g)}}showAllEditors(I,g,C=!1){var l;for(const Z of F(this,rI).values())Z.editorType===I&&Z.show(g);(((l=F(this,R0))==null?void 0:l.get(gI.HIGHLIGHT_SHOW_ALL))??!0)!==g&&b(this,K,Bl).call(this,[[gI.HIGHLIGHT_SHOW_ALL,g]])}enableWaiting(I=!1){if(F(this,W0)!==I){U(this,W0,I);for(const g of F(this,gg).values())I?g.disableClick():g.enableClick(),g.div.classList.toggle("waiting",I)}}getEditors(I){const g=[];for(const C of F(this,rI).values())C.pageIndex===I&&g.push(C);return g}getEditor(I){return F(this,rI).get(I)}addEditor(I){F(this,rI).set(I.id,I)}removeEditor(I){var g;I.div.contains(document.activeElement)&&(F(this,MC)&&clearTimeout(F(this,MC)),U(this,MC,setTimeout(()=>{this.focusMainContainer(),U(this,MC,null)},0))),F(this,rI).delete(I.id),this.unselect(I),(!I.annotationElementId||!F(this,Sl).has(I.annotationElementId))&&((g=F(this,CA))==null||g.remove(I.id))}addDeletedAnnotationElement(I){F(this,Sl).add(I.annotationElementId),this.addChangedExistingAnnotation(I),I.deleted=!0}isDeletedAnnotationElement(I){return F(this,Sl).has(I)}removeDeletedAnnotationElement(I){F(this,Sl).delete(I.annotationElementId),this.removeChangedExistingAnnotation(I),I.deleted=!1}setActiveEditor(I){F(this,pg)!==I&&(U(this,pg,I),I&&b(this,K,Bl).call(this,I.propertiesToUpdate))}updateUI(I){F(this,K,UR)===I&&b(this,K,Bl).call(this,I.propertiesToUpdate)}toggleSelected(I){if(F(this,oI).has(I)){F(this,oI).delete(I),I.unselect(),b(this,K,ag).call(this,{hasSelectedEditor:this.hasSelection});return}F(this,oI).add(I),I.select(),b(this,K,Bl).call(this,I.propertiesToUpdate),b(this,K,ag).call(this,{hasSelectedEditor:!0})}setSelected(I){for(const g of F(this,oI))g!==I&&g.unselect();F(this,oI).clear(),F(this,oI).add(I),I.select(),b(this,K,Bl).call(this,I.propertiesToUpdate),b(this,K,ag).call(this,{hasSelectedEditor:!0})}isSelected(I){return F(this,oI).has(I)}get firstSelectedEditor(){return F(this,oI).values().next().value}unselect(I){I.unselect(),F(this,oI).delete(I),b(this,K,ag).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return F(this,oI).size!==0}get isEnterHandled(){return F(this,oI).size===1&&this.firstSelectedEditor.isEnterHandled}undo(){F(this,FC).undo(),b(this,K,ag).call(this,{hasSomethingToUndo:F(this,FC).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:b(this,K,zB).call(this)})}redo(){F(this,FC).redo(),b(this,K,ag).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:F(this,FC).hasSomethingToRedo(),isEmpty:b(this,K,zB).call(this)})}addCommands(I){F(this,FC).add(I),b(this,K,ag).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:b(this,K,zB).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const I=[...F(this,oI)],g=()=>{for(const A of I)A.remove()},C=()=>{for(const A of I)b(this,K,lG).call(this,A)};this.addCommands({cmd:g,undo:C,mustExec:!0})}commitOrRemove(){var I;(I=F(this,pg))==null||I.commitOrRemove()}hasSomethingToControl(){return F(this,pg)||this.hasSelection}selectAll(){for(const I of F(this,oI))I.commit();b(this,K,ZG).call(this,F(this,rI).values())}unselectAll(){if(!(F(this,pg)&&(F(this,pg).commitOrRemove(),F(this,Cg)!==sI.NONE))&&this.hasSelection){for(const I of F(this,oI))I.unselect();F(this,oI).clear(),b(this,K,ag).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(I,g,C=!1){if(C||this.commitOrRemove(),!this.hasSelection)return;F(this,LA)[0]+=I,F(this,LA)[1]+=g;const[A,l]=F(this,LA),Z=[...F(this,oI)],B=1e3;F(this,XC)&&clearTimeout(F(this,XC)),U(this,XC,setTimeout(()=>{U(this,XC,null),F(this,LA)[0]=F(this,LA)[1]=0,this.addCommands({cmd:()=>{for(const i of Z)F(this,rI).has(i.id)&&i.translateInPage(A,l)},undo:()=>{for(const i of Z)F(this,rI).has(i.id)&&i.translateInPage(-A,-l)},mustExec:!1})},B));for(const i of Z)i.translateInPage(I,g)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),U(this,JC,new Map);for(const I of F(this,oI))F(this,JC).set(I,{savedX:I.x,savedY:I.y,savedPageIndex:I.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!F(this,JC))return!1;this.disableUserSelect(!1);const I=F(this,JC);U(this,JC,null);let g=!1;for(const[{x:A,y:l,pageIndex:Z},B]of I)B.newX=A,B.newY=l,B.newPageIndex=Z,g||(g=A!==B.savedX||l!==B.savedY||Z!==B.savedPageIndex);if(!g)return!1;const C=(A,l,Z,B)=>{if(F(this,rI).has(A.id)){const i=F(this,gg).get(B);i?A._setParentAndPosition(i,l,Z):(A.pageIndex=B,A.x=l,A.y=Z)}};return this.addCommands({cmd:()=>{for(const[A,{newX:l,newY:Z,newPageIndex:B}]of I)C(A,l,Z,B)},undo:()=>{for(const[A,{savedX:l,savedY:Z,savedPageIndex:B}]of I)C(A,l,Z,B)},mustExec:!0}),!0}dragSelectedEditors(I,g){if(F(this,JC))for(const C of F(this,JC).keys())C.drag(I,g)}rebuild(I){if(I.parent===null){const g=this.getLayer(I.pageIndex);g?(g.changeParent(I),g.addOrRebuild(I)):(this.addEditor(I),this.addToAnnotationStorage(I),I.rebuild())}else I.parent.addOrRebuild(I)}get isEditorHandlingKeyboard(){var I;return((I=this.getActive())==null?void 0:I.shouldGetKeyboardEvents())||F(this,oI).size===1&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(I){return F(this,pg)===I}getActive(){return F(this,pg)}getMode(){return F(this,Cg)}get imageManager(){return bI(this,"imageManager",new Rc)}getSelectionBoxes(I){if(!I)return null;const g=document.getSelection();for(let c=0,G=g.rangeCount;c<G;c++)if(!I.contains(g.getRangeAt(c).commonAncestorContainer))return null;const{x:C,y:A,width:l,height:Z}=I.getBoundingClientRect();let B;switch(I.getAttribute("data-main-rotation")){case"90":B=(c,G,W,V)=>({x:(G-A)/Z,y:1-(c+W-C)/l,width:V/Z,height:W/l});break;case"180":B=(c,G,W,V)=>({x:1-(c+W-C)/l,y:1-(G+V-A)/Z,width:W/l,height:V/Z});break;case"270":B=(c,G,W,V)=>({x:1-(G+V-A)/Z,y:(c-C)/l,width:V/Z,height:W/l});break;default:B=(c,G,W,V)=>({x:(c-C)/l,y:(G-A)/Z,width:W/l,height:V/Z});break}const i=[];for(let c=0,G=g.rangeCount;c<G;c++){const W=g.getRangeAt(c);if(!W.collapsed)for(const{x:V,y:R,width:s,height:Q}of W.getClientRects())s===0||Q===0||i.push(B(V,R,s,Q))}return i.length===0?null:i}addChangedExistingAnnotation({annotationElementId:I,id:g}){(F(this,HZ)||U(this,HZ,new Map)).set(I,g)}removeChangedExistingAnnotation({annotationElementId:I}){var g;(g=F(this,HZ))==null||g.delete(I)}renderAnnotationElement(I){var A;const g=(A=F(this,HZ))==null?void 0:A.get(I.data.id);if(!g)return;const C=F(this,CA).getRawValue(g);C&&(F(this,Cg)===sI.NONE&&!C.hasBeenModified||C.renderAnnotationElement(I))}};tZ=new WeakMap,pg=new WeakMap,rI=new WeakMap,gg=new WeakMap,yZ=new WeakMap,CA=new WeakMap,HZ=new WeakMap,FC=new WeakMap,eZ=new WeakMap,Sl=new WeakMap,JC=new WeakMap,iC=new WeakMap,Jl=new WeakMap,c0=new WeakMap,G0=new WeakMap,MC=new WeakMap,uZ=new WeakMap,TA=new WeakMap,DC=new WeakMap,PF=new WeakMap,zA=new WeakMap,W0=new WeakMap,Ml=new WeakMap,V0=new WeakMap,pZ=new WeakMap,Cg=new WeakMap,oI=new WeakMap,AA=new WeakMap,Dl=new WeakMap,R0=new WeakMap,s0=new WeakMap,U0=new WeakMap,b0=new WeakMap,m0=new WeakMap,Q0=new WeakMap,N0=new WeakMap,h0=new WeakMap,o0=new WeakMap,a0=new WeakMap,Y0=new WeakMap,w0=new WeakMap,n0=new WeakMap,LA=new WeakMap,XC=new WeakMap,lA=new WeakMap,S0=new WeakMap,K=new WeakSet,Gi=function({anchorNode:I}){return I.nodeType===Node.TEXT_NODE?I.parentElement:I},BR=function(){const I=document.getSelection();if(!I||I.isCollapsed)return;const C=b(this,K,Gi).call(this,I).closest(".textLayer"),A=this.getSelectionBoxes(C);A&&(F(this,DC)||U(this,DC,new ib(this)),F(this,DC).show(C,A,this.direction==="ltr"))},FR=function(){var l,Z,B;const I=document.getSelection();if(!I||I.isCollapsed){F(this,AA)&&((l=F(this,DC))==null||l.hide(),U(this,AA,null),b(this,K,ag).call(this,{hasSelectedText:!1}));return}const{anchorNode:g}=I;if(g===F(this,AA))return;if(!b(this,K,Gi).call(this,I).closest(".textLayer")){F(this,AA)&&((Z=F(this,DC))==null||Z.hide(),U(this,AA,null),b(this,K,ag).call(this,{hasSelectedText:!1}));return}if((B=F(this,DC))==null||B.hide(),U(this,AA,g),b(this,K,ag).call(this,{hasSelectedText:!0}),!(F(this,Cg)!==sI.HIGHLIGHT&&F(this,Cg)!==sI.NONE)&&(F(this,Cg)===sI.HIGHLIGHT&&this.showAllEditors("highlight",!0,!0),U(this,TA,this.isShiftKeyDown),!this.isShiftKeyDown)){const i=this._signal,c=G=>{G.type==="pointerup"&&G.button!==0||(window.removeEventListener("pointerup",c),window.removeEventListener("blur",c),G.type==="pointerup"&&b(this,K,Wi).call(this,"main_toolbar"))};window.addEventListener("pointerup",c,{signal:i}),window.addEventListener("blur",c,{signal:i})}},Wi=function(I=""){F(this,Cg)===sI.HIGHLIGHT?this.highlightSelection(I):F(this,c0)&&b(this,K,BR).call(this)},iR=function(){document.addEventListener("selectionchange",b(this,K,FR).bind(this),{signal:this._signal})},cR=function(){const I=this._signal;window.addEventListener("focus",F(this,U0),{signal:I}),window.addEventListener("blur",F(this,s0),{signal:I})},GR=function(){window.removeEventListener("focus",F(this,U0)),window.removeEventListener("blur",F(this,s0))},gG=function(){const I=this._signal;window.addEventListener("keydown",F(this,N0),{signal:I}),window.addEventListener("keyup",F(this,h0),{signal:I})},WR=function(){window.removeEventListener("keydown",F(this,N0)),window.removeEventListener("keyup",F(this,h0))},CG=function(){const I=this._signal;document.addEventListener("copy",F(this,b0),{signal:I}),document.addEventListener("cut",F(this,m0),{signal:I}),document.addEventListener("paste",F(this,Q0),{signal:I})},AG=function(){document.removeEventListener("copy",F(this,b0)),document.removeEventListener("cut",F(this,m0)),document.removeEventListener("paste",F(this,Q0))},VR=function(){const I=this._signal;document.addEventListener("dragover",this.dragOver.bind(this),{signal:I}),document.addEventListener("drop",this.drop.bind(this),{signal:I})},ag=function(I){Object.entries(I).some(([C,A])=>F(this,n0)[C]!==A)&&(this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(F(this,n0),I)}),F(this,Cg)===sI.HIGHLIGHT&&I.hasSelectedEditor===!1&&b(this,K,Bl).call(this,[[gI.HIGHLIGHT_FREE,!0]]))},Bl=function(I){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:I})},RR=function(){if(!F(this,zA)){U(this,zA,!0);for(const I of F(this,gg).values())I.enable();for(const I of F(this,rI).values())I.enable()}},sR=function(){if(this.unselectAll(),F(this,zA)){U(this,zA,!1);for(const I of F(this,gg).values())I.disable();for(const I of F(this,rI).values())I.disable()}},lG=function(I){const g=F(this,gg).get(I.pageIndex);g?g.addOrRebuild(I):(this.addEditor(I),this.addToAnnotationStorage(I))},UR=function(){let I=null;for(I of F(this,oI));return I},zB=function(){if(F(this,rI).size===0)return!0;if(F(this,rI).size===1)for(const I of F(this,rI).values())return I.isEmpty();return!1},ZG=function(I){for(const g of F(this,oI))g.unselect();F(this,oI).clear();for(const g of I)g.isEmpty()||(F(this,oI).add(g),g.select());b(this,K,ag).call(this,{hasSelectedEditor:this.hasSelection})},dI(kZ,"TRANSLATE_SMALL",1),dI(kZ,"TRANSLATE_BIG",10);let sl=kZ;const FA=class FA{constructor(I){m(this,J0);m(this,ZA,"");m(this,dA,!1);m(this,cC,null);m(this,BA,null);m(this,kg,null);m(this,KZ,!1);m(this,GC,null);U(this,GC,I)}static initialize(I){FA._l10nPromise||(FA._l10nPromise=I)}async render(){const I=U(this,cC,document.createElement("button"));I.className="altText";const g=await FA._l10nPromise.get("pdfjs-editor-alt-text-button-label");I.textContent=g,I.setAttribute("aria-label",g),I.tabIndex="0";const C=F(this,GC)._uiManager._signal;I.addEventListener("contextmenu",ng,{signal:C}),I.addEventListener("pointerdown",l=>l.stopPropagation(),{signal:C});const A=l=>{l.preventDefault(),F(this,GC)._uiManager.editAltText(F(this,GC))};return I.addEventListener("click",A,{capture:!0,signal:C}),I.addEventListener("keydown",l=>{l.target===I&&l.key==="Enter"&&(U(this,KZ,!0),A(l))},{signal:C}),await b(this,J0,dG).call(this),I}finish(){F(this,cC)&&(F(this,cC).focus({focusVisible:F(this,KZ)}),U(this,KZ,!1))}isEmpty(){return!F(this,ZA)&&!F(this,dA)}get data(){return{altText:F(this,ZA),decorative:F(this,dA)}}set data({altText:I,decorative:g}){F(this,ZA)===I&&F(this,dA)===g||(U(this,ZA,I),U(this,dA,g),b(this,J0,dG).call(this))}toggle(I=!1){F(this,cC)&&(!I&&F(this,kg)&&(clearTimeout(F(this,kg)),U(this,kg,null)),F(this,cC).disabled=!I)}destroy(){var I;(I=F(this,cC))==null||I.remove(),U(this,cC,null),U(this,BA,null)}};ZA=new WeakMap,dA=new WeakMap,cC=new WeakMap,BA=new WeakMap,kg=new WeakMap,KZ=new WeakMap,GC=new WeakMap,J0=new WeakSet,dG=async function(){var A;const I=F(this,cC);if(!I)return;if(!F(this,ZA)&&!F(this,dA)){I.classList.remove("done"),(A=F(this,BA))==null||A.remove();return}I.classList.add("done"),FA._l10nPromise.get("pdfjs-editor-alt-text-edit-button-label").then(l=>{I.setAttribute("aria-label",l)});let g=F(this,BA);if(!g){U(this,BA,g=document.createElement("span")),g.className="tooltip",g.setAttribute("role","tooltip");const l=g.id=`alt-text-tooltip-${F(this,GC).id}`;I.setAttribute("aria-describedby",l);const Z=100,B=F(this,GC)._uiManager._signal;B.addEventListener("abort",()=>{clearTimeout(F(this,kg)),U(this,kg,null)},{once:!0}),I.addEventListener("mouseenter",()=>{U(this,kg,setTimeout(()=>{U(this,kg,null),F(this,BA).classList.add("show"),F(this,GC)._reportTelemetry({action:"alt_text_tooltip"})},Z))},{signal:B}),I.addEventListener("mouseleave",()=>{var i;F(this,kg)&&(clearTimeout(F(this,kg)),U(this,kg,null)),(i=F(this,BA))==null||i.classList.remove("show")},{signal:B})}g.innerText=F(this,dA)?await FA._l10nPromise.get("pdfjs-editor-alt-text-decorative-tooltip"):F(this,ZA),g.parentNode||I.append(g);const C=F(this,GC).getImageForAltText();C==null||C.setAttribute("aria-describedby",g.id)},dI(FA,"_l10nPromise",null);let SF=FA;const nI=class nI{constructor(I){m(this,cI);m(this,Xl,null);m(this,WC,null);m(this,Wg,null);m(this,TZ,!1);m(this,tl,!1);m(this,Ag,null);m(this,yl,null);m(this,zZ,this.focusin.bind(this));m(this,LZ,this.focusout.bind(this));m(this,Vg,null);m(this,M0,"");m(this,Hl,!1);m(this,EA,null);m(this,D0,!1);m(this,el,!1);m(this,iA,!1);m(this,tC,null);m(this,EZ,0);m(this,jZ,0);m(this,_g,null);dI(this,"_initialOptions",Object.create(null));dI(this,"_isVisible",!0);dI(this,"_uiManager",null);dI(this,"_focusEventsAllowed",!0);dI(this,"_l10nPromise",null);m(this,X0,!1);m(this,fF,nI._zIndex++);this.constructor===nI&&aI("Cannot initialize AnnotationEditor."),this.parent=I.parent,this.id=I.id,this.width=this.height=null,this.pageIndex=I.parent.pageIndex,this.name=I.name,this.div=null,this._uiManager=I.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=I.isCentered,this._structTreeParentId=null;const{rotation:g,rawDims:{pageWidth:C,pageHeight:A,pageX:l,pageY:Z}}=this.parent.viewport;this.rotation=g,this.pageRotation=(360+g-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[C,A],this.pageTranslation=[l,Z];const[B,i]=this.parentDimensions;this.x=I.x/B,this.y=I.y/i,this.isAttachedToDOM=!1,this.deleted=!1}static get _resizerKeyboardManager(){const I=nI.prototype._resizeWithKeyboard,g=sl.TRANSLATE_SMALL,C=sl.TRANSLATE_BIG;return bI(this,"_resizerKeyboardManager",new fd([[["ArrowLeft","mac+ArrowLeft"],I,{args:[-g,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],I,{args:[-C,0]}],[["ArrowRight","mac+ArrowRight"],I,{args:[g,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],I,{args:[C,0]}],[["ArrowUp","mac+ArrowUp"],I,{args:[0,-g]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],I,{args:[0,-C]}],[["ArrowDown","mac+ArrowDown"],I,{args:[0,g]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],I,{args:[0,C]}],[["Escape","mac+Escape"],nI.prototype._stopResizingWithKeyboard]]))}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return bI(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(I){const g=new Vb({id:I.parent.getNextId(),parent:I.parent,uiManager:I._uiManager});g.annotationElementId=I.annotationElementId,g.deleted=!0,g._uiManager.addToAnnotationStorage(g)}static initialize(I,g,C){if(nI._l10nPromise||(nI._l10nPromise=new Map(["pdfjs-editor-alt-text-button-label","pdfjs-editor-alt-text-edit-button-label","pdfjs-editor-alt-text-decorative-tooltip","pdfjs-editor-resizer-label-topLeft","pdfjs-editor-resizer-label-topMiddle","pdfjs-editor-resizer-label-topRight","pdfjs-editor-resizer-label-middleRight","pdfjs-editor-resizer-label-bottomRight","pdfjs-editor-resizer-label-bottomMiddle","pdfjs-editor-resizer-label-bottomLeft","pdfjs-editor-resizer-label-middleLeft"].map(l=>[l,I.get(l.replaceAll(/([A-Z])/g,Z=>`-${Z.toLowerCase()}`))]))),C!=null&&C.strings)for(const l of C.strings)nI._l10nPromise.set(l,I.get(l));if(nI._borderLineWidth!==-1)return;const A=getComputedStyle(document.documentElement);nI._borderLineWidth=parseFloat(A.getPropertyValue("--outline-width"))||0}static updateDefaultParams(I,g){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(I){return!1}static paste(I,g){aI("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return F(this,X0)}set _isDraggable(I){var g;U(this,X0,I),(g=this.div)==null||g.classList.toggle("draggable",I)}get isEnterHandled(){return!0}center(){const[I,g]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*g/(I*2),this.y+=this.width*I/(g*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*g/(I*2),this.y-=this.width*I/(g*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(I){this._uiManager.addCommands(I)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=F(this,fF)}setParent(I){I!==null?(this.pageIndex=I.pageIndex,this.pageDimensions=I.pageDimensions):b(this,cI,LB).call(this),this.parent=I}focusin(I){this._focusEventsAllowed&&(F(this,Hl)?U(this,Hl,!1):this.parent.setSelected(this))}focusout(I){var C;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const g=I.relatedTarget;g!=null&&g.closest(`#${this.id}`)||(I.preventDefault(),(C=this.parent)!=null&&C.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(I,g,C,A){const[l,Z]=this.parentDimensions;[C,A]=this.screenToPageTranslation(C,A),this.x=(I+C)/l,this.y=(g+A)/Z,this.fixAndSetPosition()}translate(I,g){b(this,cI,BG).call(this,this.parentDimensions,I,g)}translateInPage(I,g){F(this,EA)||U(this,EA,[this.x,this.y]),b(this,cI,BG).call(this,this.pageDimensions,I,g),this.div.scrollIntoView({block:"nearest"})}drag(I,g){F(this,EA)||U(this,EA,[this.x,this.y]);const[C,A]=this.parentDimensions;if(this.x+=I/C,this.y+=g/A,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:c,y:G}=this.div.getBoundingClientRect();this.parent.findNewParent(this,c,G)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:l,y:Z}=this;const[B,i]=this.getBaseTranslation();l+=B,Z+=i,this.div.style.left=`${(100*l).toFixed(2)}%`,this.div.style.top=`${(100*Z).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}get _hasBeenMoved(){return!!F(this,EA)&&(F(this,EA)[0]!==this.x||F(this,EA)[1]!==this.y)}getBaseTranslation(){const[I,g]=this.parentDimensions,{_borderLineWidth:C}=nI,A=C/I,l=C/g;switch(this.rotation){case 90:return[-A,l];case 180:return[A,l];case 270:return[A,-l];default:return[-A,-l]}}get _mustFixPosition(){return!0}fixAndSetPosition(I=this.rotation){const[g,C]=this.pageDimensions;let{x:A,y:l,width:Z,height:B}=this;if(Z*=g,B*=C,A*=g,l*=C,this._mustFixPosition)switch(I){case 0:A=Math.max(0,Math.min(g-Z,A)),l=Math.max(0,Math.min(C-B,l));break;case 90:A=Math.max(0,Math.min(g-B,A)),l=Math.min(C,Math.max(Z,l));break;case 180:A=Math.min(g,Math.max(Z,A)),l=Math.min(C,Math.max(B,l));break;case 270:A=Math.min(g,Math.max(B,A)),l=Math.max(0,Math.min(C-Z,l));break}this.x=A/=g,this.y=l/=C;const[i,c]=this.getBaseTranslation();A+=i,l+=c;const{style:G}=this.div;G.left=`${(100*A).toFixed(2)}%`,G.top=`${(100*l).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(I,g){var C;return b(C=nI,t0,FG).call(C,I,g,this.parentRotation)}pageTranslationToScreen(I,g){var C;return b(C=nI,t0,FG).call(C,I,g,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:I,pageDimensions:[g,C]}=this,A=g*I,l=C*I;return wg.isCSSRoundSupported?[Math.round(A),Math.round(l)]:[A,l]}setDims(I,g){const[C,A]=this.parentDimensions;this.div.style.width=`${(100*I/C).toFixed(2)}%`,F(this,tl)||(this.div.style.height=`${(100*g/A).toFixed(2)}%`)}fixDims(){const{style:I}=this.div,{height:g,width:C}=I,A=C.endsWith("%"),l=!F(this,tl)&&g.endsWith("%");if(A&&l)return;const[Z,B]=this.parentDimensions;A||(I.width=`${(100*parseFloat(C)/Z).toFixed(2)}%`),!F(this,tl)&&!l&&(I.height=`${(100*parseFloat(g)/B).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}altTextFinish(){var I;(I=F(this,Wg))==null||I.finish()}async addEditToolbar(){return F(this,Vg)||F(this,el)?F(this,Vg):(U(this,Vg,new Vc(this)),this.div.append(F(this,Vg).render()),F(this,Wg)&&F(this,Vg).addAltTextButton(await F(this,Wg).render()),F(this,Vg))}removeEditToolbar(){var I;F(this,Vg)&&(F(this,Vg).remove(),U(this,Vg,null),(I=F(this,Wg))==null||I.destroy())}getClientDimensions(){return this.div.getBoundingClientRect()}async addAltTextButton(){F(this,Wg)||(SF.initialize(nI._l10nPromise),U(this,Wg,new SF(this)),F(this,Xl)&&(F(this,Wg).data=F(this,Xl),U(this,Xl,null)),await this.addEditToolbar())}get altTextData(){var I;return(I=F(this,Wg))==null?void 0:I.data}set altTextData(I){F(this,Wg)&&(F(this,Wg).data=I)}hasAltText(){var I;return!((I=F(this,Wg))!=null&&I.isEmpty())}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.tabIndex=F(this,TZ)?-1:0,this._isVisible||this.div.classList.add("hidden"),this.setInForeground();const I=this._uiManager._signal;this.div.addEventListener("focusin",F(this,zZ),{signal:I}),this.div.addEventListener("focusout",F(this,LZ),{signal:I});const[g,C]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*C/g).toFixed(2)}%`,this.div.style.maxHeight=`${(100*g/C).toFixed(2)}%`);const[A,l]=this.getInitialTranslation();return this.translate(A,l),nF(this,this.div,["pointerdown"]),this.div}pointerdown(I){const{isMac:g}=wg.platform;if(I.button!==0||I.ctrlKey&&g){I.preventDefault();return}if(U(this,Hl,!0),this._isDraggable){b(this,cI,QR).call(this,I);return}b(this,cI,WG).call(this,I)}moveInDOM(){F(this,tC)&&clearTimeout(F(this,tC)),U(this,tC,setTimeout(()=>{var I;U(this,tC,null),(I=this.parent)==null||I.moveEditorInDOM(this)},0))}_setParentAndPosition(I,g,C){I.changeParent(this),this.x=g,this.y=C,this.fixAndSetPosition()}getRect(I,g,C=this.rotation){const A=this.parentScale,[l,Z]=this.pageDimensions,[B,i]=this.pageTranslation,c=I/A,G=g/A,W=this.x*l,V=this.y*Z,R=this.width*l,s=this.height*Z;switch(C){case 0:return[W+c+B,Z-V-G-s+i,W+c+R+B,Z-V-G+i];case 90:return[W+G+B,Z-V+c+i,W+G+s+B,Z-V+c+R+i];case 180:return[W-c-R+B,Z-V+G+i,W-c+B,Z-V+G+s+i];case 270:return[W-G-s+B,Z-V-c-R+i,W-G+B,Z-V-c+i];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(I,g){const[C,A,l,Z]=I,B=l-C,i=Z-A;switch(this.rotation){case 0:return[C,g-Z,B,i];case 90:return[C,g-A,i,B];case 180:return[l,g-A,B,i];case 270:return[l,g-Z,i,B];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){U(this,el,!0)}disableEditMode(){U(this,el,!1)}isInEditMode(){return F(this,el)}shouldGetKeyboardEvents(){return F(this,iA)}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var g,C;const I=this._uiManager._signal;(g=this.div)==null||g.addEventListener("focusin",F(this,zZ),{signal:I}),(C=this.div)==null||C.addEventListener("focusout",F(this,LZ),{signal:I})}rotate(I){}serialize(I=!1,g=null){aI("An editor must be serializable")}static deserialize(I,g,C){const A=new this.prototype.constructor({parent:g,id:g.getNextId(),uiManager:C});A.rotation=I.rotation,U(A,Xl,I.accessibilityData);const[l,Z]=A.pageDimensions,[B,i,c,G]=A.getRectInCurrentCoords(I.rect,Z);return A.x=B/l,A.y=i/Z,A.width=c/l,A.height=G/Z,A}get hasBeenModified(){return!!this.annotationElementId&&(this.deleted||this.serialize()!==null)}remove(){if(this.div.removeEventListener("focusin",F(this,zZ)),this.div.removeEventListener("focusout",F(this,LZ)),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),F(this,tC)&&(clearTimeout(F(this,tC)),U(this,tC,null)),b(this,cI,LB).call(this),this.removeEditToolbar(),F(this,_g)){for(const I of F(this,_g).values())clearTimeout(I);U(this,_g,null)}this.parent=null}get isResizable(){return!1}makeResizable(){this.isResizable&&(b(this,cI,bR).call(this),F(this,Ag).classList.remove("hidden"),nF(this,this.div,["keydown"]))}get toolbarPosition(){return null}keydown(I){if(!this.isResizable||I.target!==this.div||I.key!=="Enter")return;this._uiManager.setSelected(this),U(this,yl,{savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height});const g=F(this,Ag).children;if(!F(this,WC)){U(this,WC,Array.from(g));const Z=b(this,cI,NR).bind(this),B=b(this,cI,hR).bind(this),i=this._uiManager._signal;for(const c of F(this,WC)){const G=c.getAttribute("data-resizer-name");c.setAttribute("role","spinbutton"),c.addEventListener("keydown",Z,{signal:i}),c.addEventListener("blur",B,{signal:i}),c.addEventListener("focus",b(this,cI,oR).bind(this,G),{signal:i}),nI._l10nPromise.get(`pdfjs-editor-resizer-label-${G}`).then(W=>c.setAttribute("aria-label",W))}}const C=F(this,WC)[0];let A=0;for(const Z of g){if(Z===C)break;A++}const l=(360-this.rotation+this.parentRotation)%360/90*(F(this,WC).length/4);if(l!==A){if(l<A)for(let B=0;B<A-l;B++)F(this,Ag).append(F(this,Ag).firstChild);else if(l>A)for(let B=0;B<l-A;B++)F(this,Ag).firstChild.before(F(this,Ag).lastChild);let Z=0;for(const B of g){const c=F(this,WC)[Z++].getAttribute("data-resizer-name");nI._l10nPromise.get(`pdfjs-editor-resizer-label-${c}`).then(G=>B.setAttribute("aria-label",G))}}b(this,cI,VG).call(this,0),U(this,iA,!0),F(this,Ag).firstChild.focus({focusVisible:!0}),I.preventDefault(),I.stopImmediatePropagation()}_resizeWithKeyboard(I,g){F(this,iA)&&b(this,cI,GG).call(this,F(this,M0),{movementX:I,movementY:g})}_stopResizingWithKeyboard(){b(this,cI,LB).call(this),this.div.focus()}select(){var I,g;if(this.makeResizable(),(I=this.div)==null||I.classList.add("selectedEditor"),!F(this,Vg)){this.addEditToolbar().then(()=>{var C,A;(C=this.div)!=null&&C.classList.contains("selectedEditor")&&((A=F(this,Vg))==null||A.show())});return}(g=F(this,Vg))==null||g.show()}unselect(){var I,g,C,A;(I=F(this,Ag))==null||I.classList.add("hidden"),(g=this.div)==null||g.classList.remove("selectedEditor"),(C=this.div)!=null&&C.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus({preventScroll:!0}),(A=F(this,Vg))==null||A.hide()}updateParams(I,g){}disableEditing(){}enableEditing(){}enterInEditMode(){}getImageForAltText(){return null}get contentDiv(){return this.div}get isEditing(){return F(this,D0)}set isEditing(I){U(this,D0,I),this.parent&&(I?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(I,g){U(this,tl,!0);const C=I/g,{style:A}=this.div;A.aspectRatio=C,A.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}get telemetryInitialData(){return{action:"added"}}get telemetryFinalData(){return null}_reportTelemetry(I,g=!1){if(g){F(this,_g)||U(this,_g,new Map);const{action:C}=I;let A=F(this,_g).get(C);A&&clearTimeout(A),A=setTimeout(()=>{this._reportTelemetry(I),F(this,_g).delete(C),F(this,_g).size===0&&U(this,_g,null)},nI._telemetryTimeout),F(this,_g).set(C,A);return}I.type||(I.type=this.editorType),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:I}})}show(I=this._isVisible){this.div.classList.toggle("hidden",!I),this._isVisible=I}enable(){this.div&&(this.div.tabIndex=0),U(this,TZ,!1)}disable(){this.div&&(this.div.tabIndex=-1),U(this,TZ,!0)}renderAnnotationElement(I){let g=I.container.querySelector(".annotationContent");if(!g)g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),I.container.prepend(g);else if(g.nodeName==="CANVAS"){const C=g;g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),C.before(g)}return g}resetAnnotationElement(I){const{firstChild:g}=I.container;g.nodeName==="DIV"&&g.classList.contains("annotationContent")&&g.remove()}};Xl=new WeakMap,WC=new WeakMap,Wg=new WeakMap,TZ=new WeakMap,tl=new WeakMap,Ag=new WeakMap,yl=new WeakMap,zZ=new WeakMap,LZ=new WeakMap,Vg=new WeakMap,M0=new WeakMap,Hl=new WeakMap,EA=new WeakMap,D0=new WeakMap,el=new WeakMap,iA=new WeakMap,tC=new WeakMap,EZ=new WeakMap,jZ=new WeakMap,_g=new WeakMap,X0=new WeakMap,fF=new WeakMap,cI=new WeakSet,BG=function([I,g],C,A){[C,A]=this.screenToPageTranslation(C,A),this.x+=C/I,this.y+=A/g,this.fixAndSetPosition()},t0=new WeakSet,FG=function(I,g,C){switch(C){case 90:return[g,-I];case 180:return[-I,-g];case 270:return[-g,I];default:return[I,g]}},iG=function(I){switch(I){case 90:{const[g,C]=this.pageDimensions;return[0,-g/C,C/g,0]}case 180:return[-1,0,0,-1];case 270:{const[g,C]=this.pageDimensions;return[0,g/C,-C/g,0]}default:return[1,0,0,1]}},bR=function(){if(F(this,Ag))return;U(this,Ag,document.createElement("div")),F(this,Ag).classList.add("resizers");const I=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"],g=this._uiManager._signal;for(const C of I){const A=document.createElement("div");F(this,Ag).append(A),A.classList.add("resizer",C),A.setAttribute("data-resizer-name",C),A.addEventListener("pointerdown",b(this,cI,mR).bind(this,C),{signal:g}),A.addEventListener("contextmenu",ng,{signal:g}),A.tabIndex=-1}this.div.prepend(F(this,Ag))},mR=function(I,g){var Q;g.preventDefault();const{isMac:C}=wg.platform;if(g.button!==0||g.ctrlKey&&C)return;(Q=F(this,Wg))==null||Q.toggle(!1);const A=b(this,cI,GG).bind(this,I),l=this._isDraggable;this._isDraggable=!1;const Z=this._uiManager._signal,B={passive:!0,capture:!0,signal:Z};this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",A,B),window.addEventListener("contextmenu",ng,{signal:Z});const i=this.x,c=this.y,G=this.width,W=this.height,V=this.parent.div.style.cursor,R=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(g.target).cursor;const s=()=>{var h;this.parent.togglePointerEvents(!0),(h=F(this,Wg))==null||h.toggle(!0),this._isDraggable=l,window.removeEventListener("pointerup",s),window.removeEventListener("blur",s),window.removeEventListener("pointermove",A,B),window.removeEventListener("contextmenu",ng),this.parent.div.style.cursor=V,this.div.style.cursor=R,b(this,cI,cG).call(this,i,c,G,W)};window.addEventListener("pointerup",s,{signal:Z}),window.addEventListener("blur",s,{signal:Z})},cG=function(I,g,C,A){const l=this.x,Z=this.y,B=this.width,i=this.height;l===I&&Z===g&&B===C&&i===A||this.addCommands({cmd:()=>{this.width=B,this.height=i,this.x=l,this.y=Z;const[c,G]=this.parentDimensions;this.setDims(c*B,G*i),this.fixAndSetPosition()},undo:()=>{this.width=C,this.height=A,this.x=I,this.y=g;const[c,G]=this.parentDimensions;this.setDims(c*C,G*A),this.fixAndSetPosition()},mustExec:!0})},GG=function(I,g){const[C,A]=this.parentDimensions,l=this.x,Z=this.y,B=this.width,i=this.height,c=nI.MIN_SIZE/C,G=nI.MIN_SIZE/A,W=O=>Math.round(O*1e4)/1e4,V=b(this,cI,iG).call(this,this.rotation),R=(O,L)=>[V[0]*O+V[2]*L,V[1]*O+V[3]*L],s=b(this,cI,iG).call(this,360-this.rotation),Q=(O,L)=>[s[0]*O+s[2]*L,s[1]*O+s[3]*L];let h,N,o=!1,Y=!1;switch(I){case"topLeft":o=!0,h=(O,L)=>[0,0],N=(O,L)=>[O,L];break;case"topMiddle":h=(O,L)=>[O/2,0],N=(O,L)=>[O/2,L];break;case"topRight":o=!0,h=(O,L)=>[O,0],N=(O,L)=>[0,L];break;case"middleRight":Y=!0,h=(O,L)=>[O,L/2],N=(O,L)=>[0,L/2];break;case"bottomRight":o=!0,h=(O,L)=>[O,L],N=(O,L)=>[0,0];break;case"bottomMiddle":h=(O,L)=>[O/2,L],N=(O,L)=>[O/2,0];break;case"bottomLeft":o=!0,h=(O,L)=>[0,L],N=(O,L)=>[O,0];break;case"middleLeft":Y=!0,h=(O,L)=>[0,L/2],N=(O,L)=>[O,L/2];break}const n=h(B,i),a=N(B,i);let w=R(...a);const X=W(l+w[0]),J=W(Z+w[1]);let y=1,z=1,[u,II]=this.screenToPageTranslation(g.movementX,g.movementY);if([u,II]=Q(u/C,II/A),o){const O=Math.hypot(B,i);y=z=Math.max(Math.min(Math.hypot(a[0]-n[0]-u,a[1]-n[1]-II)/O,1/B,1/i),c/B,G/i)}else Y?y=Math.max(c,Math.min(1,Math.abs(a[0]-n[0]-u)))/B:z=Math.max(G,Math.min(1,Math.abs(a[1]-n[1]-II)))/i;const _=W(B*y),BI=W(i*z);w=R(...N(_,BI));const FI=X-w[0],RI=J-w[1];this.width=_,this.height=BI,this.x=FI,this.y=RI,this.setDims(C*_,A*BI),this.fixAndSetPosition()},WG=function(I){const{isMac:g}=wg.platform;I.ctrlKey&&!g||I.shiftKey||I.metaKey&&g?this.parent.toggleSelected(this):this.parent.setSelected(this)},QR=function(I){const g=this._uiManager.isSelected(this);this._uiManager.setUpDragSession();let C,A;const l=this._uiManager._signal;g&&(this.div.classList.add("moving"),C={passive:!0,capture:!0,signal:l},U(this,EZ,I.clientX),U(this,jZ,I.clientY),A=B=>{const{clientX:i,clientY:c}=B,[G,W]=this.screenToPageTranslation(i-F(this,EZ),c-F(this,jZ));U(this,EZ,i),U(this,jZ,c),this._uiManager.dragSelectedEditors(G,W)},window.addEventListener("pointermove",A,C));const Z=()=>{window.removeEventListener("pointerup",Z),window.removeEventListener("blur",Z),g&&(this.div.classList.remove("moving"),window.removeEventListener("pointermove",A,C)),U(this,Hl,!1),this._uiManager.endDragSession()||b(this,cI,WG).call(this,I)};window.addEventListener("pointerup",Z,{signal:l}),window.addEventListener("blur",Z,{signal:l})},NR=function(I){nI._resizerKeyboardManager.exec(this,I)},hR=function(I){var g;F(this,iA)&&((g=I.relatedTarget)==null?void 0:g.parentNode)!==F(this,Ag)&&b(this,cI,LB).call(this)},oR=function(I){U(this,M0,F(this,iA)?I:"")},VG=function(I){if(F(this,WC))for(const g of F(this,WC))g.tabIndex=I},LB=function(){if(U(this,iA,!1),b(this,cI,VG).call(this,-1),F(this,yl)){const{savedX:I,savedY:g,savedWidth:C,savedHeight:A}=F(this,yl);b(this,cI,cG).call(this,I,g,C,A),U(this,yl,null)}},m(nI,t0),dI(nI,"_borderLineWidth",-1),dI(nI,"_colorManager",new sc),dI(nI,"_zIndex",1),dI(nI,"_telemetryTimeout",1e3);let hI=nI;class Vb extends hI{constructor(I){super(I),this.annotationElementId=I.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}const TW=3285377520,fg=4294901760,wC=65535;class zW{constructor(I){this.h1=I?I&4294967295:TW,this.h2=I?I&4294967295:TW}update(I){let g,C;if(typeof I=="string"){g=new Uint8Array(I.length*2),C=0;for(let Q=0,h=I.length;Q<h;Q++){const N=I.charCodeAt(Q);N<=255?g[C++]=N:(g[C++]=N>>>8,g[C++]=N&255)}}else if(ArrayBuffer.isView(I))g=I.slice(),C=g.byteLength;else throw new Error("Invalid data format, must be a string or TypedArray.");const A=C>>2,l=C-A*4,Z=new Uint32Array(g.buffer,0,A);let B=0,i=0,c=this.h1,G=this.h2;const W=3432918353,V=461845907,R=W&wC,s=V&wC;for(let Q=0;Q<A;Q++)Q&1?(B=Z[Q],B=B*W&fg|B*R&wC,B=B<<15|B>>>17,B=B*V&fg|B*s&wC,c^=B,c=c<<13|c>>>19,c=c*5+3864292196):(i=Z[Q],i=i*W&fg|i*R&wC,i=i<<15|i>>>17,i=i*V&fg|i*s&wC,G^=i,G=G<<13|G>>>19,G=G*5+3864292196);switch(B=0,l){case 3:B^=g[A*4+2]<<16;case 2:B^=g[A*4+1]<<8;case 1:B^=g[A*4],B=B*W&fg|B*R&wC,B=B<<15|B>>>17,B=B*V&fg|B*s&wC,A&1?c^=B:G^=B}this.h1=c,this.h2=G}hexdigest(){let I=this.h1,g=this.h2;return I^=g>>>1,I=I*3981806797&fg|I*36045&wC,g=g*4283543511&fg|((g<<16|I>>>16)*2950163797&fg)>>>16,I^=g>>>1,I=I*444984403&fg|I*60499&wC,g=g*3301882366&fg|((g<<16|I>>>16)*3120437893&fg)>>>16,I^=g>>>1,(I>>>0).toString(16).padStart(8,"0")+(g>>>0).toString(16).padStart(8,"0")}}const Uc=Object.freeze({map:null,hash:"",transfer:void 0});class bc{constructor(){m(this,qF);m(this,ul,!1);m(this,lg,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(I,g){const C=F(this,lg).get(I);return C===void 0?g:Object.assign(g,C)}getRawValue(I){return F(this,lg).get(I)}remove(I){if(F(this,lg).delete(I),F(this,lg).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const g of F(this,lg).values())if(g instanceof hI)return;this.onAnnotationEditor(null)}}setValue(I,g){const C=F(this,lg).get(I);let A=!1;if(C!==void 0)for(const[l,Z]of Object.entries(g))C[l]!==Z&&(A=!0,C[l]=Z);else A=!0,F(this,lg).set(I,g);A&&b(this,qF,aR).call(this),g instanceof hI&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(g.constructor._type)}has(I){return F(this,lg).has(I)}getAll(){return F(this,lg).size>0?lc(F(this,lg)):null}setAll(I){for(const[g,C]of Object.entries(I))this.setValue(g,C)}get size(){return F(this,lg).size}resetModified(){F(this,ul)&&(U(this,ul,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new LW(this)}get serializable(){if(F(this,lg).size===0)return Uc;const I=new Map,g=new zW,C=[],A=Object.create(null);let l=!1;for(const[Z,B]of F(this,lg)){const i=B instanceof hI?B.serialize(!1,A):B;i&&(I.set(Z,i),g.update(`${Z}:${JSON.stringify(i)}`),l||(l=!!i.bitmap))}if(l)for(const Z of I.values())Z.bitmap&&C.push(Z.bitmap);return I.size>0?{map:I,hash:g.hexdigest(),transfer:C}:Uc}get editorStats(){let I=null;const g=new Map;for(const C of F(this,lg).values()){if(!(C instanceof hI))continue;const A=C.telemetryFinalData;if(!A)continue;const{type:l}=A;g.has(l)||g.set(l,Object.getPrototypeOf(C).constructor),I||(I=Object.create(null));const Z=I[l]||(I[l]=new Map);for(const[B,i]of Object.entries(A)){if(B==="type")continue;let c=Z.get(B);c||(c=new Map,Z.set(B,c));const G=c.get(i)??0;c.set(i,G+1)}}for(const[C,A]of g)I[C]=A.computeTelemetryFinalData(I[C]);return I}}ul=new WeakMap,lg=new WeakMap,qF=new WeakSet,aR=function(){F(this,ul)||(U(this,ul,!0),typeof this.onSetModified=="function"&&this.onSetModified())};class LW extends bc{constructor(g){super();m(this,y0);const{map:C,hash:A,transfer:l}=g.serializable,Z=structuredClone(C,l?{transfer:l}:null);U(this,y0,{map:Z,hash:A,transfer:l})}get print(){aI("Should not call PrintAnnotationStorage.print")}get serializable(){return F(this,y0)}}y0=new WeakMap;class Rb{constructor({ownerDocument:I=globalThis.document,styleElement:g=null}){m(this,xZ,new Set);this._document=I,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(I){this.nativeFontFaces.add(I),this._document.fonts.add(I)}removeNativeFontFace(I){this.nativeFontFaces.delete(I),this._document.fonts.delete(I)}insertRule(I){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const g=this.styleElement.sheet;g.insertRule(I,g.cssRules.length)}clear(){for(const I of this.nativeFontFaces)this._document.fonts.delete(I);this.nativeFontFaces.clear(),F(this,xZ).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:I,_inspectFont:g}){if(!(!I||F(this,xZ).has(I.loadedName))){if(OI(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:C,src:A,style:l}=I,Z=new FontFace(C,A,l);this.addNativeFontFace(Z);try{await Z.load(),F(this,xZ).add(C),g==null||g(I)}catch{iI(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(Z)}return}aI("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(I){if(I.attached||I.missingFile&&!I.systemFontInfo)return;if(I.attached=!0,I.systemFontInfo){await this.loadSystemFont(I);return}if(this.isFontLoadingAPISupported){const C=I.createNativeFontFace();if(C){this.addNativeFontFace(C);try{await C.loaded}catch(A){throw iI(`Failed to load font '${C.family}': '${A}'.`),I.disableFontFace=!0,A}}return}const g=I.createFontFaceRule();if(g){if(this.insertRule(g),this.isSyncFontLoadingSupported)return;await new Promise(C=>{const A=this._queueLoadingCallback(C);this._prepareFontLoadEvent(I,A)})}}get isFontLoadingAPISupported(){var g;const I=!!((g=this._document)!=null&&g.fonts);return bI(this,"isFontLoadingAPISupported",I)}get isSyncFontLoadingSupported(){let I=!1;return(cg||typeof navigator<"u"&&typeof(navigator==null?void 0:navigator.userAgent)=="string"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(I=!0),bI(this,"isSyncFontLoadingSupported",I)}_queueLoadingCallback(I){function g(){for(OI(!A.done,"completeRequest() cannot be called twice."),A.done=!0;C.length>0&&C[0].done;){const l=C.shift();setTimeout(l.callback,0)}}const{loadingRequests:C}=this,A={done:!1,complete:g,callback:I};return C.push(A),A}get _loadTestFont(){const I=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return bI(this,"_loadTestFont",I)}_prepareFontLoadEvent(I,g){function C(n,a){return n.charCodeAt(a)<<24|n.charCodeAt(a+1)<<16|n.charCodeAt(a+2)<<8|n.charCodeAt(a+3)&255}function A(n,a,w,X){const J=n.substring(0,a),y=n.substring(a+w);return J+X+y}let l,Z;const B=this._document.createElement("canvas");B.width=1,B.height=1;const i=B.getContext("2d");let c=0;function G(n,a){if(++c>30){iI("Load test font never loaded."),a();return}if(i.font="30px "+n,i.fillText(".",0,20),i.getImageData(0,0,1,1).data[3]>0){a();return}setTimeout(G.bind(null,n,a))}const W=`lt${Date.now()}${this.loadTestFontId++}`;let V=this._loadTestFont;V=A(V,976,W.length,W);const s=16,Q=1482184792;let h=C(V,s);for(l=0,Z=W.length-3;l<Z;l+=4)h=h-Q+C(W,l)|0;l<W.length&&(h=h-Q+C(W+"XXX",l)|0),V=A(V,s,4,qU(h));const N=`url(data:font/opentype;base64,${btoa(V)});`,o=`@font-face {font-family:"${W}";src:${N}}`;this.insertRule(o);const Y=this._document.createElement("div");Y.style.visibility="hidden",Y.style.width=Y.style.height="10px",Y.style.position="absolute",Y.style.top=Y.style.left="0px";for(const n of[I.loadedName,W]){const a=this._document.createElement("span");a.textContent="Hi",a.style.fontFamily=n,Y.append(a)}this._document.body.append(Y),G(W,()=>{Y.remove(),g.complete()})}}xZ=new WeakMap;class sb{constructor(I,{disableFontFace:g=!1,inspectFont:C=null}){this.compiledGlyphs=Object.create(null);for(const A in I)this[A]=I[A];this.disableFontFace=g===!0,this._inspectFont=C}createNativeFontFace(){var g;if(!this.data||this.disableFontFace)return null;let I;if(!this.cssFontInfo)I=new FontFace(this.loadedName,this.data,{});else{const C={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(C.style=`oblique ${this.cssFontInfo.italicAngle}deg`),I=new FontFace(this.cssFontInfo.fontFamily,this.data,C)}return(g=this._inspectFont)==null||g.call(this,this),I}createFontFaceRule(){var A;if(!this.data||this.disableFontFace)return null;const I=XW(this.data),g=`url(data:${this.mimetype};base64,${btoa(I)});`;let C;if(!this.cssFontInfo)C=`@font-face {font-family:"${this.loadedName}";src:${g}}`;else{let l=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(l+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),C=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${l}src:${g}}`}return(A=this._inspectFont)==null||A.call(this,this,g),C}getPathGenerator(I,g){if(this.compiledGlyphs[g]!==void 0)return this.compiledGlyphs[g];let C;try{C=I.get(this.loadedName+"_path_"+g)}catch(l){iI(`getPathGenerator - ignoring character: "${l}".`)}if(!Array.isArray(C)||C.length===0)return this.compiledGlyphs[g]=function(l,Z){};const A=[];for(let l=0,Z=C.length;l<Z;)switch(C[l++]){case vC.BEZIER_CURVE_TO:{const[B,i,c,G,W,V]=C.slice(l,l+6);A.push(R=>R.bezierCurveTo(B,i,c,G,W,V)),l+=6}break;case vC.MOVE_TO:{const[B,i]=C.slice(l,l+2);A.push(c=>c.moveTo(B,i)),l+=2}break;case vC.LINE_TO:{const[B,i]=C.slice(l,l+2);A.push(c=>c.lineTo(B,i)),l+=2}break;case vC.QUADRATIC_CURVE_TO:{const[B,i,c,G]=C.slice(l,l+4);A.push(W=>W.quadraticCurveTo(B,i,c,G)),l+=4}break;case vC.RESTORE:A.push(B=>B.restore());break;case vC.SAVE:A.push(B=>B.save());break;case vC.SCALE:OI(A.length===2,"Scale command is only valid at the third position.");break;case vC.TRANSFORM:{const[B,i,c,G,W,V]=C.slice(l,l+6);A.push(R=>R.transform(B,i,c,G,W,V)),l+=6}break;case vC.TRANSLATE:{const[B,i]=C.slice(l,l+2);A.push(c=>c.translate(B,i)),l+=2}break}return this.compiledGlyphs[g]=function(Z,B){A[0](Z),A[1](Z),Z.scale(B,-B);for(let i=2,c=A.length;i<c;i++)A[i](Z)}}}if(cg){var mc=Promise.withResolvers(),qd=null;(async()=>{const I=await Promise.resolve().then(()=>zF),g=await Promise.resolve().then(()=>zF),C=await Promise.resolve().then(()=>zF),A=await Promise.resolve().then(()=>zF);let l,Z;return new Map(Object.entries({fs:I,http:g,https:C,url:A,canvas:l,path2d:Z}))})().then(I=>{qd=I,mc.resolve()},I=>{iI(`loadPackages: ${I}`),qd=new Map,mc.resolve()})}class nC{static get promise(){return mc.promise}static get(I){return qd==null?void 0:qd.get(I)}}const EW=function(d){return nC.get("fs").promises.readFile(d).then(g=>new Uint8Array(g))};class Ub extends hF{}class bb extends oF{_createCanvas(I,g){return nC.get("canvas").createCanvas(I,g)}}class mb extends aF{_fetchData(I,g){return EW(I).then(C=>({cMapData:C,compressionType:g}))}}class Qb extends YF{_fetchData(I){return EW(I)}}const mg={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function Qc(d,I){if(!I)return;const g=I[2]-I[0],C=I[3]-I[1],A=new Path2D;A.rect(I[0],I[1],g,C),d.clip(A)}class _d{constructor(){this.constructor===_d&&aI("Cannot initialize BaseShadingPattern.")}getPattern(){aI("Abstract method `getPattern` called.")}}class Nb extends _d{constructor(I){super(),this._type=I[1],this._bbox=I[2],this._colorStops=I[3],this._p0=I[4],this._p1=I[5],this._r0=I[6],this._r1=I[7],this.matrix=null}_createGradient(I){let g;this._type==="axial"?g=I.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(g=I.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const C of this._colorStops)g.addColorStop(C[0],C[1]);return g}getPattern(I,g,C,A){let l;if(A===mg.STROKE||A===mg.FILL){const Z=g.current.getClippedPathBoundingBox(A,yI(I))||[0,0,0,0],B=Math.ceil(Z[2]-Z[0])||1,i=Math.ceil(Z[3]-Z[1])||1,c=g.cachedCanvases.getCanvas("pattern",B,i,!0),G=c.context;G.clearRect(0,0,G.canvas.width,G.canvas.height),G.beginPath(),G.rect(0,0,G.canvas.width,G.canvas.height),G.translate(-Z[0],-Z[1]),C=x.transform(C,[1,0,0,1,Z[0],Z[1]]),G.transform(...g.baseTransform),this.matrix&&G.transform(...this.matrix),Qc(G,this._bbox),G.fillStyle=this._createGradient(G),G.fill(),l=I.createPattern(c.canvas,"no-repeat");const W=new DOMMatrix(C);l.setTransform(W)}else Qc(I,this._bbox),l=this._createGradient(I);return l}}function Nc(d,I,g,C,A,l,Z,B){const i=I.coords,c=I.colors,G=d.data,W=d.width*4;let V;i[g+1]>i[C+1]&&(V=g,g=C,C=V,V=l,l=Z,Z=V),i[C+1]>i[A+1]&&(V=C,C=A,A=V,V=Z,Z=B,B=V),i[g+1]>i[C+1]&&(V=g,g=C,C=V,V=l,l=Z,Z=V);const R=(i[g]+I.offsetX)*I.scaleX,s=(i[g+1]+I.offsetY)*I.scaleY,Q=(i[C]+I.offsetX)*I.scaleX,h=(i[C+1]+I.offsetY)*I.scaleY,N=(i[A]+I.offsetX)*I.scaleX,o=(i[A+1]+I.offsetY)*I.scaleY;if(s>=o)return;const Y=c[l],n=c[l+1],a=c[l+2],w=c[Z],X=c[Z+1],J=c[Z+2],y=c[B],z=c[B+1],u=c[B+2],II=Math.round(s),_=Math.round(o);let BI,FI,RI,O,L,t,D,H;for(let j=II;j<=_;j++){if(j<h){const P=j<s?0:(s-j)/(s-h);BI=R-(R-Q)*P,FI=Y-(Y-w)*P,RI=n-(n-X)*P,O=a-(a-J)*P}else{let P;j>o?P=1:h===o?P=0:P=(h-j)/(h-o),BI=Q-(Q-N)*P,FI=w-(w-y)*P,RI=X-(X-z)*P,O=J-(J-u)*P}let M;j<s?M=0:j>o?M=1:M=(s-j)/(s-o),L=R-(R-N)*M,t=Y-(Y-y)*M,D=n-(n-z)*M,H=a-(a-u)*M;const p=Math.round(Math.min(BI,L)),ZI=Math.round(Math.max(BI,L));let CI=W*j+p*4;for(let P=p;P<=ZI;P++)M=(BI-P)/(BI-L),M<0?M=0:M>1&&(M=1),G[CI++]=FI-(FI-t)*M|0,G[CI++]=RI-(RI-D)*M|0,G[CI++]=O-(O-H)*M|0,G[CI++]=255}}function hb(d,I,g){const C=I.coords,A=I.colors;let l,Z;switch(I.type){case"lattice":const B=I.verticesPerRow,i=Math.floor(C.length/B)-1,c=B-1;for(l=0;l<i;l++){let G=l*B;for(let W=0;W<c;W++,G++)Nc(d,g,C[G],C[G+1],C[G+B],A[G],A[G+1],A[G+B]),Nc(d,g,C[G+B+1],C[G+1],C[G+B],A[G+B+1],A[G+1],A[G+B])}break;case"triangles":for(l=0,Z=C.length;l<Z;l+=3)Nc(d,g,C[l],C[l+1],C[l+2],A[l],A[l+1],A[l+2]);break;default:throw new Error("illegal figure")}}class ob extends _d{constructor(I){super(),this._coords=I[2],this._colors=I[3],this._figures=I[4],this._bounds=I[5],this._bbox=I[7],this._background=I[8],this.matrix=null}_createMeshCanvas(I,g,C){const B=Math.floor(this._bounds[0]),i=Math.floor(this._bounds[1]),c=Math.ceil(this._bounds[2])-B,G=Math.ceil(this._bounds[3])-i,W=Math.min(Math.ceil(Math.abs(c*I[0]*1.1)),3e3),V=Math.min(Math.ceil(Math.abs(G*I[1]*1.1)),3e3),R=c/W,s=G/V,Q={coords:this._coords,colors:this._colors,offsetX:-B,offsetY:-i,scaleX:1/R,scaleY:1/s},h=W+2*2,N=V+2*2,o=C.getCanvas("mesh",h,N,!1),Y=o.context,n=Y.createImageData(W,V);if(g){const w=n.data;for(let X=0,J=w.length;X<J;X+=4)w[X]=g[0],w[X+1]=g[1],w[X+2]=g[2],w[X+3]=255}for(const w of this._figures)hb(n,w,Q);return Y.putImageData(n,2,2),{canvas:o.canvas,offsetX:B-2*R,offsetY:i-2*s,scaleX:R,scaleY:s}}getPattern(I,g,C,A){Qc(I,this._bbox);let l;if(A===mg.SHADING)l=x.singularValueDecompose2dScale(yI(I));else if(l=x.singularValueDecompose2dScale(g.baseTransform),this.matrix){const B=x.singularValueDecompose2dScale(this.matrix);l=[l[0]*B[0],l[1]*B[1]]}const Z=this._createMeshCanvas(l,A===mg.SHADING?null:this._background,g.cachedCanvases);return A!==mg.SHADING&&(I.setTransform(...g.baseTransform),this.matrix&&I.transform(...this.matrix)),I.translate(Z.offsetX,Z.offsetY),I.scale(Z.scaleX,Z.scaleY),I.createPattern(Z.canvas,"no-repeat")}}class ab extends _d{getPattern(){return"hotpink"}}function Yb(d){switch(d[0]){case"RadialAxial":return new Nb(d);case"Mesh":return new ob(d);case"Dummy":return new ab}throw new Error(`Unknown IR type: ${d[0]}`)}const jW={COLORED:1,UNCOLORED:2},_F=class _F{constructor(I,g,C,A,l){this.operatorList=I[2],this.matrix=I[3],this.bbox=I[4],this.xstep=I[5],this.ystep=I[6],this.paintType=I[7],this.tilingType=I[8],this.color=g,this.ctx=C,this.canvasGraphicsFactory=A,this.baseTransform=l}createPatternCanvas(I){const g=this.operatorList,C=this.bbox,A=this.xstep,l=this.ystep,Z=this.paintType,B=this.tilingType,i=this.color,c=this.canvasGraphicsFactory;mF("TilingType: "+B);const G=C[0],W=C[1],V=C[2],R=C[3],s=x.singularValueDecompose2dScale(this.matrix),Q=x.singularValueDecompose2dScale(this.baseTransform),h=[s[0]*Q[0],s[1]*Q[1]],N=this.getSizeAndScale(A,this.ctx.canvas.width,h[0]),o=this.getSizeAndScale(l,this.ctx.canvas.height,h[1]),Y=I.cachedCanvases.getCanvas("pattern",N.size,o.size,!0),n=Y.context,a=c.createCanvasGraphics(n);a.groupLevel=I.groupLevel,this.setFillAndStrokeStyleToContext(a,Z,i);let w=G,X=W,J=V,y=R;return G<0&&(w=0,J+=Math.abs(G)),W<0&&(X=0,y+=Math.abs(W)),n.translate(-(N.scale*w),-(o.scale*X)),a.transform(N.scale,0,0,o.scale,0,0),n.save(),this.clipBbox(a,w,X,J,y),a.baseTransform=yI(a.ctx),a.executeOperatorList(g),a.endDrawing(),{canvas:Y.canvas,scaleX:N.scale,scaleY:o.scale,offsetX:w,offsetY:X}}getSizeAndScale(I,g,C){I=Math.abs(I);const A=Math.max(_F.MAX_PATTERN_SIZE,g);let l=Math.ceil(I*C);return l>=A?l=A:C=l/I,{scale:C,size:l}}clipBbox(I,g,C,A,l){const Z=A-g,B=l-C;I.ctx.rect(g,C,Z,B),I.current.updateRectMinMax(yI(I.ctx),[g,C,A,l]),I.clip(),I.endPath()}setFillAndStrokeStyleToContext(I,g,C){const A=I.ctx,l=I.current;switch(g){case jW.COLORED:const Z=this.ctx;A.fillStyle=Z.fillStyle,A.strokeStyle=Z.strokeStyle,l.fillColor=Z.fillStyle,l.strokeColor=Z.strokeStyle;break;case jW.UNCOLORED:const B=x.makeHexColor(C[0],C[1],C[2]);A.fillStyle=B,A.strokeStyle=B,l.fillColor=B,l.strokeColor=B;break;default:throw new fU(`Unsupported paint type: ${g}`)}}getPattern(I,g,C,A){let l=C;A!==mg.SHADING&&(l=x.transform(l,g.baseTransform),this.matrix&&(l=x.transform(l,this.matrix)));const Z=this.createPatternCanvas(g);let B=new DOMMatrix(l);B=B.translate(Z.offsetX,Z.offsetY),B=B.scale(1/Z.scaleX,1/Z.scaleY);const i=I.createPattern(Z.canvas,"repeat");return i.setTransform(B),i}};dI(_F,"MAX_PATTERN_SIZE",3e3);let hc=_F;function wb({src:d,srcPos:I=0,dest:g,width:C,height:A,nonBlackColor:l=4294967295,inverseDecode:Z=!1}){const B=wg.isLittleEndian?4278190080:255,[i,c]=Z?[l,B]:[B,l],G=C>>3,W=C&7,V=d.length;g=new Uint32Array(g.buffer);let R=0;for(let s=0;s<A;s++){for(const h=I+G;I<h;I++){const N=I<V?d[I]:255;g[R++]=N&128?c:i,g[R++]=N&64?c:i,g[R++]=N&32?c:i,g[R++]=N&16?c:i,g[R++]=N&8?c:i,g[R++]=N&4?c:i,g[R++]=N&2?c:i,g[R++]=N&1?c:i}if(W===0)continue;const Q=I<V?d[I++]:255;for(let h=0;h<W;h++)g[R++]=Q&1<<7-h?c:i}return{srcPos:I,destPos:R}}const xW=16,OW=100,nb=15,rW=10,vW=1e3,Sg=16;function Sb(d,I){if(d._removeMirroring)throw new Error("Context is already forwarding operations.");d.__originalSave=d.save,d.__originalRestore=d.restore,d.__originalRotate=d.rotate,d.__originalScale=d.scale,d.__originalTranslate=d.translate,d.__originalTransform=d.transform,d.__originalSetTransform=d.setTransform,d.__originalResetTransform=d.resetTransform,d.__originalClip=d.clip,d.__originalMoveTo=d.moveTo,d.__originalLineTo=d.lineTo,d.__originalBezierCurveTo=d.bezierCurveTo,d.__originalRect=d.rect,d.__originalClosePath=d.closePath,d.__originalBeginPath=d.beginPath,d._removeMirroring=()=>{d.save=d.__originalSave,d.restore=d.__originalRestore,d.rotate=d.__originalRotate,d.scale=d.__originalScale,d.translate=d.__originalTranslate,d.transform=d.__originalTransform,d.setTransform=d.__originalSetTransform,d.resetTransform=d.__originalResetTransform,d.clip=d.__originalClip,d.moveTo=d.__originalMoveTo,d.lineTo=d.__originalLineTo,d.bezierCurveTo=d.__originalBezierCurveTo,d.rect=d.__originalRect,d.closePath=d.__originalClosePath,d.beginPath=d.__originalBeginPath,delete d._removeMirroring},d.save=function(){I.save(),this.__originalSave()},d.restore=function(){I.restore(),this.__originalRestore()},d.translate=function(C,A){I.translate(C,A),this.__originalTranslate(C,A)},d.scale=function(C,A){I.scale(C,A),this.__originalScale(C,A)},d.transform=function(C,A,l,Z,B,i){I.transform(C,A,l,Z,B,i),this.__originalTransform(C,A,l,Z,B,i)},d.setTransform=function(C,A,l,Z,B,i){I.setTransform(C,A,l,Z,B,i),this.__originalSetTransform(C,A,l,Z,B,i)},d.resetTransform=function(){I.resetTransform(),this.__originalResetTransform()},d.rotate=function(C){I.rotate(C),this.__originalRotate(C)},d.clip=function(C){I.clip(C),this.__originalClip(C)},d.moveTo=function(g,C){I.moveTo(g,C),this.__originalMoveTo(g,C)},d.lineTo=function(g,C){I.lineTo(g,C),this.__originalLineTo(g,C)},d.bezierCurveTo=function(g,C,A,l,Z,B){I.bezierCurveTo(g,C,A,l,Z,B),this.__originalBezierCurveTo(g,C,A,l,Z,B)},d.rect=function(g,C,A,l){I.rect(g,C,A,l),this.__originalRect(g,C,A,l)},d.closePath=function(){I.closePath(),this.__originalClosePath()},d.beginPath=function(){I.beginPath(),this.__originalBeginPath()}}class Jb{constructor(I){this.canvasFactory=I,this.cache=Object.create(null)}getCanvas(I,g,C){let A;return this.cache[I]!==void 0?(A=this.cache[I],this.canvasFactory.reset(A,g,C)):(A=this.canvasFactory.create(g,C),this.cache[I]=A),A}delete(I){delete this.cache[I]}clear(){for(const I in this.cache){const g=this.cache[I];this.canvasFactory.destroy(g),delete this.cache[I]}}}function JF(d,I,g,C,A,l,Z,B,i,c){const[G,W,V,R,s,Q]=yI(d);if(W===0&&V===0){const o=Z*G+s,Y=Math.round(o),n=B*R+Q,a=Math.round(n),w=(Z+i)*G+s,X=Math.abs(Math.round(w)-Y)||1,J=(B+c)*R+Q,y=Math.abs(Math.round(J)-a)||1;return d.setTransform(Math.sign(G),0,0,Math.sign(R),Y,a),d.drawImage(I,g,C,A,l,0,0,X,y),d.setTransform(G,W,V,R,s,Q),[X,y]}if(G===0&&R===0){const o=B*V+s,Y=Math.round(o),n=Z*W+Q,a=Math.round(n),w=(B+c)*V+s,X=Math.abs(Math.round(w)-Y)||1,J=(Z+i)*W+Q,y=Math.abs(Math.round(J)-a)||1;return d.setTransform(0,Math.sign(W),Math.sign(V),0,Y,a),d.drawImage(I,g,C,A,l,0,0,y,X),d.setTransform(G,W,V,R,s,Q),[y,X]}d.drawImage(I,g,C,A,l,Z,B,i,c);const h=Math.hypot(G,W),N=Math.hypot(V,R);return[h*i,N*c]}function Mb(d){const{width:I,height:g}=d;if(I>vW||g>vW)return null;const C=1e3,A=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),l=I+1;let Z=new Uint8Array(l*(g+1)),B,i,c;const G=I+7&-8;let W=new Uint8Array(G*g),V=0;for(const N of d.data){let o=128;for(;o>0;)W[V++]=N&o?0:255,o>>=1}let R=0;for(V=0,W[V]!==0&&(Z[0]=1,++R),i=1;i<I;i++)W[V]!==W[V+1]&&(Z[i]=W[V]?2:1,++R),V++;for(W[V]!==0&&(Z[i]=2,++R),B=1;B<g;B++){V=B*G,c=B*l,W[V-G]!==W[V]&&(Z[c]=W[V]?1:8,++R);let N=(W[V]?4:0)+(W[V-G]?8:0);for(i=1;i<I;i++)N=(N>>2)+(W[V+1]?4:0)+(W[V-G+1]?8:0),A[N]&&(Z[c+i]=A[N],++R),V++;if(W[V-G]!==W[V]&&(Z[c+i]=W[V]?2:4,++R),R>C)return null}for(V=G*(g-1),c=B*l,W[V]!==0&&(Z[c]=8,++R),i=1;i<I;i++)W[V]!==W[V+1]&&(Z[c+i]=W[V]?4:8,++R),V++;if(W[V]!==0&&(Z[c+i]=4,++R),R>C)return null;const s=new Int32Array([0,l,-1,0,-l,0,0,0,1]),Q=new Path2D;for(B=0;R&&B<=g;B++){let N=B*l;const o=N+I;for(;N<o&&!Z[N];)N++;if(N===o)continue;Q.moveTo(N%l,B);const Y=N;let n=Z[N];do{const a=s[n];do N+=a;while(!Z[N]);const w=Z[N];w!==5&&w!==10?(n=w,Z[N]=0):(n=w&51*n>>4,Z[N]&=n>>2|n<<2),Q.lineTo(N%l,N/l|0),Z[N]||--R}while(Y!==N);--B}return W=null,Z=null,function(N){N.save(),N.scale(1/I,-1/g),N.translate(0,-g),N.fill(Q),N.beginPath(),N.restore()}}class PW{constructor(I,g){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=MW,this.textMatrixScale=1,this.fontMatrix=$i,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=Gg.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,I,g])}clone(){const I=Object.create(this);return I.clipBox=this.clipBox.slice(),I}setCurrentPoint(I,g){this.x=I,this.y=g}updatePathMinMax(I,g,C){[g,C]=x.applyTransform([g,C],I),this.minX=Math.min(this.minX,g),this.minY=Math.min(this.minY,C),this.maxX=Math.max(this.maxX,g),this.maxY=Math.max(this.maxY,C)}updateRectMinMax(I,g){const C=x.applyTransform(g,I),A=x.applyTransform(g.slice(2),I),l=x.applyTransform([g[0],g[3]],I),Z=x.applyTransform([g[2],g[1]],I);this.minX=Math.min(this.minX,C[0],A[0],l[0],Z[0]),this.minY=Math.min(this.minY,C[1],A[1],l[1],Z[1]),this.maxX=Math.max(this.maxX,C[0],A[0],l[0],Z[0]),this.maxY=Math.max(this.maxY,C[1],A[1],l[1],Z[1])}updateScalingPathMinMax(I,g){x.scaleMinMax(I,g),this.minX=Math.min(this.minX,g[0]),this.minY=Math.min(this.minY,g[1]),this.maxX=Math.max(this.maxX,g[2]),this.maxY=Math.max(this.maxY,g[3])}updateCurvePathMinMax(I,g,C,A,l,Z,B,i,c,G){const W=x.bezierBoundingBox(g,C,A,l,Z,B,i,c,G);G||this.updateRectMinMax(I,W)}getPathBoundingBox(I=mg.FILL,g=null){const C=[this.minX,this.minY,this.maxX,this.maxY];if(I===mg.STROKE){g||aI("Stroke bounding box must include transform.");const A=x.singularValueDecompose2dScale(g),l=A[0]*this.lineWidth/2,Z=A[1]*this.lineWidth/2;C[0]-=l,C[1]-=Z,C[2]+=l,C[3]+=Z}return C}updateClipFromPath(){const I=x.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(I||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(I){this.clipBox=I,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(I=mg.FILL,g=null){return x.intersect(this.clipBox,this.getPathBoundingBox(I,g))}}function fW(d,I){if(typeof ImageData<"u"&&I instanceof ImageData){d.putImageData(I,0,0);return}const g=I.height,C=I.width,A=g%Sg,l=(g-A)/Sg,Z=A===0?l:l+1,B=d.createImageData(C,Sg);let i=0,c;const G=I.data,W=B.data;let V,R,s,Q;if(I.kind===sF.GRAYSCALE_1BPP){const h=G.byteLength,N=new Uint32Array(W.buffer,0,W.byteLength>>2),o=N.length,Y=C+7>>3,n=4294967295,a=wg.isLittleEndian?4278190080:255;for(V=0;V<Z;V++){for(s=V<l?Sg:A,c=0,R=0;R<s;R++){const w=h-i;let X=0;const J=w>Y?C:w*8-7,y=J&-8;let z=0,u=0;for(;X<y;X+=8)u=G[i++],N[c++]=u&128?n:a,N[c++]=u&64?n:a,N[c++]=u&32?n:a,N[c++]=u&16?n:a,N[c++]=u&8?n:a,N[c++]=u&4?n:a,N[c++]=u&2?n:a,N[c++]=u&1?n:a;for(;X<J;X++)z===0&&(u=G[i++],z=128),N[c++]=u&z?n:a,z>>=1}for(;c<o;)N[c++]=0;d.putImageData(B,0,V*Sg)}}else if(I.kind===sF.RGBA_32BPP){for(R=0,Q=C*Sg*4,V=0;V<l;V++)W.set(G.subarray(i,i+Q)),i+=Q,d.putImageData(B,0,R),R+=Sg;V<Z&&(Q=C*A*4,W.set(G.subarray(i,i+Q)),d.putImageData(B,0,R))}else if(I.kind===sF.RGB_24BPP)for(s=Sg,Q=C*s,V=0;V<Z;V++){for(V>=l&&(s=A,Q=C*s),c=0,R=Q;R--;)W[c++]=G[i++],W[c++]=G[i++],W[c++]=G[i++],W[c++]=255;d.putImageData(B,0,V*Sg)}else throw new Error(`bad image kind: ${I.kind}`)}function qW(d,I){if(I.bitmap){d.drawImage(I.bitmap,0,0);return}const g=I.height,C=I.width,A=g%Sg,l=(g-A)/Sg,Z=A===0?l:l+1,B=d.createImageData(C,Sg);let i=0;const c=I.data,G=B.data;for(let W=0;W<Z;W++){const V=W<l?Sg:A;({srcPos:i}=wb({src:c,srcPos:i,dest:G,width:C,height:V,nonBlackColor:0})),d.putImageData(B,0,W*Sg)}}function $d(d,I){const g=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const C of g)d[C]!==void 0&&(I[C]=d[C]);d.setLineDash!==void 0&&(I.setLineDash(d.getLineDash()),I.lineDashOffset=d.lineDashOffset)}function MF(d){if(d.strokeStyle=d.fillStyle="#000000",d.fillRule="nonzero",d.globalAlpha=1,d.lineWidth=1,d.lineCap="butt",d.lineJoin="miter",d.miterLimit=10,d.globalCompositeOperation="source-over",d.font="10px sans-serif",d.setLineDash!==void 0&&(d.setLineDash([]),d.lineDashOffset=0),!cg){const{filter:I}=d;I!=="none"&&I!==""&&(d.filter="none")}}function _W(d,I){if(I)return!0;const g=x.singularValueDecompose2dScale(d);g[0]=Math.fround(g[0]),g[1]=Math.fround(g[1]);const C=Math.fround((globalThis.devicePixelRatio||1)*uA.PDF_TO_CSS_UNITS);return g[0]<=C&&g[1]<=C}const Db=["butt","round","square"],Xb=["miter","round","bevel"],tb={},$W={},jc=class jc{constructor(I,g,C,A,l,{optionalContentConfig:Z,markedContentStack:B=null},i,c){m(this,jA);this.ctx=I,this.current=new PW(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=g,this.objs=C,this.canvasFactory=A,this.filterFactory=l,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=B||[],this.optionalContentConfig=Z,this.cachedCanvases=new Jb(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=i,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=c,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(I,g=null){return typeof I=="string"?I.startsWith("g_")?this.commonObjs.get(I):this.objs.get(I):g}beginDrawing({transform:I,viewport:g,transparency:C=!1,background:A=null}){const l=this.ctx.canvas.width,Z=this.ctx.canvas.height,B=this.ctx.fillStyle;if(this.ctx.fillStyle=A||"#ffffff",this.ctx.fillRect(0,0,l,Z),this.ctx.fillStyle=B,C){const i=this.cachedCanvases.getCanvas("transparent",l,Z);this.compositeCtx=this.ctx,this.transparentCanvas=i.canvas,this.ctx=i.context,this.ctx.save(),this.ctx.transform(...yI(this.compositeCtx))}this.ctx.save(),MF(this.ctx),I&&(this.ctx.transform(...I),this.outputScaleX=I[0],this.outputScaleY=I[0]),this.ctx.transform(...g.transform),this.viewportScale=g.scale,this.baseTransform=yI(this.ctx)}executeOperatorList(I,g,C,A){const l=I.argsArray,Z=I.fnArray;let B=g||0;const i=l.length;if(i===B)return B;const c=i-B>rW&&typeof C=="function",G=c?Date.now()+nb:0;let W=0;const V=this.commonObjs,R=this.objs;let s;for(;;){if(A!==void 0&&B===A.nextBreakPoint)return A.breakIt(B,C),B;if(s=Z[B],s!==dC.dependency)this[s].apply(this,l[B]);else for(const Q of l[B]){const h=Q.startsWith("g_")?V:R;if(!h.has(Q))return h.get(Q,C),B}if(B++,B===i)return B;if(c&&++W>rW){if(Date.now()>G)return C(),B;W=0}}}endDrawing(){b(this,jA,RG).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const I of this._cachedBitmapsMap.values()){for(const g of I.values())typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement&&(g.width=g.height=0);I.clear()}this._cachedBitmapsMap.clear(),b(this,jA,sG).call(this)}_scaleImage(I,g){const C=I.width,A=I.height;let l=Math.max(Math.hypot(g[0],g[1]),1),Z=Math.max(Math.hypot(g[2],g[3]),1),B=C,i=A,c="prescale1",G,W;for(;l>2&&B>1||Z>2&&i>1;){let V=B,R=i;l>2&&B>1&&(V=B>=16384?Math.floor(B/2)-1||1:Math.ceil(B/2),l/=B/V),Z>2&&i>1&&(R=i>=16384?Math.floor(i/2)-1||1:Math.ceil(i)/2,Z/=i/R),G=this.cachedCanvases.getCanvas(c,V,R),W=G.context,W.clearRect(0,0,V,R),W.drawImage(I,0,0,B,i,0,0,V,R),I=G.canvas,B=V,i=R,c=c==="prescale1"?"prescale2":"prescale1"}return{img:I,paintWidth:B,paintHeight:i}}_createMaskCanvas(I){const g=this.ctx,{width:C,height:A}=I,l=this.current.fillColor,Z=this.current.patternFill,B=yI(g);let i,c,G,W;if((I.bitmap||I.data)&&I.count>1){const J=I.bitmap||I.data.buffer;c=JSON.stringify(Z?B:[B.slice(0,4),l]),i=this._cachedBitmapsMap.get(J),i||(i=new Map,this._cachedBitmapsMap.set(J,i));const y=i.get(c);if(y&&!Z){const z=Math.round(Math.min(B[0],B[2])+B[4]),u=Math.round(Math.min(B[1],B[3])+B[5]);return{canvas:y,offsetX:z,offsetY:u}}G=y}G||(W=this.cachedCanvases.getCanvas("maskCanvas",C,A),qW(W.context,I));let V=x.transform(B,[1/C,0,0,-1/A,0,0]);V=x.transform(V,[1,0,0,1,0,-A]);const[R,s,Q,h]=x.getAxialAlignedBoundingBox([0,0,C,A],V),N=Math.round(Q-R)||1,o=Math.round(h-s)||1,Y=this.cachedCanvases.getCanvas("fillCanvas",N,o),n=Y.context,a=R,w=s;n.translate(-a,-w),n.transform(...V),G||(G=this._scaleImage(W.canvas,fC(n)),G=G.img,i&&Z&&i.set(c,G)),n.imageSmoothingEnabled=_W(yI(n),I.interpolate),JF(n,G,0,0,G.width,G.height,0,0,C,A),n.globalCompositeOperation="source-in";const X=x.transform(fC(n),[1,0,0,1,-a,-w]);return n.fillStyle=Z?l.getPattern(g,this,X,mg.FILL):l,n.fillRect(0,0,C,A),i&&!Z&&(this.cachedCanvases.delete("fillCanvas"),i.set(c,Y.canvas)),{canvas:Y.canvas,offsetX:Math.round(a),offsetY:Math.round(w)}}setLineWidth(I){I!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=I,this.ctx.lineWidth=I}setLineCap(I){this.ctx.lineCap=Db[I]}setLineJoin(I){this.ctx.lineJoin=Xb[I]}setMiterLimit(I){this.ctx.miterLimit=I}setDash(I,g){const C=this.ctx;C.setLineDash!==void 0&&(C.setLineDash(I),C.lineDashOffset=g)}setRenderingIntent(I){}setFlatness(I){}setGState(I){for(const[g,C]of I)switch(g){case"LW":this.setLineWidth(C);break;case"LC":this.setLineCap(C);break;case"LJ":this.setLineJoin(C);break;case"ML":this.setMiterLimit(C);break;case"D":this.setDash(C[0],C[1]);break;case"RI":this.setRenderingIntent(C);break;case"FL":this.setFlatness(C);break;case"Font":this.setFont(C[0],C[1]);break;case"CA":this.current.strokeAlpha=C;break;case"ca":this.current.fillAlpha=C,this.ctx.globalAlpha=C;break;case"BM":this.ctx.globalCompositeOperation=C;break;case"SMask":this.current.activeSMask=C?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(C);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const I=this.inSMaskMode;this.current.activeSMask&&!I?this.beginSMaskMode():!this.current.activeSMask&&I&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const I=this.ctx.canvas.width,g=this.ctx.canvas.height,C="smaskGroupAt"+this.groupLevel,A=this.cachedCanvases.getCanvas(C,I,g);this.suspendedCtx=this.ctx,this.ctx=A.context;const l=this.ctx;l.setTransform(...yI(this.suspendedCtx)),$d(this.suspendedCtx,l),Sb(l,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),$d(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(I){if(!this.current.activeSMask)return;I?(I[0]=Math.floor(I[0]),I[1]=Math.floor(I[1]),I[2]=Math.ceil(I[2]),I[3]=Math.ceil(I[3])):I=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const g=this.current.activeSMask,C=this.suspendedCtx;this.composeSMask(C,g,this.ctx,I),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}composeSMask(I,g,C,A){const l=A[0],Z=A[1],B=A[2]-l,i=A[3]-Z;B===0||i===0||(this.genericComposeSMask(g.context,C,B,i,g.subtype,g.backdrop,g.transferMap,l,Z,g.offsetX,g.offsetY),I.save(),I.globalAlpha=1,I.globalCompositeOperation="source-over",I.setTransform(1,0,0,1,0,0),I.drawImage(C.canvas,0,0),I.restore())}genericComposeSMask(I,g,C,A,l,Z,B,i,c,G,W){let V=I.canvas,R=i-G,s=c-W;if(Z){if(R<0||s<0||R+C>V.width||s+A>V.height){const h=this.cachedCanvases.getCanvas("maskExtension",C,A),N=h.context;N.drawImage(V,-R,-s),Z.some(o=>o!==0)&&(N.globalCompositeOperation="destination-atop",N.fillStyle=x.makeHexColor(...Z),N.fillRect(0,0,C,A),N.globalCompositeOperation="source-over"),V=h.canvas,R=s=0}else if(Z.some(h=>h!==0)){I.save(),I.globalAlpha=1,I.setTransform(1,0,0,1,0,0);const h=new Path2D;h.rect(R,s,C,A),I.clip(h),I.globalCompositeOperation="destination-atop",I.fillStyle=x.makeHexColor(...Z),I.fillRect(R,s,C,A),I.restore()}}g.save(),g.globalAlpha=1,g.setTransform(1,0,0,1,0,0),l==="Alpha"&&B?g.filter=this.filterFactory.addAlphaFilter(B):l==="Luminosity"&&(g.filter=this.filterFactory.addLuminosityFilter(B));const Q=new Path2D;Q.rect(i,c,C,A),g.clip(Q),g.globalCompositeOperation="destination-in",g.drawImage(V,R,s,C,A,i,c,C,A),g.restore()}save(){this.inSMaskMode?($d(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const I=this.current;this.stateStack.push(I),this.current=I.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),$d(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(I,g,C,A,l,Z){this.ctx.transform(I,g,C,A,l,Z),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(I,g,C){const A=this.ctx,l=this.current;let Z=l.x,B=l.y,i,c;const G=yI(A),W=G[0]===0&&G[3]===0||G[1]===0&&G[2]===0,V=W?C.slice(0):null;for(let R=0,s=0,Q=I.length;R<Q;R++)switch(I[R]|0){case dC.rectangle:Z=g[s++],B=g[s++];const h=g[s++],N=g[s++],o=Z+h,Y=B+N;A.moveTo(Z,B),h===0||N===0?A.lineTo(o,Y):(A.lineTo(o,B),A.lineTo(o,Y),A.lineTo(Z,Y)),W||l.updateRectMinMax(G,[Z,B,o,Y]),A.closePath();break;case dC.moveTo:Z=g[s++],B=g[s++],A.moveTo(Z,B),W||l.updatePathMinMax(G,Z,B);break;case dC.lineTo:Z=g[s++],B=g[s++],A.lineTo(Z,B),W||l.updatePathMinMax(G,Z,B);break;case dC.curveTo:i=Z,c=B,Z=g[s+4],B=g[s+5],A.bezierCurveTo(g[s],g[s+1],g[s+2],g[s+3],Z,B),l.updateCurvePathMinMax(G,i,c,g[s],g[s+1],g[s+2],g[s+3],Z,B,V),s+=6;break;case dC.curveTo2:i=Z,c=B,A.bezierCurveTo(Z,B,g[s],g[s+1],g[s+2],g[s+3]),l.updateCurvePathMinMax(G,i,c,Z,B,g[s],g[s+1],g[s+2],g[s+3],V),Z=g[s+2],B=g[s+3],s+=4;break;case dC.curveTo3:i=Z,c=B,Z=g[s+2],B=g[s+3],A.bezierCurveTo(g[s],g[s+1],Z,B,Z,B),l.updateCurvePathMinMax(G,i,c,g[s],g[s+1],Z,B,Z,B,V),s+=4;break;case dC.closePath:A.closePath();break}W&&l.updateScalingPathMinMax(G,V),l.setCurrentPoint(Z,B)}closePath(){this.ctx.closePath()}stroke(I=!0){const g=this.ctx,C=this.current.strokeColor;g.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof C=="object"&&(C!=null&&C.getPattern)?(g.save(),g.strokeStyle=C.getPattern(g,this,fC(g),mg.STROKE),this.rescaleAndStroke(!1),g.restore()):this.rescaleAndStroke(!0)),I&&this.consumePath(this.current.getClippedPathBoundingBox()),g.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(I=!0){const g=this.ctx,C=this.current.fillColor,A=this.current.patternFill;let l=!1;A&&(g.save(),g.fillStyle=C.getPattern(g,this,fC(g),mg.FILL),l=!0);const Z=this.current.getClippedPathBoundingBox();this.contentVisible&&Z!==null&&(this.pendingEOFill?(g.fill("evenodd"),this.pendingEOFill=!1):g.fill()),l&&g.restore(),I&&this.consumePath(Z)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=tb}eoClip(){this.pendingClip=$W}beginText(){this.current.textMatrix=MW,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const I=this.pendingTextPaths,g=this.ctx;if(I===void 0){g.beginPath();return}g.save(),g.beginPath();for(const C of I)g.setTransform(...C.transform),g.translate(C.x,C.y),C.addToPath(g,C.fontSize);g.restore(),g.clip(),g.beginPath(),delete this.pendingTextPaths}setCharSpacing(I){this.current.charSpacing=I}setWordSpacing(I){this.current.wordSpacing=I}setHScale(I){this.current.textHScale=I/100}setLeading(I){this.current.leading=-I}setFont(I,g){var G;const C=this.commonObjs.get(I),A=this.current;if(!C)throw new Error(`Can't find font for ${I}`);if(A.fontMatrix=C.fontMatrix||$i,(A.fontMatrix[0]===0||A.fontMatrix[3]===0)&&iI("Invalid font matrix for font "+I),g<0?(g=-g,A.fontDirection=-1):A.fontDirection=1,this.current.font=C,this.current.fontSize=g,C.isType3Font)return;const l=C.loadedName||"sans-serif",Z=((G=C.systemFontInfo)==null?void 0:G.css)||`"${l}", ${C.fallbackName}`;let B="normal";C.black?B="900":C.bold&&(B="bold");const i=C.italic?"italic":"normal";let c=g;g<xW?c=xW:g>OW&&(c=OW),this.current.fontSizeScale=g/c,this.ctx.font=`${i} ${B} ${c}px ${Z}`}setTextRenderingMode(I){this.current.textRenderingMode=I}setTextRise(I){this.current.textRise=I}moveText(I,g){this.current.x=this.current.lineX+=I,this.current.y=this.current.lineY+=g}setLeadingMoveText(I,g){this.setLeading(-g),this.moveText(I,g)}setTextMatrix(I,g,C,A,l,Z){this.current.textMatrix=[I,g,C,A,l,Z],this.current.textMatrixScale=Math.hypot(I,g),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(I,g,C,A){const l=this.ctx,Z=this.current,B=Z.font,i=Z.textRenderingMode,c=Z.fontSize/Z.fontSizeScale,G=i&Gg.FILL_STROKE_MASK,W=!!(i&Gg.ADD_TO_PATH_FLAG),V=Z.patternFill&&!B.missingFile;let R;(B.disableFontFace||W||V)&&(R=B.getPathGenerator(this.commonObjs,I)),B.disableFontFace||V?(l.save(),l.translate(g,C),l.beginPath(),R(l,c),A&&l.setTransform(...A),(G===Gg.FILL||G===Gg.FILL_STROKE)&&l.fill(),(G===Gg.STROKE||G===Gg.FILL_STROKE)&&l.stroke(),l.restore()):((G===Gg.FILL||G===Gg.FILL_STROKE)&&l.fillText(I,g,C),(G===Gg.STROKE||G===Gg.FILL_STROKE)&&l.strokeText(I,g,C)),W&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:yI(l),x:g,y:C,fontSize:c,addToPath:R})}get isFontSubpixelAAEnabled(){const{context:I}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);I.scale(1.5,1),I.fillText("I",0,10);const g=I.getImageData(0,0,10,10).data;let C=!1;for(let A=3;A<g.length;A+=4)if(g[A]>0&&g[A]<255){C=!0;break}return bI(this,"isFontSubpixelAAEnabled",C)}showText(I){const g=this.current,C=g.font;if(C.isType3Font)return this.showType3Text(I);const A=g.fontSize;if(A===0)return;const l=this.ctx,Z=g.fontSizeScale,B=g.charSpacing,i=g.wordSpacing,c=g.fontDirection,G=g.textHScale*c,W=I.length,V=C.vertical,R=V?1:-1,s=C.defaultVMetrics,Q=A*g.fontMatrix[0],h=g.textRenderingMode===Gg.FILL&&!C.disableFontFace&&!g.patternFill;l.save(),l.transform(...g.textMatrix),l.translate(g.x,g.y+g.textRise),c>0?l.scale(G,-1):l.scale(G,1);let N;if(g.patternFill){l.save();const w=g.fillColor.getPattern(l,this,fC(l),mg.FILL);N=yI(l),l.restore(),l.fillStyle=w}let o=g.lineWidth;const Y=g.textMatrixScale;if(Y===0||o===0){const w=g.textRenderingMode&Gg.FILL_STROKE_MASK;(w===Gg.STROKE||w===Gg.FILL_STROKE)&&(o=this.getSinglePixelWidth())}else o/=Y;if(Z!==1&&(l.scale(Z,Z),o/=Z),l.lineWidth=o,C.isInvalidPDFjsFont){const w=[];let X=0;for(const J of I)w.push(J.unicode),X+=J.width;l.fillText(w.join(""),0,0),g.x+=X*Q*G,l.restore(),this.compose();return}let n=0,a;for(a=0;a<W;++a){const w=I[a];if(typeof w=="number"){n+=R*w*A/1e3;continue}let X=!1;const J=(w.isSpace?i:0)+B,y=w.fontChar,z=w.accent;let u,II,_=w.width;if(V){const FI=w.vmetric||s,RI=-(w.vmetric?FI[1]:_*.5)*Q,O=FI[2]*Q;_=FI?-FI[0]:_,u=RI/Z,II=(n+O)/Z}else u=n/Z,II=0;if(C.remeasure&&_>0){const FI=l.measureText(y).width*1e3/A*Z;if(_<FI&&this.isFontSubpixelAAEnabled){const RI=_/FI;X=!0,l.save(),l.scale(RI,1),u/=RI}else _!==FI&&(u+=(_-FI)/2e3*A/Z)}if(this.contentVisible&&(w.isInFont||C.missingFile)){if(h&&!z)l.fillText(y,u,II);else if(this.paintChar(y,u,II,N),z){const FI=u+A*z.offset.x/Z,RI=II-A*z.offset.y/Z;this.paintChar(z.fontChar,FI,RI,N)}}const BI=V?_*Q-J*c:_*Q+J*c;n+=BI,X&&l.restore()}V?g.y-=n:g.x+=n*G,l.restore(),this.compose()}showType3Text(I){const g=this.ctx,C=this.current,A=C.font,l=C.fontSize,Z=C.fontDirection,B=A.vertical?1:-1,i=C.charSpacing,c=C.wordSpacing,G=C.textHScale*Z,W=C.fontMatrix||$i,V=I.length,R=C.textRenderingMode===Gg.INVISIBLE;let s,Q,h,N;if(!(R||l===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,g.save(),g.transform(...C.textMatrix),g.translate(C.x,C.y),g.scale(G,Z),s=0;s<V;++s){if(Q=I[s],typeof Q=="number"){N=B*Q*l/1e3,this.ctx.translate(N,0),C.x+=N*G;continue}const o=(Q.isSpace?c:0)+i,Y=A.charProcOperatorList[Q.operatorListId];if(!Y){iI(`Type3 character "${Q.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=Q,this.save(),g.scale(l,l),g.transform(...W),this.executeOperatorList(Y),this.restore()),h=x.applyTransform([Q.width,0],W)[0]*l+o,g.translate(h,0),C.x+=h*G}g.restore(),this.processingType3=null}}setCharWidth(I,g){}setCharWidthAndBounds(I,g,C,A,l,Z){this.ctx.rect(C,A,l-C,Z-A),this.ctx.clip(),this.endPath()}getColorN_Pattern(I){let g;if(I[0]==="TilingPattern"){const C=I[1],A=this.baseTransform||yI(this.ctx),l={createCanvasGraphics:Z=>new jc(Z,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};g=new hc(I,C,this.ctx,l,A)}else g=this._getPattern(I[1],I[2]);return g}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(I,g,C){const A=x.makeHexColor(I,g,C);this.ctx.strokeStyle=A,this.current.strokeColor=A}setFillRGBColor(I,g,C){const A=x.makeHexColor(I,g,C);this.ctx.fillStyle=A,this.current.fillColor=A,this.current.patternFill=!1}_getPattern(I,g=null){let C;return this.cachedPatterns.has(I)?C=this.cachedPatterns.get(I):(C=Yb(this.getObject(I)),this.cachedPatterns.set(I,C)),g&&(C.matrix=g),C}shadingFill(I){if(!this.contentVisible)return;const g=this.ctx;this.save();const C=this._getPattern(I);g.fillStyle=C.getPattern(g,this,fC(g),mg.SHADING);const A=fC(g);if(A){const{width:l,height:Z}=g.canvas,[B,i,c,G]=x.getAxialAlignedBoundingBox([0,0,l,Z],A);this.ctx.fillRect(B,i,c-B,G-i)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){aI("Should not call beginInlineImage")}beginImageData(){aI("Should not call beginImageData")}paintFormXObjectBegin(I,g){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),I&&this.transform(...I),this.baseTransform=yI(this.ctx),g)){const C=g[2]-g[0],A=g[3]-g[1];this.ctx.rect(g[0],g[1],C,A),this.current.updateRectMinMax(yI(this.ctx),g),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(I){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const g=this.ctx;I.isolated||mF("TODO: Support non-isolated groups."),I.knockout&&iI("Knockout groups not supported.");const C=yI(g);if(I.matrix&&g.transform(...I.matrix),!I.bbox)throw new Error("Bounding box is required.");let A=x.getAxialAlignedBoundingBox(I.bbox,yI(g));const l=[0,0,g.canvas.width,g.canvas.height];A=x.intersect(A,l)||[0,0,0,0];const Z=Math.floor(A[0]),B=Math.floor(A[1]),i=Math.max(Math.ceil(A[2])-Z,1),c=Math.max(Math.ceil(A[3])-B,1);this.current.startNewPathAndClipBox([0,0,i,c]);let G="groupAt"+this.groupLevel;I.smask&&(G+="_smask_"+this.smaskCounter++%2);const W=this.cachedCanvases.getCanvas(G,i,c),V=W.context;V.translate(-Z,-B),V.transform(...C),I.smask?this.smaskStack.push({canvas:W.canvas,context:V,offsetX:Z,offsetY:B,subtype:I.smask.subtype,backdrop:I.smask.backdrop,transferMap:I.smask.transferMap||null,startTransformInverse:null}):(g.setTransform(1,0,0,1,0,0),g.translate(Z,B),g.save()),$d(g,V),this.ctx=V,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(g),this.groupLevel++}endGroup(I){if(!this.contentVisible)return;this.groupLevel--;const g=this.ctx,C=this.groupStack.pop();if(this.ctx=C,this.ctx.imageSmoothingEnabled=!1,I.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const A=yI(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...A);const l=x.getAxialAlignedBoundingBox([0,0,g.canvas.width,g.canvas.height],A);this.ctx.drawImage(g.canvas,0,0),this.ctx.restore(),this.compose(l)}}beginAnnotation(I,g,C,A,l){if(b(this,jA,RG).call(this),MF(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),g){const Z=g[2]-g[0],B=g[3]-g[1];if(l&&this.annotationCanvasMap){C=C.slice(),C[4]-=g[0],C[5]-=g[1],g=g.slice(),g[0]=g[1]=0,g[2]=Z,g[3]=B;const[i,c]=x.singularValueDecompose2dScale(yI(this.ctx)),{viewportScale:G}=this,W=Math.ceil(Z*this.outputScaleX*G),V=Math.ceil(B*this.outputScaleY*G);this.annotationCanvas=this.canvasFactory.create(W,V);const{canvas:R,context:s}=this.annotationCanvas;this.annotationCanvasMap.set(I,R),this.annotationCanvas.savedCtx=this.ctx,this.ctx=s,this.ctx.save(),this.ctx.setTransform(i,0,0,-c,0,B*c),MF(this.ctx)}else MF(this.ctx),this.ctx.rect(g[0],g[1],Z,B),this.ctx.clip(),this.endPath()}this.current=new PW(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...C),this.transform(...A)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),b(this,jA,sG).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(I){if(!this.contentVisible)return;const g=I.count;I=this.getObject(I.data,I),I.count=g;const C=this.ctx,A=this.processingType3;if(A&&(A.compiled===void 0&&(A.compiled=Mb(I)),A.compiled)){A.compiled(C);return}const l=this._createMaskCanvas(I),Z=l.canvas;C.save(),C.setTransform(1,0,0,1,0,0),C.drawImage(Z,l.offsetX,l.offsetY),C.restore(),this.compose()}paintImageMaskXObjectRepeat(I,g,C=0,A=0,l,Z){if(!this.contentVisible)return;I=this.getObject(I.data,I);const B=this.ctx;B.save();const i=yI(B);B.transform(g,C,A,l,0,0);const c=this._createMaskCanvas(I);B.setTransform(1,0,0,1,c.offsetX-i[4],c.offsetY-i[5]);for(let G=0,W=Z.length;G<W;G+=2){const V=x.transform(i,[g,C,A,l,Z[G],Z[G+1]]),[R,s]=x.applyTransform([0,0],V);B.drawImage(c.canvas,R,s)}B.restore(),this.compose()}paintImageMaskXObjectGroup(I){if(!this.contentVisible)return;const g=this.ctx,C=this.current.fillColor,A=this.current.patternFill;for(const l of I){const{data:Z,width:B,height:i,transform:c}=l,G=this.cachedCanvases.getCanvas("maskCanvas",B,i),W=G.context;W.save();const V=this.getObject(Z,l);qW(W,V),W.globalCompositeOperation="source-in",W.fillStyle=A?C.getPattern(W,this,fC(g),mg.FILL):C,W.fillRect(0,0,B,i),W.restore(),g.save(),g.transform(...c),g.scale(1,-1),JF(g,G.canvas,0,0,B,i,0,-1,1,1),g.restore()}this.compose()}paintImageXObject(I){if(!this.contentVisible)return;const g=this.getObject(I);if(!g){iI("Dependent image isn't ready yet");return}this.paintInlineImageXObject(g)}paintImageXObjectRepeat(I,g,C,A){if(!this.contentVisible)return;const l=this.getObject(I);if(!l){iI("Dependent image isn't ready yet");return}const Z=l.width,B=l.height,i=[];for(let c=0,G=A.length;c<G;c+=2)i.push({transform:[g,0,0,C,A[c],A[c+1]],x:0,y:0,w:Z,h:B});this.paintInlineImageXObjectGroup(l,i)}applyTransferMapsToCanvas(I){return this.current.transferMaps!=="none"&&(I.filter=this.current.transferMaps,I.drawImage(I.canvas,0,0),I.filter="none"),I.canvas}applyTransferMapsToBitmap(I){if(this.current.transferMaps==="none")return I.bitmap;const{bitmap:g,width:C,height:A}=I,l=this.cachedCanvases.getCanvas("inlineImage",C,A),Z=l.context;return Z.filter=this.current.transferMaps,Z.drawImage(g,0,0),Z.filter="none",l.canvas}paintInlineImageXObject(I){if(!this.contentVisible)return;const g=I.width,C=I.height,A=this.ctx;if(this.save(),!cg){const{filter:B}=A;B!=="none"&&B!==""&&(A.filter="none")}A.scale(1/g,-1/C);let l;if(I.bitmap)l=this.applyTransferMapsToBitmap(I);else if(typeof HTMLElement=="function"&&I instanceof HTMLElement||!I.data)l=I;else{const i=this.cachedCanvases.getCanvas("inlineImage",g,C).context;fW(i,I),l=this.applyTransferMapsToCanvas(i)}const Z=this._scaleImage(l,fC(A));A.imageSmoothingEnabled=_W(yI(A),I.interpolate),JF(A,Z.img,0,0,Z.paintWidth,Z.paintHeight,0,-C,g,C),this.compose(),this.restore()}paintInlineImageXObjectGroup(I,g){if(!this.contentVisible)return;const C=this.ctx;let A;if(I.bitmap)A=I.bitmap;else{const l=I.width,Z=I.height,i=this.cachedCanvases.getCanvas("inlineImage",l,Z).context;fW(i,I),A=this.applyTransferMapsToCanvas(i)}for(const l of g)C.save(),C.transform(...l.transform),C.scale(1,-1),JF(C,A,l.x,l.y,l.w,l.h,0,-1,1,1),C.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(I){}markPointProps(I,g){}beginMarkedContent(I){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(I,g){I==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(g)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(I){const g=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(I);const C=this.ctx;this.pendingClip&&(g||(this.pendingClip===$W?C.clip("evenodd"):C.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),C.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const I=yI(this.ctx);if(I[1]===0&&I[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(I[0]),Math.abs(I[3]));else{const g=Math.abs(I[0]*I[3]-I[2]*I[1]),C=Math.hypot(I[0],I[2]),A=Math.hypot(I[1],I[3]);this._cachedGetSinglePixelWidth=Math.max(C,A)/g}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:I}=this.current,{a:g,b:C,c:A,d:l}=this.ctx.getTransform();let Z,B;if(C===0&&A===0){const i=Math.abs(g),c=Math.abs(l);if(i===c)if(I===0)Z=B=1/i;else{const G=i*I;Z=B=G<1?1/G:1}else if(I===0)Z=1/i,B=1/c;else{const G=i*I,W=c*I;Z=G<1?1/G:1,B=W<1?1/W:1}}else{const i=Math.abs(g*l-C*A),c=Math.hypot(g,C),G=Math.hypot(A,l);if(I===0)Z=G/i,B=c/i;else{const W=I*i;Z=G>W?G/W:1,B=c>W?c/W:1}}this._cachedScaleForStroking[0]=Z,this._cachedScaleForStroking[1]=B}return this._cachedScaleForStroking}rescaleAndStroke(I){const{ctx:g}=this,{lineWidth:C}=this.current,[A,l]=this.getScaleForStroking();if(g.lineWidth=C||1,A===1&&l===1){g.stroke();return}const Z=g.getLineDash();if(I&&g.save(),g.scale(A,l),Z.length>0){const B=Math.max(A,l);g.setLineDash(Z.map(i=>i/B)),g.lineDashOffset/=B}g.stroke(),I&&g.restore()}isContentVisible(){for(let I=this.markedContentStack.length-1;I>=0;I--)if(!this.markedContentStack[I].visible)return!1;return!0}};jA=new WeakSet,RG=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},sG=function(){if(this.pageColors){const I=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(I!=="none"){const g=this.ctx.filter;this.ctx.filter=I,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=g}}};let JZ=jc;for(const d in dC)JZ.prototype[d]!==void 0&&(JZ.prototype[dC[d]]=JZ.prototype[d]);class qC{static get workerPort(){return F(this,H0)}static set workerPort(I){if(!(typeof Worker<"u"&&I instanceof Worker)&&I!==null)throw new Error("Invalid `workerPort` type.");U(this,H0,I)}static get workerSrc(){return F(this,e0)}static set workerSrc(I){if(typeof I!="string")throw new Error("Invalid `workerSrc` type.");U(this,e0,I)}}H0=new WeakMap,e0=new WeakMap,m(qC,H0,null),m(qC,e0,"");const DF={UNKNOWN:0,DATA:1,ERROR:2},LI={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function eg(d){switch(d instanceof Error||typeof d=="object"&&d!==null||aI('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),d.name){case"AbortException":return new Vl(d.message);case"MissingPDFException":return new Wl(d.message);case"PasswordException":return new Cc(d.message,d.code);case"UnexpectedResponseException":return new QF(d.message,d.status);case"UnknownErrorException":return new Ac(d.message,d.details);default:return new Ac(d.message,d.toString())}}class I0{constructor(I,g,C){m(this,yC);this.sourceName=I,this.targetName=g,this.comObj=C,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=A=>{const l=A.data;if(l.targetName!==this.sourceName)return;if(l.stream){b(this,yC,wR).call(this,l);return}if(l.callback){const B=l.callbackId,i=this.callbackCapabilities[B];if(!i)throw new Error(`Cannot resolve callback ${B}`);if(delete this.callbackCapabilities[B],l.callback===DF.DATA)i.resolve(l.data);else if(l.callback===DF.ERROR)i.reject(eg(l.reason));else throw new Error("Unexpected callback case");return}const Z=this.actionHandler[l.action];if(!Z)throw new Error(`Unknown action from worker: ${l.action}`);if(l.callbackId){const B=this.sourceName,i=l.sourceName;new Promise(function(c){c(Z(l.data))}).then(function(c){C.postMessage({sourceName:B,targetName:i,callback:DF.DATA,callbackId:l.callbackId,data:c})},function(c){C.postMessage({sourceName:B,targetName:i,callback:DF.ERROR,callbackId:l.callbackId,reason:eg(c)})});return}if(l.streamId){b(this,yC,YR).call(this,l);return}Z(l.data)},C.addEventListener("message",this._onComObjOnMessage)}on(I,g){const C=this.actionHandler;if(C[I])throw new Error(`There is already an actionName called "${I}"`);C[I]=g}send(I,g,C){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,data:g},C)}sendWithPromise(I,g,C){const A=this.callbackId++,l=Promise.withResolvers();this.callbackCapabilities[A]=l;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,callbackId:A,data:g},C)}catch(Z){l.reject(Z)}return l.promise}sendWithStream(I,g,C,A){const l=this.streamId++,Z=this.sourceName,B=this.targetName,i=this.comObj;return new ReadableStream({start:c=>{const G=Promise.withResolvers();return this.streamControllers[l]={controller:c,startCall:G,pullCall:null,cancelCall:null,isClosed:!1},i.postMessage({sourceName:Z,targetName:B,action:I,streamId:l,data:g,desiredSize:c.desiredSize},A),G.promise},pull:c=>{const G=Promise.withResolvers();return this.streamControllers[l].pullCall=G,i.postMessage({sourceName:Z,targetName:B,stream:LI.PULL,streamId:l,desiredSize:c.desiredSize}),G.promise},cancel:c=>{OI(c instanceof Error,"cancel must have a valid reason");const G=Promise.withResolvers();return this.streamControllers[l].cancelCall=G,this.streamControllers[l].isClosed=!0,i.postMessage({sourceName:Z,targetName:B,stream:LI.CANCEL,streamId:l,reason:eg(c)}),G.promise}},C)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}yC=new WeakSet,YR=function(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this,B=this.actionHandler[I.action],i={enqueue(c,G=1,W){if(this.isCancelled)return;const V=this.desiredSize;this.desiredSize-=G,V>0&&this.desiredSize<=0&&(this.sinkCapability=Promise.withResolvers(),this.ready=this.sinkCapability.promise),l.postMessage({sourceName:C,targetName:A,stream:LI.ENQUEUE,streamId:g,chunk:c},W)},close(){this.isCancelled||(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:LI.CLOSE,streamId:g}),delete Z.streamSinks[g])},error(c){OI(c instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:LI.ERROR,streamId:g,reason:eg(c)}))},sinkCapability:Promise.withResolvers(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:I.desiredSize,ready:null};i.sinkCapability.resolve(),i.ready=i.sinkCapability.promise,this.streamSinks[g]=i,new Promise(function(c){c(B(I.data,i))}).then(function(){l.postMessage({sourceName:C,targetName:A,stream:LI.START_COMPLETE,streamId:g,success:!0})},function(c){l.postMessage({sourceName:C,targetName:A,stream:LI.START_COMPLETE,streamId:g,reason:eg(c)})})},wR=function(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this.streamControllers[g],B=this.streamSinks[g];switch(I.stream){case LI.START_COMPLETE:I.success?Z.startCall.resolve():Z.startCall.reject(eg(I.reason));break;case LI.PULL_COMPLETE:I.success?Z.pullCall.resolve():Z.pullCall.reject(eg(I.reason));break;case LI.PULL:if(!B){l.postMessage({sourceName:C,targetName:A,stream:LI.PULL_COMPLETE,streamId:g,success:!0});break}B.desiredSize<=0&&I.desiredSize>0&&B.sinkCapability.resolve(),B.desiredSize=I.desiredSize,new Promise(function(i){var c;i((c=B.onPull)==null?void 0:c.call(B))}).then(function(){l.postMessage({sourceName:C,targetName:A,stream:LI.PULL_COMPLETE,streamId:g,success:!0})},function(i){l.postMessage({sourceName:C,targetName:A,stream:LI.PULL_COMPLETE,streamId:g,reason:eg(i)})});break;case LI.ENQUEUE:if(OI(Z,"enqueue should have stream controller"),Z.isClosed)break;Z.controller.enqueue(I.chunk);break;case LI.CLOSE:if(OI(Z,"close should have stream controller"),Z.isClosed)break;Z.isClosed=!0,Z.controller.close(),b(this,yC,Vi).call(this,Z,g);break;case LI.ERROR:OI(Z,"error should have stream controller"),Z.controller.error(eg(I.reason)),b(this,yC,Vi).call(this,Z,g);break;case LI.CANCEL_COMPLETE:I.success?Z.cancelCall.resolve():Z.cancelCall.reject(eg(I.reason)),b(this,yC,Vi).call(this,Z,g);break;case LI.CANCEL:if(!B)break;new Promise(function(i){var c;i((c=B.onCancel)==null?void 0:c.call(B,eg(I.reason)))}).then(function(){l.postMessage({sourceName:C,targetName:A,stream:LI.CANCEL_COMPLETE,streamId:g,success:!0})},function(i){l.postMessage({sourceName:C,targetName:A,stream:LI.CANCEL_COMPLETE,streamId:g,reason:eg(i)})}),B.sinkCapability.reject(eg(I.reason)),B.isCancelled=!0,delete this.streamSinks[g];break;default:throw new Error("Unexpected stream case")}},Vi=async function(I,g){var C,A,l;await Promise.allSettled([(C=I.startCall)==null?void 0:C.promise,(A=I.pullCall)==null?void 0:A.promise,(l=I.cancelCall)==null?void 0:l.promise]),delete this.streamControllers[g]};class yb{constructor({parsedData:I,rawData:g}){m(this,pl);m(this,u0);U(this,pl,I),U(this,u0,g)}getRaw(){return F(this,u0)}get(I){return F(this,pl).get(I)??null}getAll(){return lc(F(this,pl))}has(I){return F(this,pl).has(I)}}pl=new WeakMap,u0=new WeakMap;const pA=Symbol("INTERNAL");class Hb{constructor(I,{name:g,intent:C,usage:A}){m(this,p0,!1);m(this,k0,!1);m(this,K0,!1);m(this,OZ,!0);U(this,p0,!!(I&Pg.DISPLAY)),U(this,k0,!!(I&Pg.PRINT)),this.name=g,this.intent=C,this.usage=A}get visible(){if(F(this,K0))return F(this,OZ);if(!F(this,OZ))return!1;const{print:I,view:g}=this.usage;return F(this,p0)?(g==null?void 0:g.viewState)!=="OFF":F(this,k0)?(I==null?void 0:I.printState)!=="OFF":!0}_setVisible(I,g,C=!1){I!==pA&&aI("Internal method `_setVisible` called."),U(this,K0,C),U(this,OZ,g)}}p0=new WeakMap,k0=new WeakMap,K0=new WeakMap,OZ=new WeakMap;class eb{constructor(I,g=Pg.DISPLAY){m(this,T0);m(this,xA,null);m(this,YI,new Map);m(this,rZ,null);m(this,vZ,null);if(this.renderingIntent=g,this.name=null,this.creator=null,I!==null){this.name=I.name,this.creator=I.creator,U(this,vZ,I.order);for(const C of I.groups)F(this,YI).set(C.id,new Hb(g,C));if(I.baseState==="OFF")for(const C of F(this,YI).values())C._setVisible(pA,!1);for(const C of I.on)F(this,YI).get(C)._setVisible(pA,!0);for(const C of I.off)F(this,YI).get(C)._setVisible(pA,!1);U(this,rZ,this.getHash())}}isVisible(I){if(F(this,YI).size===0)return!0;if(!I)return mF("Optional content group not defined."),!0;if(I.type==="OCG")return F(this,YI).has(I.id)?F(this,YI).get(I.id).visible:(iI(`Optional content group not found: ${I.id}`),!0);if(I.type==="OCMD"){if(I.expression)return b(this,T0,UG).call(this,I.expression);if(!I.policy||I.policy==="AnyOn"){for(const g of I.ids){if(!F(this,YI).has(g))return iI(`Optional content group not found: ${g}`),!0;if(F(this,YI).get(g).visible)return!0}return!1}else if(I.policy==="AllOn"){for(const g of I.ids){if(!F(this,YI).has(g))return iI(`Optional content group not found: ${g}`),!0;if(!F(this,YI).get(g).visible)return!1}return!0}else if(I.policy==="AnyOff"){for(const g of I.ids){if(!F(this,YI).has(g))return iI(`Optional content group not found: ${g}`),!0;if(!F(this,YI).get(g).visible)return!0}return!1}else if(I.policy==="AllOff"){for(const g of I.ids){if(!F(this,YI).has(g))return iI(`Optional content group not found: ${g}`),!0;if(F(this,YI).get(g).visible)return!1}return!0}return iI(`Unknown optional content policy ${I.policy}.`),!0}return iI(`Unknown group type ${I.type}.`),!0}setVisibility(I,g=!0){const C=F(this,YI).get(I);if(!C){iI(`Optional content group not found: ${I}`);return}C._setVisible(pA,!!g,!0),U(this,xA,null)}setOCGState({state:I,preserveRB:g}){let C;for(const A of I){switch(A){case"ON":case"OFF":case"Toggle":C=A;continue}const l=F(this,YI).get(A);if(l)switch(C){case"ON":l._setVisible(pA,!0);break;case"OFF":l._setVisible(pA,!1);break;case"Toggle":l._setVisible(pA,!l.visible);break}}U(this,xA,null)}get hasInitialVisibility(){return F(this,rZ)===null||this.getHash()===F(this,rZ)}getOrder(){return F(this,YI).size?F(this,vZ)?F(this,vZ).slice():[...F(this,YI).keys()]:null}getGroups(){return F(this,YI).size>0?lc(F(this,YI)):null}getGroup(I){return F(this,YI).get(I)||null}getHash(){if(F(this,xA)!==null)return F(this,xA);const I=new zW;for(const[g,C]of F(this,YI))I.update(`${g}:${C.visible}`);return U(this,xA,I.hexdigest())}}xA=new WeakMap,YI=new WeakMap,rZ=new WeakMap,vZ=new WeakMap,T0=new WeakSet,UG=function(I){const g=I.length;if(g<2)return!0;const C=I[0];for(let A=1;A<g;A++){const l=I[A];let Z;if(Array.isArray(l))Z=b(this,T0,UG).call(this,l);else if(F(this,YI).has(l))Z=F(this,YI).get(l).visible;else return iI(`Optional content group not found: ${l}`),!0;switch(C){case"And":if(!Z)return!1;break;case"Or":if(Z)return!0;break;case"Not":return!Z;default:return!0}}return C==="And"};class ub{constructor(I,{disableRange:g=!1,disableStream:C=!1}){OI(I,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');const{length:A,initialData:l,progressiveDone:Z,contentDispositionFilename:B}=I;if(this._queuedChunks=[],this._progressiveDone=Z,this._contentDispositionFilename=B,(l==null?void 0:l.length)>0){const i=l instanceof Uint8Array&&l.byteLength===l.buffer.byteLength?l.buffer:new Uint8Array(l).buffer;this._queuedChunks.push(i)}this._pdfDataRangeTransport=I,this._isStreamingSupported=!C,this._isRangeSupported=!g,this._contentLength=A,this._fullRequestReader=null,this._rangeReaders=[],I.addRangeListener((i,c)=>{this._onReceiveData({begin:i,chunk:c})}),I.addProgressListener((i,c)=>{this._onProgress({loaded:i,total:c})}),I.addProgressiveReadListener(i=>{this._onReceiveData({chunk:i})}),I.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),I.transportReady()}_onReceiveData({begin:I,chunk:g}){const C=g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength?g.buffer:new Uint8Array(g).buffer;if(I===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(C):this._queuedChunks.push(C);else{const A=this._rangeReaders.some(function(l){return l._begin!==I?!1:(l._enqueue(C),!0)});OI(A,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var I;return((I=this._fullRequestReader)==null?void 0:I._loaded)??0}_onProgress(I){var g,C,A,l;I.total===void 0?(C=(g=this._rangeReaders[0])==null?void 0:g.onProgress)==null||C.call(g,{loaded:I.loaded}):(l=(A=this._fullRequestReader)==null?void 0:A.onProgress)==null||l.call(A,{loaded:I.loaded,total:I.total})}_onProgressiveDone(){var I;(I=this._fullRequestReader)==null||I.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(I){const g=this._rangeReaders.indexOf(I);g>=0&&this._rangeReaders.splice(g,1)}getFullReader(){OI(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const I=this._queuedChunks;return this._queuedChunks=null,new pb(this,I,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new kb(this,I,g);return this._pdfDataRangeTransport.requestDataRange(I,g),this._rangeReaders.push(C),C}cancelAllRequests(I){var g;(g=this._fullRequestReader)==null||g.cancel(I);for(const C of this._rangeReaders.slice(0))C.cancel(I);this._pdfDataRangeTransport.abort()}}class pb{constructor(I,g,C=!1,A=null){this._stream=I,this._done=C||!1,this._filename=Gc(A)?A:null,this._queuedChunks=g||[],this._loaded=0;for(const l of this._queuedChunks)this._loaded+=l.byteLength;this._requests=[],this._headersReady=Promise.resolve(),I._fullRequestReader=this,this.onProgress=null}_enqueue(I){this._done||(this._requests.length>0?this._requests.shift().resolve({value:I,done:!1}):this._queuedChunks.push(I),this._loaded+=I.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class kb{constructor(I,g,C){this._stream=I,this._begin=g,this._end=C,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(I){if(!this._done){if(this._requests.length===0)this._queuedChunk=I;else{this._requests.shift().resolve({value:I,done:!1});for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const g=this._queuedChunk;return this._queuedChunk=null,{value:g,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}function Kb(d){let I=!0,g=C("filename\\*","i").exec(d);if(g){g=g[1];let G=B(g);return G=unescape(G),G=i(G),G=c(G),l(G)}if(g=Z(d),g){const G=c(g);return l(G)}if(g=C("filename","i").exec(d),g){g=g[1];let G=B(g);return G=c(G),l(G)}function C(G,W){return new RegExp("(?:^|;)\\s*"+G+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',W)}function A(G,W){if(G){if(!/^[\x00-\xFF]+$/.test(W))return W;try{const V=new TextDecoder(G,{fatal:!0}),R=NF(W);W=V.decode(R),I=!1}catch{}}return W}function l(G){return I&&/[\x80-\xff]/.test(G)&&(G=A("utf-8",G),I&&(G=A("iso-8859-1",G))),G}function Z(G){const W=[];let V;const R=C("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(V=R.exec(G))!==null;){let[,Q,h,N]=V;if(Q=parseInt(Q,10),Q in W){if(Q===0)break;continue}W[Q]=[h,N]}const s=[];for(let Q=0;Q<W.length&&Q in W;++Q){let[h,N]=W[Q];N=B(N),h&&(N=unescape(N),Q===0&&(N=i(N))),s.push(N)}return s.join("")}function B(G){if(G.startsWith('"')){const W=G.slice(1).split('\\"');for(let V=0;V<W.length;++V){const R=W[V].indexOf('"');R!==-1&&(W[V]=W[V].slice(0,R),W.length=V+1),W[V]=W[V].replaceAll(/\\(.)/g,"$1")}G=W.join('"')}return G}function i(G){const W=G.indexOf("'");if(W===-1)return G;const V=G.slice(0,W),s=G.slice(W+1).replace(/^[^']*'/,"");return A(V,s)}function c(G){return!G.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(G)?G:G.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(W,V,R,s){if(R==="q"||R==="Q")return s=s.replaceAll("_"," "),s=s.replaceAll(/=([0-9a-fA-F]{2})/g,function(Q,h){return String.fromCharCode(parseInt(h,16))}),A(V,s);try{s=atob(s)}catch{}return A(V,s)})}return""}function oc({getResponseHeader:d,isHttp:I,rangeChunkSize:g,disableRange:C}){const A={allowRangeRequests:!1,suggestedLength:void 0},l=parseInt(d("Content-Length"),10);return!Number.isInteger(l)||(A.suggestedLength=l,l<=2*g)||C||!I||d("Accept-Ranges")!=="bytes"||(d("Content-Encoding")||"identity")!=="identity"||(A.allowRangeRequests=!0),A}function ac(d){const I=d("Content-Disposition");if(I){let g=Kb(I);if(g.includes("%"))try{g=decodeURIComponent(g)}catch{}if(Gc(g))return g}return null}function XF(d,I){return d===404||d===0&&I.startsWith("file:")?new Wl('Missing PDF "'+I+'".'):new QF(`Unexpected server response (${d}) while retrieving PDF "${I}".`,d)}function IV(d){return d===200||d===206}function gV(d,I,g){return{method:"GET",headers:d,signal:g.signal,mode:"cors",credentials:I?"include":"same-origin",redirect:"follow"}}function CV(d){const I=new Headers;for(const g in d){const C=d[g];C!==void 0&&I.append(g,C)}return I}function AV(d){return d instanceof Uint8Array?d.buffer:d instanceof ArrayBuffer?d:(iI(`getArrayBuffer - unexpected data format: ${d}`),new Uint8Array(d).buffer)}class lV{constructor(I){this.source=I,this.isHttp=/^https?:/i.test(I.url),this.httpHeaders=this.isHttp&&I.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var I;return((I=this._fullRequestReader)==null?void 0:I._loaded)??0}getFullReader(){return OI(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new Tb(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new zb(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;(g=this._fullRequestReader)==null||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class Tb{constructor(I){this._stream=I,this._reader=null,this._loaded=0,this._filename=null;const g=I.source;this._withCredentials=g.withCredentials||!1,this._contentLength=g.length,this._headersCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange,this._headers=CV(this._stream.httpHeaders);const C=g.url;fetch(C,gV(this._headers,this._withCredentials,this._abortController)).then(A=>{if(!IV(A.status))throw XF(A.status,C);this._reader=A.body.getReader(),this._headersCapability.resolve();const l=i=>A.headers.get(i),{allowRangeRequests:Z,suggestedLength:B}=oc({getResponseHeader:l,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=Z,this._contentLength=B||this._contentLength,this._filename=ac(l),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new Vl("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;await this._headersCapability.promise;const{value:I,done:g}=await this._reader.read();return g?{value:I,done:g}:(this._loaded+=I.byteLength,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded,total:this._contentLength}),{value:AV(I),done:!1})}cancel(I){var g;(g=this._reader)==null||g.cancel(I),this._abortController.abort()}}class zb{constructor(I,g,C){this._stream=I,this._reader=null,this._loaded=0;const A=I.source;this._withCredentials=A.withCredentials||!1,this._readCapability=Promise.withResolvers(),this._isStreamingSupported=!A.disableStream,this._abortController=new AbortController,this._headers=CV(this._stream.httpHeaders),this._headers.append("Range",`bytes=${g}-${C-1}`);const l=A.url;fetch(l,gV(this._headers,this._withCredentials,this._abortController)).then(Z=>{if(!IV(Z.status))throw XF(Z.status,l);this._readCapability.resolve(),this._reader=Z.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;await this._readCapability.promise;const{value:I,done:g}=await this._reader.read();return g?{value:I,done:g}:(this._loaded+=I.byteLength,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded}),{value:AV(I),done:!1})}cancel(I){var g;(g=this._reader)==null||g.cancel(I),this._abortController.abort()}}const Yc=200,wc=206;function Lb(d){const I=d.response;return typeof I!="string"?I:NF(I).buffer}class Eb{constructor(I,g={}){this.url=I,this.isHttp=/^https?:/i.test(I),this.httpHeaders=this.isHttp&&g.httpHeaders||Object.create(null),this.withCredentials=g.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(I,g,C){const A={begin:I,end:g};for(const l in C)A[l]=C[l];return this.request(A)}requestFull(I){return this.request(I)}request(I){const g=new XMLHttpRequest,C=this.currXhrId++,A=this.pendingRequests[C]={xhr:g};g.open("GET",this.url),g.withCredentials=this.withCredentials;for(const l in this.httpHeaders){const Z=this.httpHeaders[l];Z!==void 0&&g.setRequestHeader(l,Z)}return this.isHttp&&"begin"in I&&"end"in I?(g.setRequestHeader("Range",`bytes=${I.begin}-${I.end-1}`),A.expectedStatus=wc):A.expectedStatus=Yc,g.responseType="arraybuffer",I.onError&&(g.onerror=function(l){I.onError(g.status)}),g.onreadystatechange=this.onStateChange.bind(this,C),g.onprogress=this.onProgress.bind(this,C),A.onHeadersReceived=I.onHeadersReceived,A.onDone=I.onDone,A.onError=I.onError,A.onProgress=I.onProgress,g.send(null),C}onProgress(I,g){var A;const C=this.pendingRequests[I];C&&((A=C.onProgress)==null||A.call(C,g))}onStateChange(I,g){var i,c,G;const C=this.pendingRequests[I];if(!C)return;const A=C.xhr;if(A.readyState>=2&&C.onHeadersReceived&&(C.onHeadersReceived(),delete C.onHeadersReceived),A.readyState!==4||!(I in this.pendingRequests))return;if(delete this.pendingRequests[I],A.status===0&&this.isHttp){(i=C.onError)==null||i.call(C,A.status);return}const l=A.status||Yc;if(!(l===Yc&&C.expectedStatus===wc)&&l!==C.expectedStatus){(c=C.onError)==null||c.call(C,A.status);return}const B=Lb(A);if(l===wc){const W=A.getResponseHeader("Content-Range"),V=/bytes (\d+)-(\d+)\/(\d+)/.exec(W);C.onDone({begin:parseInt(V[1],10),chunk:B})}else B?C.onDone({begin:0,chunk:B}):(G=C.onError)==null||G.call(C,A.status)}getRequestXhr(I){return this.pendingRequests[I].xhr}isPendingRequest(I){return I in this.pendingRequests}abortRequest(I){const g=this.pendingRequests[I].xhr;delete this.pendingRequests[I],g.abort()}}class jb{constructor(I){this._source=I,this._manager=new Eb(I.url,{httpHeaders:I.httpHeaders,withCredentials:I.withCredentials}),this._rangeChunkSize=I.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(I){const g=this._rangeRequestReaders.indexOf(I);g>=0&&this._rangeRequestReaders.splice(g,1)}getFullReader(){return OI(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new xb(this._manager,this._source),this._fullRequestReader}getRangeReader(I,g){const C=new Ob(this._manager,I,g);return C.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;(g=this._fullRequestReader)==null||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class xb{constructor(I,g){this._manager=I;const C={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=g.url,this._fullRequestId=I.requestFull(C),this._headersReceivedCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._contentLength=g.length,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const I=this._fullRequestId,g=this._manager.getRequestXhr(I),C=Z=>g.getResponseHeader(Z),{allowRangeRequests:A,suggestedLength:l}=oc({getResponseHeader:C,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});A&&(this._isRangeSupported=!0),this._contentLength=l||this._contentLength,this._filename=ac(C),this._isRangeSupported&&this._manager.abortRequest(I),this._headersReceivedCapability.resolve()}_onDone(I){if(I&&(this._requests.length>0?this._requests.shift().resolve({value:I.chunk,done:!1}):this._cachedChunks.push(I.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(I){this._storedError=XF(I,this._url),this._headersReceivedCapability.reject(this._storedError);for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(I){var g;(g=this.onProgress)==null||g.call(this,{loaded:I.loaded,total:I.lengthComputable?I.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0,this._headersReceivedCapability.reject(I);for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class Ob{constructor(I,g,C){this._manager=I;const A={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=I.url,this._requestId=I.requestRange(g,C,A),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var I;(I=this.onClosed)==null||I.call(this,this)}_onDone(I){const g=I.chunk;this._requests.length>0?this._requests.shift().resolve({value:g,done:!1}):this._queuedChunk=g,this._done=!0;for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(I){this._storedError=XF(I,this._url);for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(I){var g;this.isStreamingSupported||(g=this.onProgress)==null||g.call(this,{loaded:I.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const g=this._queuedChunk;return this._queuedChunk=null,{value:g,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}const ZV=/^file:\/\/\/[a-zA-Z]:\//;function rb(d){const I=nC.get("url"),g=I.parse(d);return g.protocol==="file:"||g.host?g:/^[a-z]:[/\\]/i.test(d)?I.parse(`file:///${d}`):(g.host||(g.protocol="file:"),g)}class vb{constructor(I){this.source=I,this.url=rb(I.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&I.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var I;return((I=this._fullRequestReader)==null?void 0:I._loaded)??0}getFullReader(){return OI(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new qb(this):new Pb(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=this.isFsUrl?new _b(this,I,g):new fb(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){var g;(g=this._fullRequestReader)==null||g.cancel(I);for(const C of this._rangeRequestReaders.slice(0))C.cancel(I)}}class dV{constructor(I){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null;const g=I.source;this._contentLength=g.length,this._loaded=0,this._filename=null,this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange,this._readableStream=null,this._readCapability=Promise.withResolvers(),this._headersCapability=Promise.withResolvers()}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const I=this._readableStream.read();return I===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=I.length,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(I).buffer,done:!1})}cancel(I){if(!this._readableStream){this._error(I);return}this._readableStream.destroy(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",()=>{this._readCapability.resolve()}),I.on("end",()=>{I.destroy(),this._done=!0,this._readCapability.resolve()}),I.on("error",g=>{this._error(g)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new Vl("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class BV{constructor(I){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=Promise.withResolvers();const g=I.source;this._isStreamingSupported=!g.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const I=this._readableStream.read();return I===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=I.length,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded}),{value:new Uint8Array(I).buffer,done:!1})}cancel(I){if(!this._readableStream){this._error(I);return}this._readableStream.destroy(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",()=>{this._readCapability.resolve()}),I.on("end",()=>{I.destroy(),this._done=!0,this._readCapability.resolve()}),I.on("error",g=>{this._error(g)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function tF(d,I){return{protocol:d.protocol,auth:d.auth,host:d.hostname,port:d.port,path:d.path,method:"GET",headers:I}}class Pb extends dV{constructor(I){super(I);const g=C=>{if(C.statusCode===404){const B=new Wl(`Missing PDF "${this._url}".`);this._storedError=B,this._headersCapability.reject(B);return}this._headersCapability.resolve(),this._setReadableStream(C);const A=B=>this._readableStream.headers[B.toLowerCase()],{allowRangeRequests:l,suggestedLength:Z}=oc({getResponseHeader:A,isHttp:I.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=l,this._contentLength=Z||this._contentLength,this._filename=ac(A)};if(this._request=null,this._url.protocol==="http:"){const C=nC.get("http");this._request=C.request(tF(this._url,I.httpHeaders),g)}else{const C=nC.get("https");this._request=C.request(tF(this._url,I.httpHeaders),g)}this._request.on("error",C=>{this._storedError=C,this._headersCapability.reject(C)}),this._request.end()}}class fb extends BV{constructor(I,g,C){super(I),this._httpHeaders={};for(const l in I.httpHeaders){const Z=I.httpHeaders[l];Z!==void 0&&(this._httpHeaders[l]=Z)}this._httpHeaders.Range=`bytes=${g}-${C-1}`;const A=l=>{if(l.statusCode===404){const Z=new Wl(`Missing PDF "${this._url}".`);this._storedError=Z;return}this._setReadableStream(l)};if(this._request=null,this._url.protocol==="http:"){const l=nC.get("http");this._request=l.request(tF(this._url,this._httpHeaders),A)}else{const l=nC.get("https");this._request=l.request(tF(this._url,this._httpHeaders),A)}this._request.on("error",l=>{this._storedError=l}),this._request.end()}}class qb extends dV{constructor(I){super(I);let g=decodeURIComponent(this._url.path);ZV.test(this._url.href)&&(g=g.replace(/^\//,""));const C=nC.get("fs");C.promises.lstat(g).then(A=>{this._contentLength=A.size,this._setReadableStream(C.createReadStream(g)),this._headersCapability.resolve()},A=>{A.code==="ENOENT"&&(A=new Wl(`Missing PDF "${g}".`)),this._storedError=A,this._headersCapability.reject(A)})}}class _b extends BV{constructor(I,g,C){super(I);let A=decodeURIComponent(this._url.path);ZV.test(this._url.href)&&(A=A.replace(/^\//,""));const l=nC.get("fs");this._setReadableStream(l.createReadStream(A,{start:g,end:C-1}))}}const $b=1e5,Jg=30,Im=.8,Rg=class Rg{constructor({textContentSource:I,container:g,viewport:C}){m(this,GA);m(this,OA,Promise.withResolvers());m(this,Dg,null);m(this,z0,!1);m(this,L0,!!((rV=globalThis.FontInspector)!=null&&rV.enabled));m(this,kl,null);m(this,cA,null);m(this,E0,0);m(this,j0,0);m(this,Kl,null);m(this,PZ,null);m(this,fZ,0);m(this,rA,0);m(this,qZ,Object.create(null));m(this,x0,[]);m(this,_Z,null);m(this,Tl,[]);m(this,O0,new WeakMap);m(this,r0,null);var i;if(I instanceof ReadableStream)U(this,_Z,I);else if(typeof I=="object")U(this,_Z,new ReadableStream({start(c){c.enqueue(I),c.close()}}));else throw new Error('No "textContentSource" parameter specified.');U(this,Dg,U(this,PZ,g)),U(this,rA,C.scale*(globalThis.devicePixelRatio||1)),U(this,fZ,C.rotation),U(this,cA,{prevFontSize:null,prevFontFamily:null,div:null,properties:null,ctx:null});const{pageWidth:A,pageHeight:l,pageX:Z,pageY:B}=C.rawDims;U(this,r0,[1,0,0,-1,-Z,B+l]),U(this,j0,A),U(this,E0,l),b(i=Rg,HC,JR).call(i),Rl(g,C),F(this,OA).promise.catch(()=>{}).then(()=>{F(Rg,$Z).delete(this),U(this,cA,null),U(this,qZ,null)})}render(){const I=()=>{F(this,Kl).read().then(({value:g,done:C})=>{if(C){F(this,OA).resolve();return}F(this,kl)??U(this,kl,g.lang),Object.assign(F(this,qZ),g.styles),b(this,GA,nR).call(this,g.items),I()},F(this,OA).reject)};return U(this,Kl,F(this,_Z).getReader()),F(Rg,$Z).add(this),I(),F(this,OA).promise}update({viewport:I,onBefore:g=null}){var l;const C=I.scale*(globalThis.devicePixelRatio||1),A=I.rotation;if(A!==F(this,fZ)&&(g==null||g(),U(this,fZ,A),Rl(F(this,PZ),{rotation:A})),C!==F(this,rA)){g==null||g(),U(this,rA,C);const Z={prevFontSize:null,prevFontFamily:null,div:null,properties:null,ctx:b(l=Rg,HC,Ri).call(l,F(this,kl))};for(const B of F(this,Tl))Z.properties=F(this,O0).get(B),Z.div=B,b(this,GA,bG).call(this,Z)}}cancel(){var g;const I=new Vl("TextLayer task cancelled.");(g=F(this,Kl))==null||g.cancel(I).catch(()=>{}),U(this,Kl,null),F(this,OA).reject(I)}get textDivs(){return F(this,Tl)}get textContentItemsStr(){return F(this,x0)}static cleanup(){if(!(F(this,$Z).size>0)){F(this,zl).clear();for(const{canvas:I}of F(this,Ll).values())I.remove();F(this,Ll).clear()}}};OA=new WeakMap,Dg=new WeakMap,z0=new WeakMap,L0=new WeakMap,kl=new WeakMap,cA=new WeakMap,E0=new WeakMap,j0=new WeakMap,Kl=new WeakMap,PZ=new WeakMap,fZ=new WeakMap,rA=new WeakMap,qZ=new WeakMap,x0=new WeakMap,_Z=new WeakMap,Tl=new WeakMap,O0=new WeakMap,r0=new WeakMap,zl=new WeakMap,Ll=new WeakMap,vA=new WeakMap,$Z=new WeakMap,GA=new WeakSet,nR=function(I){var A,l;if(F(this,z0))return;(l=F(this,cA)).ctx??(l.ctx=b(A=Rg,HC,Ri).call(A,F(this,kl)));const g=F(this,Tl),C=F(this,x0);for(const Z of I){if(g.length>$b){iI("Ignoring additional textDivs for performance reasons."),U(this,z0,!0);return}if(Z.str===void 0){if(Z.type==="beginMarkedContentProps"||Z.type==="beginMarkedContent"){const B=F(this,Dg);U(this,Dg,document.createElement("span")),F(this,Dg).classList.add("markedContent"),Z.id!==null&&F(this,Dg).setAttribute("id",`${Z.id}`),B.append(F(this,Dg))}else Z.type==="endMarkedContent"&&U(this,Dg,F(this,Dg).parentNode);continue}C.push(Z.str),b(this,GA,SR).call(this,Z)}},SR=function(I){var Q;const g=document.createElement("span"),C={angle:0,canvasWidth:0,hasText:I.str!=="",hasEOL:I.hasEOL,fontSize:0};F(this,Tl).push(g);const A=x.transform(F(this,r0),I.transform);let l=Math.atan2(A[1],A[0]);const Z=F(this,qZ)[I.fontName];Z.vertical&&(l+=Math.PI/2);const B=F(this,L0)&&Z.fontSubstitution||Z.fontFamily,i=Math.hypot(A[2],A[3]),c=i*b(Q=Rg,HC,MR).call(Q,B,F(this,kl));let G,W;l===0?(G=A[4],W=A[5]-c):(G=A[4]+c*Math.sin(l),W=A[5]-c*Math.cos(l));const V="calc(var(--scale-factor)*",R=g.style;F(this,Dg)===F(this,PZ)?(R.left=`${(100*G/F(this,j0)).toFixed(2)}%`,R.top=`${(100*W/F(this,E0)).toFixed(2)}%`):(R.left=`${V}${G.toFixed(2)}px)`,R.top=`${V}${W.toFixed(2)}px)`),R.fontSize=`${V}${(F(Rg,vA)*i).toFixed(2)}px)`,R.fontFamily=B,C.fontSize=i,g.setAttribute("role","presentation"),g.textContent=I.str,g.dir=I.dir,F(this,L0)&&(g.dataset.fontName=Z.fontSubstitutionLoadedName||I.fontName),l!==0&&(C.angle=l*(180/Math.PI));let s=!1;if(I.str.length>1)s=!0;else if(I.str!==" "&&I.transform[0]!==I.transform[3]){const h=Math.abs(I.transform[0]),N=Math.abs(I.transform[3]);h!==N&&Math.max(h,N)/Math.min(h,N)>1.5&&(s=!0)}if(s&&(C.canvasWidth=Z.vertical?I.height:I.width),F(this,O0).set(g,C),F(this,cA).div=g,F(this,cA).properties=C,b(this,GA,bG).call(this,F(this,cA)),C.hasText&&F(this,Dg).append(g),C.hasEOL){const h=document.createElement("br");h.setAttribute("role","presentation"),F(this,Dg).append(h)}},bG=function(I){const{div:g,properties:C,ctx:A,prevFontSize:l,prevFontFamily:Z}=I,{style:B}=g;let i="";if(F(Rg,vA)>1&&(i=`scale(${1/F(Rg,vA)})`),C.canvasWidth!==0&&C.hasText){const{fontFamily:c}=B,{canvasWidth:G,fontSize:W}=C;(l!==W||Z!==c)&&(A.font=`${W*F(this,rA)}px ${c}`,I.prevFontSize=W,I.prevFontFamily=c);const{width:V}=A.measureText(g.textContent);V>0&&(i=`scaleX(${G*F(this,rA)/V}) ${i}`)}C.angle!==0&&(i=`rotate(${C.angle}deg) ${i}`),i.length>0&&(B.transform=i)},HC=new WeakSet,Ri=function(I=null){let g=F(this,Ll).get(I||(I=""));if(!g){const C=document.createElement("canvas");C.className="hiddenCanvasElement",C.lang=I,document.body.append(C),g=C.getContext("2d",{alpha:!1,willReadFrequently:!0}),F(this,Ll).set(I,g)}return g},JR=function(){if(F(this,vA)!==null)return;const I=document.createElement("div");I.style.opacity=0,I.style.lineHeight=1,I.style.fontSize="1px",I.textContent="X",document.body.append(I),U(this,vA,I.getBoundingClientRect().height),I.remove()},MR=function(I,g){const C=F(this,zl).get(I);if(C)return C;const A=b(this,HC,Ri).call(this,g),l=A.font;A.canvas.width=A.canvas.height=Jg,A.font=`${Jg}px ${I}`;const Z=A.measureText("");let B=Z.fontBoundingBoxAscent,i=Math.abs(Z.fontBoundingBoxDescent);if(B){const W=B/(B+i);return F(this,zl).set(I,W),A.canvas.width=A.canvas.height=0,A.font=l,W}A.strokeStyle="red",A.clearRect(0,0,Jg,Jg),A.strokeText("g",0,0);let c=A.getImageData(0,0,Jg,Jg).data;i=0;for(let W=c.length-1-3;W>=0;W-=4)if(c[W]>0){i=Math.ceil(W/4/Jg);break}A.clearRect(0,0,Jg,Jg),A.strokeText("A",0,Jg),c=A.getImageData(0,0,Jg,Jg).data,B=0;for(let W=0,V=c.length;W<V;W+=4)if(c[W]>0){B=Jg-Math.floor(W/4/Jg);break}A.canvas.width=A.canvas.height=0,A.font=l;const G=B?B/(B+i):Im;return F(this,zl).set(I,G),G},m(Rg,HC),m(Rg,zl,new Map),m(Rg,Ll,new Map),m(Rg,vA,null),m(Rg,$Z,new Set);let MZ=Rg;function gm(){pW("`renderTextLayer`, please use `TextLayer` instead.");const{textContentSource:d,container:I,viewport:g,...C}=arguments[0],A=Object.keys(C);A.length>0&&iI("Ignoring `renderTextLayer` parameters: "+A.join(", "));const l=new MZ({textContentSource:d,container:I,viewport:g}),{textDivs:Z,textContentItemsStr:B}=l;return{promise:l.render(),textDivs:Z,textContentItemsStr:B}}function Cm(){pW("`updateTextLayer`, please use `TextLayer` instead.")}class g0{static textContent(I){const g=[],C={items:g,styles:Object.create(null)};function A(l){var i;if(!l)return;let Z=null;const B=l.name;if(B==="#text")Z=l.value;else if(g0.shouldBuildText(B))(i=l==null?void 0:l.attributes)!=null&&i.textContent?Z=l.attributes.textContent:l.value&&(Z=l.value);else return;if(Z!==null&&g.push({str:Z}),!!l.children)for(const c of l.children)A(c)}return A(I),C}static shouldBuildText(I){return!(I==="textarea"||I==="input"||I==="option"||I==="select")}}const Am=65536,lm=100,Zm=5e3,dm=cg?bb:lb,Bm=cg?mb:HW,Fm=cg?Ub:Ab,im=cg?Qb:eW;function cm(d={}){typeof d=="string"||d instanceof URL?d={url:d}:(d instanceof ArrayBuffer||ArrayBuffer.isView(d))&&(d={data:d});const I=new nc,{docId:g}=I,C=d.url?Gm(d.url):null,A=d.data?Wm(d.data):null,l=d.httpHeaders||null,Z=d.withCredentials===!0,B=d.password??null,i=d.range instanceof iV?d.range:null,c=Number.isInteger(d.rangeChunkSize)&&d.rangeChunkSize>0?d.rangeChunkSize:Am;let G=d.worker instanceof DZ?d.worker:null;const W=d.verbosity,V=typeof d.docBaseUrl=="string"&&!cc(d.docBaseUrl)?d.docBaseUrl:null,R=typeof d.cMapUrl=="string"?d.cMapUrl:null,s=d.cMapPacked!==!1,Q=d.CMapReaderFactory||Bm,h=typeof d.standardFontDataUrl=="string"?d.standardFontDataUrl:null,N=d.StandardFontDataFactory||im,o=d.stopAtErrors!==!0,Y=Number.isInteger(d.maxImageSize)&&d.maxImageSize>-1?d.maxImageSize:-1,n=d.isEvalSupported!==!1,a=typeof d.isOffscreenCanvasSupported=="boolean"?d.isOffscreenCanvasSupported:!cg,w=Number.isInteger(d.canvasMaxAreaInBytes)?d.canvasMaxAreaInBytes:-1,X=typeof d.disableFontFace=="boolean"?d.disableFontFace:cg,J=d.fontExtraProperties===!0,y=d.enableXfa===!0,z=d.ownerDocument||globalThis.document,u=d.disableRange===!0,II=d.disableStream===!0,_=d.disableAutoFetch===!0,BI=d.pdfBug===!0,FI=d.enableHWA===!0,RI=i?i.length:d.length??NaN,O=typeof d.useSystemFonts=="boolean"?d.useSystemFonts:!cg&&!X,L=typeof d.useWorkerFetch=="boolean"?d.useWorkerFetch:Q===HW&&N===eW&&R&&h&&Pd(R,document.baseURI)&&Pd(h,document.baseURI),t=d.canvasFactory||new dm({ownerDocument:z,enableHWA:FI}),D=d.filterFactory||new Fm({docId:g,ownerDocument:z}),H=null;OU(W);const j={canvasFactory:t,filterFactory:D};if(L||(j.cMapReaderFactory=new Q({baseUrl:R,isCompressed:s}),j.standardFontDataFactory=new N({baseUrl:h})),!G){const ZI={verbosity:W,port:qC.workerPort};G=ZI.port?DZ.fromPort(ZI):new DZ(ZI),I._worker=G}const M={docId:g,apiVersion:"4.4.168",data:A,password:B,disableAutoFetch:_,rangeChunkSize:c,length:RI,docBaseUrl:V,enableXfa:y,evaluatorOptions:{maxImageSize:Y,disableFontFace:X,ignoreErrors:o,isEvalSupported:n,isOffscreenCanvasSupported:a,canvasMaxAreaInBytes:w,fontExtraProperties:J,useSystemFonts:O,cMapUrl:L?R:null,standardFontDataUrl:L?h:null}},p={disableFontFace:X,fontExtraProperties:J,ownerDocument:z,pdfBug:BI,styleElement:H,loadingParams:{disableAutoFetch:_,enableXfa:y}};return G.promise.then(function(){if(I.destroyed)throw new Error("Loading aborted");if(G.destroyed)throw new Error("Worker was destroyed");const ZI=G.messageHandler.sendWithPromise("GetDocRequest",M,A?[A.buffer]:null);let CI;if(i)CI=new ub(i,{disableRange:u,disableStream:II});else if(!A){if(!C)throw new Error("getDocument - no `url` parameter provided.");CI=(WI=>cg?function(){return typeof fetch<"u"&&typeof Response<"u"&&"body"in Response.prototype}()&&Pd(WI.url)?new lV(WI):new vb(WI):Pd(WI.url)?new lV(WI):new jb(WI))({url:C,length:RI,httpHeaders:l,withCredentials:Z,rangeChunkSize:c,disableRange:u,disableStream:II})}return ZI.then(P=>{if(I.destroyed)throw new Error("Loading aborted");if(G.destroyed)throw new Error("Worker was destroyed");const WI=new I0(g,P,G.port),Og=new Um(WI,I,CI,p,j);I._transport=Og,WI.send("Ready",null)})}).catch(I._capability.reject),I}function Gm(d){if(d instanceof URL)return d.href;try{return new URL(d,window.location).href}catch{if(cg&&typeof d=="string")return d}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function Wm(d){if(cg&&typeof Buffer<"u"&&d instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(d instanceof Uint8Array&&d.byteLength===d.buffer.byteLength)return d;if(typeof d=="string")return NF(d);if(d instanceof ArrayBuffer||ArrayBuffer.isView(d)||typeof d=="object"&&!isNaN(d==null?void 0:d.length))return new Uint8Array(d);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}function FV(d){return typeof d=="object"&&Number.isInteger(d==null?void 0:d.num)&&d.num>=0&&Number.isInteger(d==null?void 0:d.gen)&&d.gen>=0}const Ii=class Ii{constructor(){this._capability=Promise.withResolvers(),this._transport=null,this._worker=null,this.docId=`d${rg(Ii,$F)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var I,g,C;this.destroyed=!0;try{(I=this._worker)!=null&&I.port&&(this._worker._pendingDestroy=!0),await((g=this._transport)==null?void 0:g.destroy())}catch(A){throw(C=this._worker)!=null&&C.port&&delete this._worker._pendingDestroy,A}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};$F=new WeakMap,m(Ii,$F,0);let nc=Ii;class iV{constructor(I,g,C=!1,A=null){this.length=I,this.initialData=g,this.progressiveDone=C,this.contentDispositionFilename=A,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=Promise.withResolvers()}addRangeListener(I){this._rangeListeners.push(I)}addProgressListener(I){this._progressListeners.push(I)}addProgressiveReadListener(I){this._progressiveReadListeners.push(I)}addProgressiveDoneListener(I){this._progressiveDoneListeners.push(I)}onDataRange(I,g){for(const C of this._rangeListeners)C(I,g)}onDataProgress(I,g){this._readyCapability.promise.then(()=>{for(const C of this._progressListeners)C(I,g)})}onDataProgressiveRead(I){this._readyCapability.promise.then(()=>{for(const g of this._progressiveReadListeners)g(I)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const I of this._progressiveDoneListeners)I()})}transportReady(){this._readyCapability.resolve()}requestDataRange(I,g){aI("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class Vm{constructor(I,g){this._pdfInfo=I,this._transport=g}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return bI(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(I){return this._transport.getPage(I)}getPageIndex(I){return this._transport.getPageIndex(I)}getDestinations(){return this._transport.getDestinations()}getDestination(I){return this._transport.getDestination(I)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getOptionalContentConfig(g)}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(I=!1){return this._transport.startCleanup(I||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}cachedPageNumber(I){return this._transport.cachedPageNumber(I)}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}class Rm{constructor(I,g,C,A=!1){m(this,$g);m(this,PA,null);m(this,WA,!1);this._pageIndex=I,this._pageInfo=g,this._transport=C,this._stats=A?new uW:null,this._pdfBug=A,this.commonObjs=C.commonObjs,this.objs=new cV,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:I,rotation:g=this.rotate,offsetX:C=0,offsetY:A=0,dontFlip:l=!1}={}){return new vd({viewBox:this.view,scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}getAnnotations({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getAnnotations(this._pageIndex,g)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return bI(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var I;return((I=this._transport._htmlForXfa)==null?void 0:I.children[this._pageIndex])||null}render({canvasContext:I,viewport:g,intent:C="display",annotationMode:A=HA.ENABLE,transform:l=null,background:Z=null,optionalContentConfigPromise:B=null,annotationCanvasMap:i=null,pageColors:c=null,printAnnotationStorage:G=null}){var Y,n;(Y=this._stats)==null||Y.time("Overall");const W=this._transport.getRenderingIntent(C,A,G),{renderingIntent:V,cacheKey:R}=W;U(this,WA,!1),b(this,$g,si).call(this),B||(B=this._transport.getOptionalContentConfig(V));let s=this._intentStates.get(R);s||(s=Object.create(null),this._intentStates.set(R,s)),s.streamReaderCancelTimeout&&(clearTimeout(s.streamReaderCancelTimeout),s.streamReaderCancelTimeout=null);const Q=!!(V&Pg.PRINT);s.displayReadyCapability||(s.displayReadyCapability=Promise.withResolvers(),s.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(n=this._stats)==null||n.time("Page Request"),this._pumpOperatorList(W));const h=a=>{var w;s.renderTasks.delete(N),(this._maybeCleanupAfterRender||Q)&&U(this,WA,!0),b(this,$g,Xd).call(this,!Q),a?(N.capability.reject(a),this._abortOperatorList({intentState:s,reason:a instanceof Error?a:new Error(a)})):N.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"),(w=globalThis.Stats)!=null&&w.enabled&&globalThis.Stats.add(this.pageNumber,this._stats))},N=new Sc({callback:h,params:{canvasContext:I,viewport:g,transform:l,background:Z},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:i,operatorList:s.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!Q,pdfBug:this._pdfBug,pageColors:c});(s.renderTasks||(s.renderTasks=new Set)).add(N);const o=N.task;return Promise.all([s.displayReadyCapability.promise,B]).then(([a,w])=>{var X;if(this.destroyed){h();return}if((X=this._stats)==null||X.time("Rendering"),!(w.renderingIntent&V))throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");N.initializeGraphics({transparency:a,optionalContentConfig:w}),N.operatorListChanged()}).catch(h),o}getOperatorList({intent:I="display",annotationMode:g=HA.ENABLE,printAnnotationStorage:C=null}={}){var i;function A(){Z.operatorList.lastChunk&&(Z.opListReadCapability.resolve(Z.operatorList),Z.renderTasks.delete(B))}const l=this._transport.getRenderingIntent(I,g,C,!0);let Z=this._intentStates.get(l.cacheKey);Z||(Z=Object.create(null),this._intentStates.set(l.cacheKey,Z));let B;return Z.opListReadCapability||(B=Object.create(null),B.operatorListChanged=A,Z.opListReadCapability=Promise.withResolvers(),(Z.renderTasks||(Z.renderTasks=new Set)).add(B),Z.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(i=this._stats)==null||i.time("Page Request"),this._pumpOperatorList(l)),Z.opListReadCapability.promise}streamTextContent({includeMarkedContent:I=!1,disableNormalization:g=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:I===!0,disableNormalization:g===!0},{highWaterMark:100,size(A){return A.items.length}})}getTextContent(I={}){if(this._transport._htmlForXfa)return this.getXfa().then(C=>g0.textContent(C));const g=this.streamTextContent(I);return new Promise(function(C,A){function l(){Z.read().then(function({value:i,done:c}){if(c){C(B);return}B.lang??(B.lang=i.lang),Object.assign(B.styles,i.styles),B.items.push(...i.items),l()},A)}const Z=g.getReader(),B={items:[],styles:Object.create(null),lang:null};l()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const I=[];for(const g of this._intentStates.values())if(this._abortOperatorList({intentState:g,reason:new Error("Page was destroyed."),force:!0}),!g.opListReadCapability)for(const C of g.renderTasks)I.push(C.completed),C.cancel();return this.objs.clear(),U(this,WA,!1),b(this,$g,si).call(this),Promise.all(I)}cleanup(I=!1){U(this,WA,!0);const g=b(this,$g,Xd).call(this,!1);return I&&g&&this._stats&&(this._stats=new uW),g}_startRenderPage(I,g){var A,l;const C=this._intentStates.get(g);C&&((A=this._stats)==null||A.timeEnd("Page Request"),(l=C.displayReadyCapability)==null||l.resolve(I))}_renderPageChunk(I,g){for(let C=0,A=I.length;C<A;C++)g.operatorList.fnArray.push(I.fnArray[C]),g.operatorList.argsArray.push(I.argsArray[C]);g.operatorList.lastChunk=I.lastChunk,g.operatorList.separateAnnots=I.separateAnnots;for(const C of g.renderTasks)C.operatorListChanged();I.lastChunk&&b(this,$g,Xd).call(this,!0)}_pumpOperatorList({renderingIntent:I,cacheKey:g,annotationStorageSerializable:C}){const{map:A,transfer:l}=C,B=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:I,cacheKey:g,annotationStorage:A},l).getReader(),i=this._intentStates.get(g);i.streamReader=B;const c=()=>{B.read().then(({value:G,done:W})=>{if(W){i.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(G,i),c())},G=>{if(i.streamReader=null,!this._transport.destroyed){if(i.operatorList){i.operatorList.lastChunk=!0;for(const W of i.renderTasks)W.operatorListChanged();b(this,$g,Xd).call(this,!0)}if(i.displayReadyCapability)i.displayReadyCapability.reject(G);else if(i.opListReadCapability)i.opListReadCapability.reject(G);else throw G}})};c()}_abortOperatorList({intentState:I,reason:g,force:C=!1}){if(I.streamReader){if(I.streamReaderCancelTimeout&&(clearTimeout(I.streamReaderCancelTimeout),I.streamReaderCancelTimeout=null),!C){if(I.renderTasks.size>0)return;if(g instanceof ic){let A=lm;g.extraDelay>0&&g.extraDelay<1e3&&(A+=g.extraDelay),I.streamReaderCancelTimeout=setTimeout(()=>{I.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:I,reason:g,force:!0})},A);return}}if(I.streamReader.cancel(new Vl(g.message)).catch(()=>{}),I.streamReader=null,!this._transport.destroyed){for(const[A,l]of this._intentStates)if(l===I){this._intentStates.delete(A);break}this.cleanup()}}}get stats(){return this._stats}}PA=new WeakMap,WA=new WeakMap,$g=new WeakSet,Xd=function(I=!1){if(b(this,$g,si).call(this),!F(this,WA)||this.destroyed)return!1;if(I)return U(this,PA,setTimeout(()=>{U(this,PA,null),b(this,$g,Xd).call(this,!1)},Zm)),!1;for(const{renderTasks:g,operatorList:C}of this._intentStates.values())if(g.size>0||!C.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),U(this,WA,!1),!0},si=function(){F(this,PA)&&(clearTimeout(F(this,PA)),U(this,PA,null))};class sm{constructor(){m(this,El,new Set);m(this,gi,Promise.resolve())}postMessage(I,g){const C={data:structuredClone(I,g?{transfer:g}:null)};F(this,gi).then(()=>{for(const A of F(this,El))A.call(this,C)})}addEventListener(I,g){F(this,El).add(g)}removeEventListener(I,g){F(this,El).delete(g)}terminate(){F(this,El).clear()}}El=new WeakMap,gi=new WeakMap;const _C={isWorkerDisabled:!1,fakeWorkerId:0};cg&&(_C.isWorkerDisabled=!0,qC.workerSrc||(qC.workerSrc="./pdf.worker.mjs")),_C.isSameOrigin=function(d,I){let g;try{if(g=new URL(d),!g.origin||g.origin==="null")return!1}catch{return!1}const C=new URL(I,g);return g.origin===C.origin},_C.createCDNWrapper=function(d){const I=`await import("${d}");`;return URL.createObjectURL(new Blob([I],{type:"text/javascript"}))};const Kg=class Kg{constructor({name:I=null,port:g=null,verbosity:C=rU()}={}){m(this,Id);var A;if(this.name=I,this.destroyed=!1,this.verbosity=C,this._readyCapability=Promise.withResolvers(),this._port=null,this._webWorker=null,this._messageHandler=null,g){if((A=F(Kg,jl))!=null&&A.has(g))throw new Error("Cannot use more than one PDFWorker per port.");(F(Kg,jl)||U(Kg,jl,new WeakMap)).set(g,this),this._initializeFromPort(g);return}this._initialize()}get promise(){return cg?Promise.all([nC.promise,this._readyCapability.promise]):this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(I){this._port=I,this._messageHandler=new I0("main","worker",I),this._messageHandler.on("ready",function(){}),b(this,Id,Ui).call(this)}_initialize(){if(_C.isWorkerDisabled||F(Kg,gd,bi)){this._setupFakeWorker();return}let{workerSrc:I}=Kg;try{_C.isSameOrigin(window.location.href,I)||(I=_C.createCDNWrapper(new URL(I,window.location).href));const g=new Worker(I,{type:"module"}),C=new I0("main","worker",g),A=()=>{l.abort(),C.destroy(),g.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},l=new AbortController;g.addEventListener("error",()=>{this._webWorker||A()},{signal:l.signal}),C.on("test",B=>{if(l.abort(),this.destroyed||!B){A();return}this._messageHandler=C,this._port=g,this._webWorker=g,b(this,Id,Ui).call(this)}),C.on("ready",B=>{if(l.abort(),this.destroyed){A();return}try{Z()}catch{this._setupFakeWorker()}});const Z=()=>{const B=new Uint8Array;C.send("test",B,[B.buffer])};Z();return}catch{mF("The worker has been disabled.")}this._setupFakeWorker()}_setupFakeWorker(){_C.isWorkerDisabled||(iI("Setting up fake worker."),_C.isWorkerDisabled=!0),Kg._setupFakeWorkerGlobal.then(I=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const g=new sm;this._port=g;const C=`fake${_C.fakeWorkerId++}`,A=new I0(C+"_worker",C,g);I.setup(A,g),this._messageHandler=new I0(C,C+"_worker",g),b(this,Id,Ui).call(this)}).catch(I=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${I.message}".`))})}destroy(){var I;this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),(I=F(Kg,jl))==null||I.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(I){var C;if(!(I!=null&&I.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const g=(C=F(this,jl))==null?void 0:C.get(I.port);if(g){if(g._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return g}return new Kg(I)}static get workerSrc(){if(qC.workerSrc)return qC.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _setupFakeWorkerGlobal(){return bI(this,"_setupFakeWorkerGlobal",(async()=>F(this,gd,bi)?F(this,gd,bi):(await import(this.workerSrc)).WorkerMessageHandler)())}};jl=new WeakMap,Id=new WeakSet,Ui=function(){this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})},gd=new WeakSet,bi=function(){var I;try{return((I=globalThis.pdfjsWorker)==null?void 0:I.WorkerMessageHandler)||null}catch{return null}},m(Kg,gd),m(Kg,jl);let DZ=Kg;class Um{constructor(I,g,C,A,l){m(this,xl);m(this,VA,new Map);m(this,eC,new Map);m(this,Cd,new Map);m(this,Ad,new Map);m(this,uC,null);this.messageHandler=I,this.loadingTask=g,this.commonObjs=new cV,this.fontLoader=new Rb({ownerDocument:A.ownerDocument,styleElement:A.styleElement}),this.loadingParams=A.loadingParams,this._params=A,this.canvasFactory=l.canvasFactory,this.filterFactory=l.filterFactory,this.cMapReaderFactory=l.cMapReaderFactory,this.standardFontDataFactory=l.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=C,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=Promise.withResolvers(),this.setupMessageHandler()}get annotationStorage(){return bI(this,"annotationStorage",new bc)}getRenderingIntent(I,g=HA.ENABLE,C=null,A=!1){let l=Pg.DISPLAY,Z=Uc;switch(I){case"any":l=Pg.ANY;break;case"display":break;case"print":l=Pg.PRINT;break;default:iI(`getRenderingIntent - invalid intent: ${I}`)}switch(g){case HA.DISABLE:l+=Pg.ANNOTATIONS_DISABLE;break;case HA.ENABLE:break;case HA.ENABLE_FORMS:l+=Pg.ANNOTATIONS_FORMS;break;case HA.ENABLE_STORAGE:l+=Pg.ANNOTATIONS_STORAGE,Z=(l&Pg.PRINT&&C instanceof LW?C:this.annotationStorage).serializable;break;default:iI(`getRenderingIntent - invalid annotationMode: ${g}`)}return A&&(l+=Pg.OPLIST),{renderingIntent:l,cacheKey:`${l}_${Z.hash}`,annotationStorageSerializable:Z}}destroy(){var C;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=Promise.withResolvers(),(C=F(this,uC))==null||C.reject(new Error("Worker was destroyed during onPassword callback"));const I=[];for(const A of F(this,eC).values())I.push(A._destroy());F(this,eC).clear(),F(this,Cd).clear(),F(this,Ad).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const g=this.messageHandler.sendWithPromise("Terminate",null);return I.push(g),Promise.all(I).then(()=>{var A;this.commonObjs.clear(),this.fontLoader.clear(),F(this,VA).clear(),this.filterFactory.destroy(),MZ.cleanup(),(A=this._networkStream)==null||A.cancelAllRequests(new Vl("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:I,loadingTask:g}=this;I.on("GetReader",(C,A)=>{OI(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=l=>{this._lastProgress={loaded:l.loaded,total:l.total}},A.onPull=()=>{this._fullReader.read().then(function({value:l,done:Z}){if(Z){A.close();return}OI(l instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),A.enqueue(new Uint8Array(l),1,[l])}).catch(l=>{A.error(l)})},A.onCancel=l=>{this._fullReader.cancel(l),A.ready.catch(Z=>{if(!this.destroyed)throw Z})}}),I.on("ReaderHeadersReady",C=>{const A=Promise.withResolvers(),l=this._fullReader;return l.headersReady.then(()=>{var Z;(!l.isStreamingSupported||!l.isRangeSupported)&&(this._lastProgress&&((Z=g.onProgress)==null||Z.call(g,this._lastProgress)),l.onProgress=B=>{var i;(i=g.onProgress)==null||i.call(g,{loaded:B.loaded,total:B.total})}),A.resolve({isStreamingSupported:l.isStreamingSupported,isRangeSupported:l.isRangeSupported,contentLength:l.contentLength})},A.reject),A.promise}),I.on("GetRangeReader",(C,A)=>{OI(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const l=this._networkStream.getRangeReader(C.begin,C.end);if(!l){A.close();return}A.onPull=()=>{l.read().then(function({value:Z,done:B}){if(B){A.close();return}OI(Z instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),A.enqueue(new Uint8Array(Z),1,[Z])}).catch(Z=>{A.error(Z)})},A.onCancel=Z=>{l.cancel(Z),A.ready.catch(B=>{if(!this.destroyed)throw B})}}),I.on("GetDoc",({pdfInfo:C})=>{this._numPages=C.numPages,this._htmlForXfa=C.htmlForXfa,delete C.htmlForXfa,g._capability.resolve(new Vm(C,this))}),I.on("DocException",function(C){let A;switch(C.name){case"PasswordException":A=new Cc(C.message,C.code);break;case"InvalidPDFException":A=new DW(C.message);break;case"MissingPDFException":A=new Wl(C.message);break;case"UnexpectedResponseException":A=new QF(C.message,C.status);break;case"UnknownErrorException":A=new Ac(C.message,C.details);break;default:aI("DocException - expected a valid Error.")}g._capability.reject(A)}),I.on("PasswordRequest",C=>{if(U(this,uC,Promise.withResolvers()),g.onPassword){const A=l=>{l instanceof Error?F(this,uC).reject(l):F(this,uC).resolve({password:l})};try{g.onPassword(A,C.code)}catch(l){F(this,uC).reject(l)}}else F(this,uC).reject(new Cc(C.message,C.code));return F(this,uC).promise}),I.on("DataLoaded",C=>{var A;(A=g.onProgress)==null||A.call(g,{loaded:C.length,total:C.length}),this.downloadInfoCapability.resolve(C)}),I.on("StartRenderPage",C=>{if(this.destroyed)return;F(this,eC).get(C.pageIndex)._startRenderPage(C.transparency,C.cacheKey)}),I.on("commonobj",([C,A,l])=>{var Z;if(this.destroyed||this.commonObjs.has(C))return null;switch(A){case"Font":const{disableFontFace:B,fontExtraProperties:i,pdfBug:c}=this._params;if("error"in l){const R=l.error;iI(`Error during font loading: ${R}`),this.commonObjs.resolve(C,R);break}const G=c&&((Z=globalThis.FontInspector)!=null&&Z.enabled)?(R,s)=>globalThis.FontInspector.fontAdded(R,s):null,W=new sb(l,{disableFontFace:B,inspectFont:G});this.fontLoader.bind(W).catch(()=>I.sendWithPromise("FontFallback",{id:C})).finally(()=>{!i&&W.data&&(W.data=null),this.commonObjs.resolve(C,W)});break;case"CopyLocalImage":const{imageRef:V}=l;OI(V,"The imageRef must be defined.");for(const R of F(this,eC).values())for(const[,s]of R.objs)if((s==null?void 0:s.ref)===V)return s.dataLen?(this.commonObjs.resolve(C,structuredClone(s)),s.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(C,l);break;default:throw new Error(`Got unknown common object type ${A}`)}return null}),I.on("obj",([C,A,l,Z])=>{var i;if(this.destroyed)return;const B=F(this,eC).get(A);if(!B.objs.has(C)){if(B._intentStates.size===0){(i=Z==null?void 0:Z.bitmap)==null||i.close();return}switch(l){case"Image":B.objs.resolve(C,Z),(Z==null?void 0:Z.dataLen)>LU&&(B._maybeCleanupAfterRender=!0);break;case"Pattern":B.objs.resolve(C,Z);break;default:throw new Error(`Got unknown object type ${l}`)}}}),I.on("DocProgress",C=>{var A;this.destroyed||(A=g.onProgress)==null||A.call(g,{loaded:C.loaded,total:C.total})}),I.on("FetchBuiltInCMap",C=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(C):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),I.on("FetchStandardFontData",C=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(C):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var C;this.annotationStorage.size<=0&&iI("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:I,transfer:g}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:I,filename:((C=this._fullReader)==null?void 0:C.filename)??null},g).finally(()=>{this.annotationStorage.resetModified()})}getPage(I){if(!Number.isInteger(I)||I<=0||I>this._numPages)return Promise.reject(new Error("Invalid page request."));const g=I-1,C=F(this,Cd).get(g);if(C)return C;const A=this.messageHandler.sendWithPromise("GetPage",{pageIndex:g}).then(l=>{if(this.destroyed)throw new Error("Transport destroyed");l.refStr&&F(this,Ad).set(l.refStr,I);const Z=new Rm(g,l,this,this._params.pdfBug);return F(this,eC).set(g,Z),Z});return F(this,Cd).set(g,A),A}getPageIndex(I){return FV(I)?this.messageHandler.sendWithPromise("GetPageIndex",{num:I.num,gen:I.gen}):Promise.reject(new Error("Invalid pageIndex request."))}getAnnotations(I,g){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:I,intent:g})}getFieldObjects(){return b(this,xl,EB).call(this,"GetFieldObjects")}hasJSActions(){return b(this,xl,EB).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(I){return typeof I!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:I})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return b(this,xl,EB).call(this,"GetDocJSActions")}getPageJSActions(I){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:I})}getStructTree(I){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:I})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(I){return b(this,xl,EB).call(this,"GetOptionalContentConfig").then(g=>new eb(g,I))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const I="GetMetadata",g=F(this,VA).get(I);if(g)return g;const C=this.messageHandler.sendWithPromise(I,null).then(A=>{var l,Z;return{info:A[0],metadata:A[1]?new yb(A[1]):null,contentDispositionFilename:((l=this._fullReader)==null?void 0:l.filename)??null,contentLength:((Z=this._fullReader)==null?void 0:Z.contentLength)??null}});return F(this,VA).set(I,C),C}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(I=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const g of F(this,eC).values())if(!g.cleanup())throw new Error(`startCleanup: Page ${g.pageNumber} is currently rendering.`);this.commonObjs.clear(),I||this.fontLoader.clear(),F(this,VA).clear(),this.filterFactory.destroy(!0),MZ.cleanup()}}cachedPageNumber(I){if(!FV(I))return null;const g=I.gen===0?`${I.num}R`:`${I.num}R${I.gen}`;return F(this,Ad).get(g)??null}}VA=new WeakMap,eC=new WeakMap,Cd=new WeakMap,Ad=new WeakMap,uC=new WeakMap,xl=new WeakSet,EB=function(I,g=null){const C=F(this,VA).get(I);if(C)return C;const A=this.messageHandler.sendWithPromise(I,g);return F(this,VA).set(I,A),A};const yF=Symbol("INITIAL_DATA");class cV{constructor(){m(this,v0);m(this,VC,Object.create(null))}get(I,g=null){if(g){const A=b(this,v0,mG).call(this,I);return A.promise.then(()=>g(A.data)),null}const C=F(this,VC)[I];if(!C||C.data===yF)throw new Error(`Requesting object that isn't resolved yet ${I}.`);return C.data}has(I){const g=F(this,VC)[I];return!!g&&g.data!==yF}resolve(I,g=null){const C=b(this,v0,mG).call(this,I);C.data=g,C.resolve()}clear(){var I;for(const g in F(this,VC)){const{data:C}=F(this,VC)[g];(I=C==null?void 0:C.bitmap)==null||I.close()}U(this,VC,Object.create(null))}*[Symbol.iterator](){for(const I in F(this,VC)){const{data:g}=F(this,VC)[I];g!==yF&&(yield[I,g])}}}VC=new WeakMap,v0=new WeakSet,mG=function(I){var g;return(g=F(this,VC))[I]||(g[I]={...Promise.withResolvers(),data:yF})};class bm{constructor(I){m(this,fA,null);U(this,fA,I),this.onContinue=null}get promise(){return F(this,fA).capability.promise}cancel(I=0){F(this,fA).cancel(null,I)}get separateAnnots(){const{separateAnnots:I}=F(this,fA).operatorList;if(!I)return!1;const{annotationCanvasMap:g}=F(this,fA);return I.form||I.canvas&&(g==null?void 0:g.size)>0}}fA=new WeakMap;const rl=class rl{constructor({callback:I,params:g,objs:C,commonObjs:A,annotationCanvasMap:l,operatorList:Z,pageIndex:B,canvasFactory:i,filterFactory:c,useRequestAnimationFrame:G=!1,pdfBug:W=!1,pageColors:V=null}){m(this,qA,null);this.callback=I,this.params=g,this.objs=C,this.commonObjs=A,this.annotationCanvasMap=l,this.operatorListIdx=null,this.operatorList=Z,this._pageIndex=B,this.canvasFactory=i,this.filterFactory=c,this._pdfBug=W,this.pageColors=V,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=G===!0&&typeof window<"u",this.cancelled=!1,this.capability=Promise.withResolvers(),this.task=new bm(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=g.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:I=!1,optionalContentConfig:g}){var B,i;if(this.cancelled)return;if(this._canvas){if(F(rl,Ol).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");F(rl,Ol).add(this._canvas)}this._pdfBug&&((B=globalThis.StepperManager)!=null&&B.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:C,viewport:A,transform:l,background:Z}=this.params;this.gfx=new JZ(C,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:g},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:l,viewport:A,transparency:I,background:Z}),this.operatorListIdx=0,this.graphicsReady=!0,(i=this.graphicsReadyCallback)==null||i.call(this)}cancel(I=null,g=0){var C;this.running=!1,this.cancelled=!0,(C=this.gfx)==null||C.endDrawing(),F(this,qA)&&(window.cancelAnimationFrame(F(this,qA)),U(this,qA,null)),F(rl,Ol).delete(this._canvas),this.callback(I||new ic(`Rendering cancelled, page ${this._pageIndex+1}`,g))}operatorListChanged(){var I;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(I=this.stepper)==null||I.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?U(this,qA,window.requestAnimationFrame(()=>{U(this,qA,null),this._nextBound().catch(this._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),F(rl,Ol).delete(this._canvas),this.callback())))}};qA=new WeakMap,Ol=new WeakMap,m(rl,Ol,new WeakSet);let Sc=rl;const mm="4.4.168",Qm="19fbc8998";function GV(d){return Math.floor(Math.max(0,Math.min(1,d))*255).toString(16).padStart(2,"0")}function C0(d){return Math.max(0,Math.min(255,255*d))}class WV{static CMYK_G([I,g,C,A]){return["G",1-Math.min(1,.3*I+.59*C+.11*g+A)]}static G_CMYK([I]){return["CMYK",0,0,0,1-I]}static G_RGB([I]){return["RGB",I,I,I]}static G_rgb([I]){return I=C0(I),[I,I,I]}static G_HTML([I]){const g=GV(I);return`#${g}${g}${g}`}static RGB_G([I,g,C]){return["G",.3*I+.59*g+.11*C]}static RGB_rgb(I){return I.map(C0)}static RGB_HTML(I){return`#${I.map(GV).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([I,g,C,A]){return["RGB",1-Math.min(1,I+A),1-Math.min(1,C+A),1-Math.min(1,g+A)]}static CMYK_rgb([I,g,C,A]){return[C0(1-Math.min(1,I+A)),C0(1-Math.min(1,C+A)),C0(1-Math.min(1,g+A))]}static CMYK_HTML(I){const g=this.CMYK_RGB(I).slice(1);return this.RGB_HTML(g)}static RGB_CMYK([I,g,C]){const A=1-I,l=1-g,Z=1-C,B=Math.min(A,l,Z);return["CMYK",A,l,Z,B]}}class VV{static setupStorage(I,g,C,A,l){const Z=A.getValue(g,{value:null});switch(C.name){case"textarea":if(Z.value!==null&&(I.textContent=Z.value),l==="print")break;I.addEventListener("input",B=>{A.setValue(g,{value:B.target.value})});break;case"input":if(C.attributes.type==="radio"||C.attributes.type==="checkbox"){if(Z.value===C.attributes.xfaOn?I.setAttribute("checked",!0):Z.value===C.attributes.xfaOff&&I.removeAttribute("checked"),l==="print")break;I.addEventListener("change",B=>{A.setValue(g,{value:B.target.checked?B.target.getAttribute("xfaOn"):B.target.getAttribute("xfaOff")})})}else{if(Z.value!==null&&I.setAttribute("value",Z.value),l==="print")break;I.addEventListener("input",B=>{A.setValue(g,{value:B.target.value})})}break;case"select":if(Z.value!==null){I.setAttribute("value",Z.value);for(const B of C.children)B.attributes.value===Z.value?B.attributes.selected=!0:B.attributes.hasOwnProperty("selected")&&delete B.attributes.selected}I.addEventListener("input",B=>{const i=B.target.options,c=i.selectedIndex===-1?"":i[i.selectedIndex].value;A.setValue(g,{value:c})});break}}static setAttributes({html:I,element:g,storage:C=null,intent:A,linkService:l}){const{attributes:Z}=g,B=I instanceof HTMLAnchorElement;Z.type==="radio"&&(Z.name=`${Z.name}-${A}`);for(const[i,c]of Object.entries(Z))if(c!=null)switch(i){case"class":c.length&&I.setAttribute(i,c.join(" "));break;case"dataId":break;case"id":I.setAttribute("data-element-id",c);break;case"style":Object.assign(I.style,c);break;case"textContent":I.textContent=c;break;default:(!B||i!=="href"&&i!=="newWindow")&&I.setAttribute(i,c)}B&&l.addLinkAttributes(I,Z.href,Z.newWindow),C&&Z.dataId&&this.setupStorage(I,Z.dataId,g,C)}static render(I){var W,V;const g=I.annotationStorage,C=I.linkService,A=I.xfaHtml,l=I.intent||"display",Z=document.createElement(A.name);A.attributes&&this.setAttributes({html:Z,element:A,intent:l,linkService:C});const B=l!=="richText",i=I.div;if(i.append(Z),I.viewport){const R=`matrix(${I.viewport.transform.join(",")})`;i.style.transform=R}B&&i.setAttribute("class","xfaLayer xfaFont");const c=[];if(A.children.length===0){if(A.value){const R=document.createTextNode(A.value);Z.append(R),B&&g0.shouldBuildText(A.name)&&c.push(R)}return{textDivs:c}}const G=[[A,-1,Z]];for(;G.length>0;){const[R,s,Q]=G.at(-1);if(s+1===R.children.length){G.pop();continue}const h=R.children[++G.at(-1)[1]];if(h===null)continue;const{name:N}=h;if(N==="#text"){const Y=document.createTextNode(h.value);c.push(Y),Q.append(Y);continue}const o=(W=h==null?void 0:h.attributes)!=null&&W.xmlns?document.createElementNS(h.attributes.xmlns,N):document.createElement(N);if(Q.append(o),h.attributes&&this.setAttributes({html:o,element:h,storage:g,intent:l,linkService:C}),((V=h.children)==null?void 0:V.length)>0)G.push([h,-1,o]);else if(h.value){const Y=document.createTextNode(h.value);B&&g0.shouldBuildText(N)&&c.push(Y),o.append(Y)}}for(const R of i.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))R.setAttribute("readOnly",!0);return{textDivs:c}}static update(I){const g=`matrix(${I.viewport.transform.join(",")})`;I.div.style.transform=g,I.div.hidden=!1}}const A0=1e3,Nm=9,Ul=new WeakSet;function $C(d){return{width:d[2]-d[0],height:d[3]-d[1]}}class hm{static create(I){switch(I.data.annotationType){case xI.LINK:return new RV(I);case xI.TEXT:return new om(I);case xI.WIDGET:switch(I.data.fieldType){case"Tx":return new am(I);case"Btn":return I.data.radioButton?new sV(I):I.data.checkBox?new wm(I):new nm(I);case"Ch":return new Sm(I);case"Sig":return new Ym(I)}return new bl(I);case xI.POPUP:return new Jc(I);case xI.FREETEXT:return new UV(I);case xI.LINE:return new Mm(I);case xI.SQUARE:return new Dm(I);case xI.CIRCLE:return new Xm(I);case xI.POLYLINE:return new bV(I);case xI.CARET:return new ym(I);case xI.INK:return new mV(I);case xI.POLYGON:return new tm(I);case xI.HIGHLIGHT:return new Hm(I);case xI.UNDERLINE:return new em(I);case xI.SQUIGGLY:return new um(I);case xI.STRIKEOUT:return new pm(I);case xI.STAMP:return new QV(I);case xI.FILEATTACHMENT:return new km(I);default:return new kI(I)}}}const xc=class xc{constructor(I,{isRenderable:g=!1,ignoreBorder:C=!1,createQuadrilaterals:A=!1}={}){m(this,P0);m(this,vl,null);m(this,ld,!1);m(this,Zd,null);this.isRenderable=g,this.data=I.data,this.layer=I.layer,this.linkService=I.linkService,this.downloadManager=I.downloadManager,this.imageResourcesPath=I.imageResourcesPath,this.renderForms=I.renderForms,this.svgFactory=I.svgFactory,this.annotationStorage=I.annotationStorage,this.enableScripting=I.enableScripting,this.hasJSActions=I.hasJSActions,this._fieldObjects=I.fieldObjects,this.parent=I.parent,g&&(this.container=this._createContainer(C)),A&&this._createQuadrilaterals()}static _hasPopupData({titleObj:I,contentsObj:g,richText:C}){return!!(I!=null&&I.str||g!=null&&g.str||C!=null&&C.str)}get hasPopupData(){return xc._hasPopupData(this.data)}updateEdited(I){var C;if(!this.container)return;F(this,vl)||U(this,vl,{rect:this.data.rect.slice(0)});const{rect:g}=I;g&&b(this,P0,QG).call(this,g),(C=F(this,Zd))==null||C.popup.updateEdited(I)}resetEdited(){var I;F(this,vl)&&(b(this,P0,QG).call(this,F(this,vl).rect),(I=F(this,Zd))==null||I.popup.resetEdited(),U(this,vl,null))}_createContainer(I){const{data:g,parent:{page:C,viewport:A}}=this,l=document.createElement("section");l.setAttribute("data-annotation-id",g.id),this instanceof bl||(l.tabIndex=A0);const{style:Z}=l;if(Z.zIndex=this.parent.zIndex++,g.popupRef&&l.setAttribute("aria-haspopup","dialog"),g.alternativeText&&(l.title=g.alternativeText),g.noRotate&&l.classList.add("norotate"),!g.rect||this instanceof Jc){const{rotation:Q}=g;return!g.hasOwnCanvas&&Q!==0&&this.setRotation(Q,l),l}const{width:B,height:i}=$C(g.rect);if(!I&&g.borderStyle.width>0){Z.borderWidth=`${g.borderStyle.width}px`;const Q=g.borderStyle.horizontalCornerRadius,h=g.borderStyle.verticalCornerRadius;if(Q>0||h>0){const o=`calc(${Q}px * var(--scale-factor)) / calc(${h}px * var(--scale-factor))`;Z.borderRadius=o}else if(this instanceof sV){const o=`calc(${B}px * var(--scale-factor)) / calc(${i}px * var(--scale-factor))`;Z.borderRadius=o}switch(g.borderStyle.style){case rd.SOLID:Z.borderStyle="solid";break;case rd.DASHED:Z.borderStyle="dashed";break;case rd.BEVELED:iI("Unimplemented border style: beveled");break;case rd.INSET:iI("Unimplemented border style: inset");break;case rd.UNDERLINE:Z.borderBottomStyle="solid";break}const N=g.borderColor||null;N?(U(this,ld,!0),Z.borderColor=x.makeHexColor(N[0]|0,N[1]|0,N[2]|0)):Z.borderWidth=0}const c=x.normalizeRect([g.rect[0],C.view[3]-g.rect[1]+C.view[1],g.rect[2],C.view[3]-g.rect[3]+C.view[1]]),{pageWidth:G,pageHeight:W,pageX:V,pageY:R}=A.rawDims;Z.left=`${100*(c[0]-V)/G}%`,Z.top=`${100*(c[1]-R)/W}%`;const{rotation:s}=g;return g.hasOwnCanvas||s===0?(Z.width=`${100*B/G}%`,Z.height=`${100*i/W}%`):this.setRotation(s,l),l}setRotation(I,g=this.container){if(!this.data.rect)return;const{pageWidth:C,pageHeight:A}=this.parent.viewport.rawDims,{width:l,height:Z}=$C(this.data.rect);let B,i;I%180===0?(B=100*l/C,i=100*Z/A):(B=100*Z/C,i=100*l/A),g.style.width=`${B}%`,g.style.height=`${i}%`,g.setAttribute("data-main-rotation",(360-I)%360)}get _commonActions(){const I=(g,C,A)=>{const l=A.detail[g],Z=l[0],B=l.slice(1);A.target.style[C]=WV[`${Z}_HTML`](B),this.annotationStorage.setValue(this.data.id,{[C]:WV[`${Z}_rgb`](B)})};return bI(this,"_commonActions",{display:g=>{const{display:C}=g.detail,A=C%2===1;this.container.style.visibility=A?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:A,noPrint:C===1||C===2})},print:g=>{this.annotationStorage.setValue(this.data.id,{noPrint:!g.detail.print})},hidden:g=>{const{hidden:C}=g.detail;this.container.style.visibility=C?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:C,noView:C})},focus:g=>{setTimeout(()=>g.target.focus({preventScroll:!1}),0)},userName:g=>{g.target.title=g.detail.userName},readonly:g=>{g.target.disabled=g.detail.readonly},required:g=>{this._setRequired(g.target,g.detail.required)},bgColor:g=>{I("bgColor","backgroundColor",g)},fillColor:g=>{I("fillColor","backgroundColor",g)},fgColor:g=>{I("fgColor","color",g)},textColor:g=>{I("textColor","color",g)},borderColor:g=>{I("borderColor","borderColor",g)},strokeColor:g=>{I("strokeColor","borderColor",g)},rotation:g=>{const C=g.detail.rotation;this.setRotation(C),this.annotationStorage.setValue(this.data.id,{rotation:C})}})}_dispatchEventFromSandbox(I,g){const C=this._commonActions;for(const A of Object.keys(g.detail)){const l=I[A]||C[A];l==null||l(g)}}_setDefaultPropertiesFromJS(I){if(!this.enableScripting)return;const g=this.annotationStorage.getRawValue(this.data.id);if(!g)return;const C=this._commonActions;for(const[A,l]of Object.entries(g)){const Z=C[A];if(Z){const B={detail:{[A]:l},target:I};Z(B),delete g[A]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:I}=this.data;if(!I)return;const[g,C,A,l]=this.data.rect.map(Q=>Math.fround(Q));if(I.length===8){const[Q,h,N,o]=I.subarray(2,6);if(A===Q&&l===h&&g===N&&C===o)return}const{style:Z}=this.container;let B;if(F(this,ld)){const{borderColor:Q,borderWidth:h}=Z;Z.borderWidth=0,B=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${Q}" stroke-width="${h}">`],this.container.classList.add("hasBorder")}const i=A-g,c=l-C,{svgFactory:G}=this,W=G.createElement("svg");W.classList.add("quadrilateralsContainer"),W.setAttribute("width",0),W.setAttribute("height",0);const V=G.createElement("defs");W.append(V);const R=G.createElement("clipPath"),s=`clippath_${this.data.id}`;R.setAttribute("id",s),R.setAttribute("clipPathUnits","objectBoundingBox"),V.append(R);for(let Q=2,h=I.length;Q<h;Q+=8){const N=I[Q],o=I[Q+1],Y=I[Q+2],n=I[Q+3],a=G.createElement("rect"),w=(Y-g)/i,X=(l-o)/c,J=(N-Y)/i,y=(o-n)/c;a.setAttribute("x",w),a.setAttribute("y",X),a.setAttribute("width",J),a.setAttribute("height",y),R.append(a),B==null||B.push(`<rect vector-effect="non-scaling-stroke" x="${w}" y="${X}" width="${J}" height="${y}"/>`)}F(this,ld)&&(B.push("</g></svg>')"),Z.backgroundImage=B.join("")),this.container.append(W),this.container.style.clipPath=`url(#${s})`}_createPopup(){const{container:I,data:g}=this;I.setAttribute("aria-haspopup","dialog");const C=U(this,Zd,new Jc({data:{color:g.color,titleObj:g.titleObj,modificationDate:g.modificationDate,contentsObj:g.contentsObj,richText:g.richText,parentRect:g.rect,borderStyle:0,id:`popup_${g.id}`,rotation:g.rotation},parent:this.parent,elements:[this]}));this.parent.div.append(C.render())}render(){aI("Abstract method `AnnotationElement.render` called")}_getElementsByName(I,g=null){const C=[];if(this._fieldObjects){const A=this._fieldObjects[I];if(A)for(const{page:l,id:Z,exportValues:B}of A){if(l===-1||Z===g)continue;const i=typeof B=="string"?B:null,c=document.querySelector(`[data-element-id="${Z}"]`);if(c&&!Ul.has(c)){iI(`_getElementsByName - element not allowed: ${Z}`);continue}C.push({id:Z,exportValue:i,domElement:c})}return C}for(const A of document.getElementsByName(I)){const{exportValue:l}=A,Z=A.getAttribute("data-element-id");Z!==g&&Ul.has(A)&&C.push({id:Z,exportValue:l,domElement:A})}return C}show(){var I;this.container&&(this.container.hidden=!1),(I=this.popup)==null||I.maybeShow()}hide(){var I;this.container&&(this.container.hidden=!0),(I=this.popup)==null||I.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const I=this.getElementsToTriggerPopup();if(Array.isArray(I))for(const g of I)g.classList.add("highlightArea");else I.classList.add("highlightArea")}get _isEditable(){return!1}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:I,data:{id:g}}=this;this.container.addEventListener("dblclick",()=>{var C;(C=this.linkService.eventBus)==null||C.dispatch("switchannotationeditormode",{source:this,mode:I,editId:g})})}};vl=new WeakMap,ld=new WeakMap,Zd=new WeakMap,P0=new WeakSet,QG=function(I){const{container:{style:g},data:{rect:C,rotation:A},parent:{viewport:{rawDims:{pageWidth:l,pageHeight:Z,pageX:B,pageY:i}}}}=this;C==null||C.splice(0,4,...I);const{width:c,height:G}=$C(I);g.left=`${100*(I[0]-B)/l}%`,g.top=`${100*(Z-I[3]+i)/Z}%`,A===0?(g.width=`${100*c/l}%`,g.height=`${100*G/Z}%`):this.setRotation(A)};let kI=xc;class RV extends kI{constructor(g,C=null){super(g,{isRenderable:!0,ignoreBorder:!!(C!=null&&C.ignoreBorder),createQuadrilaterals:!0});m(this,Tg);this.isTooltipOnly=g.data.isTooltipOnly}render(){const{data:g,linkService:C}=this,A=document.createElement("a");A.setAttribute("data-element-id",g.id);let l=!1;return g.url?(C.addLinkAttributes(A,g.url,g.newWindow),l=!0):g.action?(this._bindNamedAction(A,g.action),l=!0):g.attachment?(b(this,Tg,DR).call(this,A,g.attachment,g.attachmentDest),l=!0):g.setOCGState?(b(this,Tg,XR).call(this,A,g.setOCGState),l=!0):g.dest?(this._bindLink(A,g.dest),l=!0):(g.actions&&(g.actions.Action||g.actions["Mouse Up"]||g.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(A,g),l=!0),g.resetForm?(this._bindResetFormAction(A,g.resetForm),l=!0):this.isTooltipOnly&&!l&&(this._bindLink(A,""),l=!0)),this.container.classList.add("linkAnnotation"),l&&this.container.append(A),this.container}_bindLink(g,C){g.href=this.linkService.getDestinationHash(C),g.onclick=()=>(C&&this.linkService.goToDestination(C),!1),(C||C==="")&&b(this,Tg,mZ).call(this)}_bindNamedAction(g,C){g.href=this.linkService.getAnchorUrl(""),g.onclick=()=>(this.linkService.executeNamedAction(C),!1),b(this,Tg,mZ).call(this)}_bindJSAction(g,C){g.href=this.linkService.getAnchorUrl("");const A=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const l of Object.keys(C.actions)){const Z=A.get(l);Z&&(g[Z]=()=>{var B;return(B=this.linkService.eventBus)==null||B.dispatch("dispatcheventinsandbox",{source:this,detail:{id:C.id,name:l}}),!1})}g.onclick||(g.onclick=()=>!1),b(this,Tg,mZ).call(this)}_bindResetFormAction(g,C){const A=g.onclick;if(A||(g.href=this.linkService.getAnchorUrl("")),b(this,Tg,mZ).call(this),!this._fieldObjects){iI('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),A||(g.onclick=()=>!1);return}g.onclick=()=>{var W;A==null||A();const{fields:l,refs:Z,include:B}=C,i=[];if(l.length!==0||Z.length!==0){const V=new Set(Z);for(const R of l){const s=this._fieldObjects[R]||[];for(const{id:Q}of s)V.add(Q)}for(const R of Object.values(this._fieldObjects))for(const s of R)V.has(s.id)===B&&i.push(s)}else for(const V of Object.values(this._fieldObjects))i.push(...V);const c=this.annotationStorage,G=[];for(const V of i){const{id:R}=V;switch(G.push(R),V.type){case"text":{const Q=V.defaultValue||"";c.setValue(R,{value:Q});break}case"checkbox":case"radiobutton":{const Q=V.defaultValue===V.exportValues;c.setValue(R,{value:Q});break}case"combobox":case"listbox":{const Q=V.defaultValue||"";c.setValue(R,{value:Q});break}default:continue}const s=document.querySelector(`[data-element-id="${R}"]`);if(s){if(!Ul.has(s)){iI(`_bindResetFormAction - element not allowed: ${R}`);continue}}else continue;s.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((W=this.linkService.eventBus)==null||W.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:G,name:"ResetForm"}})),!1}}}Tg=new WeakSet,mZ=function(){this.container.setAttribute("data-internal-link","")},DR=function(g,C,A=null){g.href=this.linkService.getAnchorUrl(""),C.description&&(g.title=C.description),g.onclick=()=>{var l;return(l=this.downloadManager)==null||l.openOrDownloadData(C.content,C.filename,A),!1},b(this,Tg,mZ).call(this)},XR=function(g,C){g.href=this.linkService.getAnchorUrl(""),g.onclick=()=>(this.linkService.executeSetOCGState(C),!1),b(this,Tg,mZ).call(this)};class om extends kI{constructor(I){super(I,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const I=document.createElement("img");return I.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",I.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),I.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(I),this.container}}class bl extends kI{render(){return this.container}showElementAndHideCanvas(I){var g;this.data.hasOwnCanvas&&(((g=I.previousSibling)==null?void 0:g.nodeName)==="CANVAS"&&(I.previousSibling.hidden=!0),I.hidden=!1)}_getKeyModifier(I){return wg.platform.isMac?I.metaKey:I.ctrlKey}_setEventListener(I,g,C,A,l){C.includes("mouse")?I.addEventListener(C,Z=>{var B;(B=this.linkService.eventBus)==null||B.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(Z),shift:Z.shiftKey,modifier:this._getKeyModifier(Z)}})}):I.addEventListener(C,Z=>{var B;if(C==="blur"){if(!g.focused||!Z.relatedTarget)return;g.focused=!1}else if(C==="focus"){if(g.focused)return;g.focused=!0}l&&((B=this.linkService.eventBus)==null||B.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(Z)}}))})}_setEventListeners(I,g,C,A){var l,Z,B;for(const[i,c]of C)(c==="Action"||(l=this.data.actions)!=null&&l[c])&&((c==="Focus"||c==="Blur")&&(g||(g={focused:!1})),this._setEventListener(I,g,i,c,A),c==="Focus"&&!((Z=this.data.actions)!=null&&Z.Blur)?this._setEventListener(I,g,"blur","Blur",null):c==="Blur"&&!((B=this.data.actions)!=null&&B.Focus)&&this._setEventListener(I,g,"focus","Focus",null))}_setBackgroundColor(I){const g=this.data.backgroundColor||null;I.style.backgroundColor=g===null?"transparent":x.makeHexColor(g[0],g[1],g[2])}_setTextStyle(I){const g=["left","center","right"],{fontColor:C}=this.data.defaultAppearanceData,A=this.data.defaultAppearanceData.fontSize||Nm,l=I.style;let Z;const B=2,i=c=>Math.round(10*c)/10;if(this.data.multiLine){const c=Math.abs(this.data.rect[3]-this.data.rect[1]-B),G=Math.round(c/(Ic*A))||1,W=c/G;Z=Math.min(A,i(W/Ic))}else{const c=Math.abs(this.data.rect[3]-this.data.rect[1]-B);Z=Math.min(A,i(c/Ic))}l.fontSize=`calc(${Z}px * var(--scale-factor))`,l.color=x.makeHexColor(C[0],C[1],C[2]),this.data.textAlignment!==null&&(l.textAlign=g[this.data.textAlignment])}_setRequired(I,g){g?I.setAttribute("required",!0):I.removeAttribute("required"),I.setAttribute("aria-required",g)}}class am extends bl{constructor(I){const g=I.renderForms||I.data.hasOwnCanvas||!I.data.hasAppearance&&!!I.data.fieldValue;super(I,{isRenderable:g})}setPropertyOnSiblings(I,g,C,A){const l=this.annotationStorage;for(const Z of this._getElementsByName(I.name,I.id))Z.domElement&&(Z.domElement[g]=C),l.setValue(Z.id,{[A]:C})}render(){var A,l;const I=this.annotationStorage,g=this.data.id;this.container.classList.add("textWidgetAnnotation");let C=null;if(this.renderForms){const Z=I.getValue(g,{value:this.data.fieldValue});let B=Z.value||"";const i=I.getValue(g,{charLimit:this.data.maxLen}).charLimit;i&&B.length>i&&(B=B.slice(0,i));let c=Z.formattedValue||((A=this.data.textContent)==null?void 0:A.join(`
`))||null;c&&this.data.comb&&(c=c.replaceAll(/\s+/g,""));const G={userValue:B,formattedValue:c,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(C=document.createElement("textarea"),C.textContent=c??B,this.data.doNotScroll&&(C.style.overflowY="hidden")):(C=document.createElement("input"),C.type="text",C.setAttribute("value",c??B),this.data.doNotScroll&&(C.style.overflowX="hidden")),this.data.hasOwnCanvas&&(C.hidden=!0),Ul.add(C),C.setAttribute("data-element-id",g),C.disabled=this.data.readOnly,C.name=this.data.fieldName,C.tabIndex=A0,this._setRequired(C,this.data.required),i&&(C.maxLength=i),C.addEventListener("input",V=>{I.setValue(g,{value:V.target.value}),this.setPropertyOnSiblings(C,"value",V.target.value,"value"),G.formattedValue=null}),C.addEventListener("resetform",V=>{const R=this.data.defaultFieldValue??"";C.value=G.userValue=R,G.formattedValue=null});let W=V=>{const{formattedValue:R}=G;R!=null&&(V.target.value=R),V.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){C.addEventListener("focus",R=>{var Q;if(G.focused)return;const{target:s}=R;G.userValue&&(s.value=G.userValue),G.lastCommittedValue=s.value,G.commitKey=1,(Q=this.data.actions)!=null&&Q.Focus||(G.focused=!0)}),C.addEventListener("updatefromsandbox",R=>{this.showElementAndHideCanvas(R.target);const s={value(Q){G.userValue=Q.detail.value??"",I.setValue(g,{value:G.userValue.toString()}),Q.target.value=G.userValue},formattedValue(Q){const{formattedValue:h}=Q.detail;G.formattedValue=h,h!=null&&Q.target!==document.activeElement&&(Q.target.value=h),I.setValue(g,{formattedValue:h})},selRange(Q){Q.target.setSelectionRange(...Q.detail.selRange)},charLimit:Q=>{var Y;const{charLimit:h}=Q.detail,{target:N}=Q;if(h===0){N.removeAttribute("maxLength");return}N.setAttribute("maxLength",h);let o=G.userValue;!o||o.length<=h||(o=o.slice(0,h),N.value=G.userValue=o,I.setValue(g,{value:o}),(Y=this.linkService.eventBus)==null||Y.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:o,willCommit:!0,commitKey:1,selStart:N.selectionStart,selEnd:N.selectionEnd}}))}};this._dispatchEventFromSandbox(s,R)}),C.addEventListener("keydown",R=>{var h;G.commitKey=1;let s=-1;if(R.key==="Escape"?s=0:R.key==="Enter"&&!this.data.multiLine?s=2:R.key==="Tab"&&(G.commitKey=3),s===-1)return;const{value:Q}=R.target;G.lastCommittedValue!==Q&&(G.lastCommittedValue=Q,G.userValue=Q,(h=this.linkService.eventBus)==null||h.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:Q,willCommit:!0,commitKey:s,selStart:R.target.selectionStart,selEnd:R.target.selectionEnd}}))});const V=W;W=null,C.addEventListener("blur",R=>{var Q,h;if(!G.focused||!R.relatedTarget)return;(Q=this.data.actions)!=null&&Q.Blur||(G.focused=!1);const{value:s}=R.target;G.userValue=s,G.lastCommittedValue!==s&&((h=this.linkService.eventBus)==null||h.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:s,willCommit:!0,commitKey:G.commitKey,selStart:R.target.selectionStart,selEnd:R.target.selectionEnd}})),V(R)}),(l=this.data.actions)!=null&&l.Keystroke&&C.addEventListener("beforeinput",R=>{var a;G.lastCommittedValue=null;const{data:s,target:Q}=R,{value:h,selectionStart:N,selectionEnd:o}=Q;let Y=N,n=o;switch(R.inputType){case"deleteWordBackward":{const w=h.substring(0,N).match(/\w*[^\w]*$/);w&&(Y-=w[0].length);break}case"deleteWordForward":{const w=h.substring(N).match(/^[^\w]*\w*/);w&&(n+=w[0].length);break}case"deleteContentBackward":N===o&&(Y-=1);break;case"deleteContentForward":N===o&&(n+=1);break}R.preventDefault(),(a=this.linkService.eventBus)==null||a.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:h,change:s||"",willCommit:!1,selStart:Y,selEnd:n}})}),this._setEventListeners(C,G,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],R=>R.target.value)}if(W&&C.addEventListener("blur",W),this.data.comb){const R=(this.data.rect[2]-this.data.rect[0])/i;C.classList.add("comb"),C.style.letterSpacing=`calc(${R}px * var(--scale-factor) - 1ch)`}}else C=document.createElement("div"),C.textContent=this.data.fieldValue,C.style.verticalAlign="middle",C.style.display="table-cell",this.data.hasOwnCanvas&&(C.hidden=!0);return this._setTextStyle(C),this._setBackgroundColor(C),this._setDefaultPropertiesFromJS(C),this.container.append(C),this.container}}class Ym extends bl{constructor(I){super(I,{isRenderable:!!I.data.hasOwnCanvas})}}class wm extends bl{constructor(I){super(I,{isRenderable:I.renderForms})}render(){const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.exportValue===g.fieldValue}).value;typeof A=="string"&&(A=A!=="Off",I.setValue(C,{value:A})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const l=document.createElement("input");return Ul.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="checkbox",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.setAttribute("exportValue",g.exportValue),l.tabIndex=A0,l.addEventListener("change",Z=>{const{name:B,checked:i}=Z.target;for(const c of this._getElementsByName(B,C)){const G=i&&c.exportValue===g.exportValue;c.domElement&&(c.domElement.checked=G),I.setValue(c.id,{value:G})}I.setValue(C,{value:i})}),l.addEventListener("resetform",Z=>{const B=g.defaultFieldValue||"Off";Z.target.checked=B===g.exportValue}),this.enableScripting&&this.hasJSActions&&(l.addEventListener("updatefromsandbox",Z=>{const B={value(i){i.target.checked=i.detail.value!=="Off",I.setValue(C,{value:i.target.checked})}};this._dispatchEventFromSandbox(B,Z)}),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],Z=>Z.target.checked)),this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class sV extends bl{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.fieldValue===g.buttonValue}).value;if(typeof A=="string"&&(A=A!==g.buttonValue,I.setValue(C,{value:A})),A)for(const Z of this._getElementsByName(g.fieldName,C))I.setValue(Z.id,{value:!1});const l=document.createElement("input");if(Ul.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="radio",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.tabIndex=A0,l.addEventListener("change",Z=>{const{name:B,checked:i}=Z.target;for(const c of this._getElementsByName(B,C))I.setValue(c.id,{value:!1});I.setValue(C,{value:i})}),l.addEventListener("resetform",Z=>{const B=g.defaultFieldValue;Z.target.checked=B!=null&&B===g.buttonValue}),this.enableScripting&&this.hasJSActions){const Z=g.buttonValue;l.addEventListener("updatefromsandbox",B=>{const i={value:c=>{const G=Z===c.detail.value;for(const W of this._getElementsByName(c.target.name)){const V=G&&W.id===C;W.domElement&&(W.domElement.checked=V),I.setValue(W.id,{value:V})}}};this._dispatchEventFromSandbox(i,B)}),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],B=>B.target.checked)}return this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class nm extends RV{constructor(I){super(I,{ignoreBorder:I.data.hasAppearance})}render(){const I=super.render();I.classList.add("buttonWidgetAnnotation","pushButton");const g=I.lastChild;return this.enableScripting&&this.hasJSActions&&g&&(this._setDefaultPropertiesFromJS(g),g.addEventListener("updatefromsandbox",C=>{this._dispatchEventFromSandbox({},C)})),I}}class Sm extends bl{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const I=this.annotationStorage,g=this.data.id,C=I.getValue(g,{value:this.data.fieldValue}),A=document.createElement("select");Ul.add(A),A.setAttribute("data-element-id",g),A.disabled=this.data.readOnly,this._setRequired(A,this.data.required),A.name=this.data.fieldName,A.tabIndex=A0;let l=this.data.combo&&this.data.options.length>0;this.data.combo||(A.size=this.data.options.length,this.data.multiSelect&&(A.multiple=!0)),A.addEventListener("resetform",G=>{const W=this.data.defaultFieldValue;for(const V of A.options)V.selected=V.value===W});for(const G of this.data.options){const W=document.createElement("option");W.textContent=G.displayValue,W.value=G.exportValue,C.value.includes(G.exportValue)&&(W.setAttribute("selected",!0),l=!1),A.append(W)}let Z=null;if(l){const G=document.createElement("option");G.value=" ",G.setAttribute("hidden",!0),G.setAttribute("selected",!0),A.prepend(G),Z=()=>{G.remove(),A.removeEventListener("input",Z),Z=null},A.addEventListener("input",Z)}const B=G=>{const W=G?"value":"textContent",{options:V,multiple:R}=A;return R?Array.prototype.filter.call(V,s=>s.selected).map(s=>s[W]):V.selectedIndex===-1?null:V[V.selectedIndex][W]};let i=B(!1);const c=G=>{const W=G.target.options;return Array.prototype.map.call(W,V=>({displayValue:V.textContent,exportValue:V.value}))};return this.enableScripting&&this.hasJSActions?(A.addEventListener("updatefromsandbox",G=>{const W={value(V){Z==null||Z();const R=V.detail.value,s=new Set(Array.isArray(R)?R:[R]);for(const Q of A.options)Q.selected=s.has(Q.value);I.setValue(g,{value:B(!0)}),i=B(!1)},multipleSelection(V){A.multiple=!0},remove(V){const R=A.options,s=V.detail.remove;R[s].selected=!1,A.remove(s),R.length>0&&Array.prototype.findIndex.call(R,h=>h.selected)===-1&&(R[0].selected=!0),I.setValue(g,{value:B(!0),items:c(V)}),i=B(!1)},clear(V){for(;A.length!==0;)A.remove(0);I.setValue(g,{value:null,items:[]}),i=B(!1)},insert(V){const{index:R,displayValue:s,exportValue:Q}=V.detail.insert,h=A.children[R],N=document.createElement("option");N.textContent=s,N.value=Q,h?h.before(N):A.append(N),I.setValue(g,{value:B(!0),items:c(V)}),i=B(!1)},items(V){const{items:R}=V.detail;for(;A.length!==0;)A.remove(0);for(const s of R){const{displayValue:Q,exportValue:h}=s,N=document.createElement("option");N.textContent=Q,N.value=h,A.append(N)}A.options.length>0&&(A.options[0].selected=!0),I.setValue(g,{value:B(!0),items:c(V)}),i=B(!1)},indices(V){const R=new Set(V.detail.indices);for(const s of V.target.options)s.selected=R.has(s.index);I.setValue(g,{value:B(!0)}),i=B(!1)},editable(V){V.target.disabled=!V.detail.editable}};this._dispatchEventFromSandbox(W,G)}),A.addEventListener("input",G=>{var R;const W=B(!0),V=B(!1);I.setValue(g,{value:W}),G.preventDefault(),(R=this.linkService.eventBus)==null||R.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:i,change:V,changeEx:W,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(A,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],G=>G.target.value)):A.addEventListener("input",function(G){I.setValue(g,{value:B(!0)})}),this.data.combo&&this._setTextStyle(A),this._setBackgroundColor(A),this._setDefaultPropertiesFromJS(A),this.container.append(A),this.container}}class Jc extends kI{constructor(I){const{data:g,elements:C}=I;super(I,{isRenderable:kI._hasPopupData(g)}),this.elements=C,this.popup=null}render(){this.container.classList.add("popupAnnotation");const I=this.popup=new Jm({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),g=[];for(const C of this.elements)C.popup=I,g.push(C.data.id),C.addHighlightArea();return this.container.setAttribute("aria-controls",g.map(C=>`${yW}${C}`).join(",")),this.container}}class Jm{constructor({container:I,color:g,elements:C,titleObj:A,modificationDate:l,contentsObj:Z,richText:B,parent:i,rect:c,parentRect:G,open:W}){m(this,wI);m(this,dd,b(this,wI,HR).bind(this));m(this,Ci,b(this,wI,hG).bind(this));m(this,Ai,b(this,wI,Ni).bind(this));m(this,Bd,b(this,wI,Qi).bind(this));m(this,Pl,null);m(this,uI,null);m(this,RA,null);m(this,fl,null);m(this,f0,null);m(this,q0,null);m(this,Fd,null);m(this,sA,!1);m(this,RC,null);m(this,UA,null);m(this,_0,null);m(this,bA,null);m(this,$0,null);m(this,ql,null);m(this,_l,!1);var V;U(this,uI,I),U(this,$0,A),U(this,RA,Z),U(this,bA,B),U(this,q0,i),U(this,Pl,g),U(this,_0,c),U(this,Fd,G),U(this,f0,C),U(this,fl,KW.toDateObject(l)),this.trigger=C.flatMap(R=>R.getElementsToTriggerPopup());for(const R of this.trigger)R.addEventListener("click",F(this,Bd)),R.addEventListener("mouseenter",F(this,Ai)),R.addEventListener("mouseleave",F(this,Ci)),R.classList.add("popupTriggerArea");for(const R of C)(V=R.container)==null||V.addEventListener("keydown",F(this,dd));F(this,uI).hidden=!0,W&&b(this,wI,Qi).call(this)}render(){if(F(this,RC))return;const I=U(this,RC,document.createElement("div"));if(I.className="popup",F(this,Pl)){const l=I.style.outlineColor=x.makeHexColor(...F(this,Pl));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?I.style.backgroundColor=`color-mix(in srgb, ${l} 30%, white)`:I.style.backgroundColor=x.makeHexColor(...F(this,Pl).map(B=>Math.floor(.7*(255-B)+B)))}const g=document.createElement("span");g.className="header";const C=document.createElement("h1");if(g.append(C),{dir:C.dir,str:C.textContent}=F(this,$0),I.append(g),F(this,fl)){const l=document.createElement("span");l.classList.add("popupDate"),l.setAttribute("data-l10n-id","pdfjs-annotation-date-string"),l.setAttribute("data-l10n-args",JSON.stringify({date:F(this,fl).toLocaleDateString(),time:F(this,fl).toLocaleTimeString()})),g.append(l)}const A=F(this,wI,mi);if(A)VV.render({xfaHtml:A,intent:"richText",div:I}),I.lastChild.classList.add("richText","popupContent");else{const l=this._formatContents(F(this,RA));I.append(l)}F(this,uI).append(I)}_formatContents({str:I,dir:g}){const C=document.createElement("p");C.classList.add("popupContent"),C.dir=g;const A=I.split(/(?:\r\n?|\n)/);for(let l=0,Z=A.length;l<Z;++l){const B=A[l];C.append(document.createTextNode(B)),l<Z-1&&C.append(document.createElement("br"))}return C}updateEdited({rect:I,popupContent:g}){var C;F(this,ql)||U(this,ql,{contentsObj:F(this,RA),richText:F(this,bA)}),I&&U(this,UA,null),g&&(U(this,bA,b(this,wI,yR).call(this,g)),U(this,RA,null)),(C=F(this,RC))==null||C.remove(),U(this,RC,null)}resetEdited(){var I;F(this,ql)&&({contentsObj:rg(this,RA)._,richText:rg(this,bA)._}=F(this,ql),U(this,ql,null),(I=F(this,RC))==null||I.remove(),U(this,RC,null),U(this,UA,null))}forceHide(){U(this,_l,this.isVisible),F(this,_l)&&(F(this,uI).hidden=!0)}maybeShow(){F(this,_l)&&(F(this,RC)||b(this,wI,Ni).call(this),U(this,_l,!1),F(this,uI).hidden=!1)}get isVisible(){return F(this,uI).hidden===!1}}dd=new WeakMap,Ci=new WeakMap,Ai=new WeakMap,Bd=new WeakMap,Pl=new WeakMap,uI=new WeakMap,RA=new WeakMap,fl=new WeakMap,f0=new WeakMap,q0=new WeakMap,Fd=new WeakMap,sA=new WeakMap,RC=new WeakMap,UA=new WeakMap,_0=new WeakMap,bA=new WeakMap,$0=new WeakMap,ql=new WeakMap,_l=new WeakMap,wI=new WeakSet,mi=function(){const I=F(this,bA),g=F(this,RA);return I!=null&&I.str&&(!(g!=null&&g.str)||g.str===I.str)&&F(this,bA).html||null},NG=function(){var I,g,C;return((C=(g=(I=F(this,wI,mi))==null?void 0:I.attributes)==null?void 0:g.style)==null?void 0:C.fontSize)||0},tR=function(){var I,g,C;return((C=(g=(I=F(this,wI,mi))==null?void 0:I.attributes)==null?void 0:g.style)==null?void 0:C.color)||null},yR=function(I){const g=[],C={str:I,html:{name:"div",attributes:{dir:"auto"},children:[{name:"p",children:g}]}},A={style:{color:F(this,wI,tR),fontSize:F(this,wI,NG)?`calc(${F(this,wI,NG)}px * var(--scale-factor))`:""}};for(const l of I.split(`
`))g.push({name:"span",value:l,attributes:A});return C},HR=function(I){I.altKey||I.shiftKey||I.ctrlKey||I.metaKey||(I.key==="Enter"||I.key==="Escape"&&F(this,sA))&&b(this,wI,Qi).call(this)},eR=function(){if(F(this,UA)!==null)return;const{page:{view:I},viewport:{rawDims:{pageWidth:g,pageHeight:C,pageX:A,pageY:l}}}=F(this,q0);let Z=!!F(this,Fd),B=Z?F(this,Fd):F(this,_0);for(const s of F(this,f0))if(!B||x.intersect(s.data.rect,B)!==null){B=s.data.rect,Z=!0;break}const i=x.normalizeRect([B[0],I[3]-B[1]+I[1],B[2],I[3]-B[3]+I[1]]),G=Z?B[2]-B[0]+5:0,W=i[0]+G,V=i[1];U(this,UA,[100*(W-A)/g,100*(V-l)/C]);const{style:R}=F(this,uI);R.left=`${F(this,UA)[0]}%`,R.top=`${F(this,UA)[1]}%`},Qi=function(){U(this,sA,!F(this,sA)),F(this,sA)?(b(this,wI,Ni).call(this),F(this,uI).addEventListener("click",F(this,Bd)),F(this,uI).addEventListener("keydown",F(this,dd))):(b(this,wI,hG).call(this),F(this,uI).removeEventListener("click",F(this,Bd)),F(this,uI).removeEventListener("keydown",F(this,dd)))},Ni=function(){F(this,RC)||this.render(),this.isVisible?F(this,sA)&&F(this,uI).classList.add("focused"):(b(this,wI,eR).call(this),F(this,uI).hidden=!1,F(this,uI).style.zIndex=parseInt(F(this,uI).style.zIndex)+1e3)},hG=function(){F(this,uI).classList.remove("focused"),!(F(this,sA)||!this.isVisible)&&(F(this,uI).hidden=!0,F(this,uI).style.zIndex=parseInt(F(this,uI).style.zIndex)-1e3)};class UV extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.textContent=I.data.textContent,this.textPosition=I.data.textPosition,this.annotationEditorType=sI.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const I=document.createElement("div");I.classList.add("annotationTextContent"),I.setAttribute("role","comment");for(const g of this.textContent){const C=document.createElement("span");C.textContent=g,I.append(C)}this.container.append(I)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}get _isEditable(){return this.data.hasOwnCanvas}}class Mm extends kI{constructor(g){super(g,{isRenderable:!0,ignoreBorder:!0});m(this,IB,null)}render(){this.container.classList.add("lineAnnotation");const g=this.data,{width:C,height:A}=$C(g.rect),l=this.svgFactory.create(C,A,!0),Z=U(this,IB,this.svgFactory.createElement("svg:line"));return Z.setAttribute("x1",g.rect[2]-g.lineCoordinates[0]),Z.setAttribute("y1",g.rect[3]-g.lineCoordinates[1]),Z.setAttribute("x2",g.rect[2]-g.lineCoordinates[2]),Z.setAttribute("y2",g.rect[3]-g.lineCoordinates[3]),Z.setAttribute("stroke-width",g.borderStyle.width||1),Z.setAttribute("stroke","transparent"),Z.setAttribute("fill","transparent"),l.append(Z),this.container.append(l),!g.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return F(this,IB)}addHighlightArea(){this.container.classList.add("highlightArea")}}IB=new WeakMap;class Dm extends kI{constructor(g){super(g,{isRenderable:!0,ignoreBorder:!0});m(this,gB,null)}render(){this.container.classList.add("squareAnnotation");const g=this.data,{width:C,height:A}=$C(g.rect),l=this.svgFactory.create(C,A,!0),Z=g.borderStyle.width,B=U(this,gB,this.svgFactory.createElement("svg:rect"));return B.setAttribute("x",Z/2),B.setAttribute("y",Z/2),B.setAttribute("width",C-Z),B.setAttribute("height",A-Z),B.setAttribute("stroke-width",Z||1),B.setAttribute("stroke","transparent"),B.setAttribute("fill","transparent"),l.append(B),this.container.append(l),!g.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return F(this,gB)}addHighlightArea(){this.container.classList.add("highlightArea")}}gB=new WeakMap;class Xm extends kI{constructor(g){super(g,{isRenderable:!0,ignoreBorder:!0});m(this,CB,null)}render(){this.container.classList.add("circleAnnotation");const g=this.data,{width:C,height:A}=$C(g.rect),l=this.svgFactory.create(C,A,!0),Z=g.borderStyle.width,B=U(this,CB,this.svgFactory.createElement("svg:ellipse"));return B.setAttribute("cx",C/2),B.setAttribute("cy",A/2),B.setAttribute("rx",C/2-Z/2),B.setAttribute("ry",A/2-Z/2),B.setAttribute("stroke-width",Z||1),B.setAttribute("stroke","transparent"),B.setAttribute("fill","transparent"),l.append(B),this.container.append(l),!g.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return F(this,CB)}addHighlightArea(){this.container.classList.add("highlightArea")}}CB=new WeakMap;class bV extends kI{constructor(g){super(g,{isRenderable:!0,ignoreBorder:!0});m(this,AB,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const{data:{rect:g,vertices:C,borderStyle:A,popupRef:l}}=this;if(!C)return this.container;const{width:Z,height:B}=$C(g),i=this.svgFactory.create(Z,B,!0);let c=[];for(let W=0,V=C.length;W<V;W+=2){const R=C[W]-g[0],s=g[3]-C[W+1];c.push(`${R},${s}`)}c=c.join(" ");const G=U(this,AB,this.svgFactory.createElement(this.svgElementName));return G.setAttribute("points",c),G.setAttribute("stroke-width",A.width||1),G.setAttribute("stroke","transparent"),G.setAttribute("fill","transparent"),i.append(G),this.container.append(i),!l&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return F(this,AB)}addHighlightArea(){this.container.classList.add("highlightArea")}}AB=new WeakMap;class tm extends bV{constructor(I){super(I),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class ym extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class mV extends kI{constructor(g){super(g,{isRenderable:!0,ignoreBorder:!0});m(this,lB,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=sI.INK}render(){this.container.classList.add(this.containerClassName);const{data:{rect:g,inkLists:C,borderStyle:A,popupRef:l}}=this,{width:Z,height:B}=$C(g),i=this.svgFactory.create(Z,B,!0);for(const c of C){let G=[];for(let V=0,R=c.length;V<R;V+=2){const s=c[V]-g[0],Q=g[3]-c[V+1];G.push(`${s},${Q}`)}G=G.join(" ");const W=this.svgFactory.createElement(this.svgElementName);F(this,lB).push(W),W.setAttribute("points",G),W.setAttribute("stroke-width",A.width||1),W.setAttribute("stroke","transparent"),W.setAttribute("fill","transparent"),!l&&this.hasPopupData&&this._createPopup(),i.append(W)}return this.container.append(i),this.container}getElementsToTriggerPopup(){return F(this,lB)}addHighlightArea(){this.container.classList.add("highlightArea")}}lB=new WeakMap;class Hm extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class em extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class um extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class pm extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class QV extends kI{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class km extends kI{constructor(g){var A;super(g,{isRenderable:!0});m(this,dB);m(this,ZB,null);const{file:C}=this.data;this.filename=C.filename,this.content=C.content,(A=this.linkService.eventBus)==null||A.dispatch("fileattachmentannotation",{source:this,...C})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:g,data:C}=this;let A;C.hasAppearance||C.fillAlpha===0?A=document.createElement("div"):(A=document.createElement("img"),A.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(C.name)?"paperclip":"pushpin"}.svg`,C.fillAlpha&&C.fillAlpha<1&&(A.style=`filter: opacity(${Math.round(C.fillAlpha*100)}%);`)),A.addEventListener("dblclick",b(this,dB,oG).bind(this)),U(this,ZB,A);const{isMac:l}=wg.platform;return g.addEventListener("keydown",Z=>{Z.key==="Enter"&&(l?Z.metaKey:Z.ctrlKey)&&b(this,dB,oG).call(this)}),!C.popupRef&&this.hasPopupData?this._createPopup():A.classList.add("popupTriggerArea"),g.append(A),g}getElementsToTriggerPopup(){return F(this,ZB)}addHighlightArea(){this.container.classList.add("highlightArea")}}ZB=new WeakMap,dB=new WeakSet,oG=function(){var g;(g=this.downloadManager)==null||g.openOrDownloadData(this.content,this.filename)};class Km{constructor({div:I,accessibilityManager:g,annotationCanvasMap:C,annotationEditorUIManager:A,page:l,viewport:Z}){m(this,IZ);m(this,BB,null);m(this,$l,null);m(this,id,new Map);this.div=I,U(this,BB,g),U(this,$l,C),this.page=l,this.viewport=Z,this.zIndex=0,this._annotationEditorUIManager=A}async render(I){var Z;const{annotations:g}=I,C=this.div;Rl(C,this.viewport);const A=new Map,l={data:null,layer:C,linkService:I.linkService,downloadManager:I.downloadManager,imageResourcesPath:I.imageResourcesPath||"",renderForms:I.renderForms!==!1,svgFactory:new Fc,annotationStorage:I.annotationStorage||new bc,enableScripting:I.enableScripting===!0,hasJSActions:I.hasJSActions,fieldObjects:I.fieldObjects,parent:this,elements:null};for(const B of g){if(B.noHTML)continue;const i=B.annotationType===xI.POPUP;if(i){const W=A.get(B.id);if(!W)continue;l.elements=W}else{const{width:W,height:V}=$C(B.rect);if(W<=0||V<=0)continue}l.data=B;const c=hm.create(l);if(!c.isRenderable)continue;if(!i&&B.popupRef){const W=A.get(B.popupRef);W?W.push(c):A.set(B.popupRef,[c])}const G=c.render();B.hidden&&(G.style.visibility="hidden"),b(this,IZ,uR).call(this,G,B.id),c.annotationEditorType>0&&(F(this,id).set(c.data.id,c),(Z=this._annotationEditorUIManager)==null||Z.renderAnnotationElement(c))}b(this,IZ,aG).call(this)}update({viewport:I}){const g=this.div;this.viewport=I,Rl(g,{rotation:I.rotation}),b(this,IZ,aG).call(this),g.hidden=!1}getEditableAnnotations(){return Array.from(F(this,id).values())}getEditableAnnotation(I){return F(this,id).get(I)}}BB=new WeakMap,$l=new WeakMap,id=new WeakMap,IZ=new WeakSet,uR=function(I,g){var A;const C=I.firstChild||I;C.id=`${yW}${g}`,this.div.append(I),(A=F(this,BB))==null||A.moveElementInDOM(this.div,I,C,!1)},aG=function(){if(!F(this,$l))return;const I=this.div;for(const[g,C]of F(this,$l)){const A=I.querySelector(`[data-annotation-id="${g}"]`);if(!A)continue;C.className="annotationContent";const{firstChild:l}=A;l?l.nodeName==="CANVAS"?l.replaceWith(C):l.classList.contains("annotationContent")?l.after(C):l.before(C):A.append(C)}F(this,$l).clear()};const HF=/\r\n?|\n/g,DI=class DI extends hI{constructor(g){super({...g,name:"freeTextEditor"});m(this,EI);m(this,FB,this.editorDivBlur.bind(this));m(this,iB,this.editorDivFocus.bind(this));m(this,cB,this.editorDivInput.bind(this));m(this,GB,this.editorDivKeydown.bind(this));m(this,WB,this.editorDivPaste.bind(this));m(this,sC);m(this,zg,"");m(this,VB,`${this.id}-editor`);m(this,Lg);m(this,cd,null);U(this,sC,g.color||DI._defaultColor||hI._defaultLineColor),U(this,Lg,g.fontSize||DI._defaultFontSize)}static get _keyboardManager(){const g=DI.prototype,C=Z=>Z.isEmpty(),A=sl.TRANSLATE_SMALL,l=sl.TRANSLATE_BIG;return bI(this,"_keyboardManager",new fd([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],g.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],g.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],g._translateEmpty,{args:[-A,0],checker:C}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],g._translateEmpty,{args:[-l,0],checker:C}],[["ArrowRight","mac+ArrowRight"],g._translateEmpty,{args:[A,0],checker:C}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],g._translateEmpty,{args:[l,0],checker:C}],[["ArrowUp","mac+ArrowUp"],g._translateEmpty,{args:[0,-A],checker:C}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],g._translateEmpty,{args:[0,-l],checker:C}],[["ArrowDown","mac+ArrowDown"],g._translateEmpty,{args:[0,A],checker:C}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],g._translateEmpty,{args:[0,l],checker:C}]]))}static initialize(g,C){hI.initialize(g,C,{strings:["pdfjs-free-text-default-content"]});const A=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(A.getPropertyValue("--freetext-padding"))}static updateDefaultParams(g,C){switch(g){case gI.FREETEXT_SIZE:DI._defaultFontSize=C;break;case gI.FREETEXT_COLOR:DI._defaultColor=C;break}}updateParams(g,C){switch(g){case gI.FREETEXT_SIZE:b(this,EI,pR).call(this,C);break;case gI.FREETEXT_COLOR:b(this,EI,kR).call(this,C);break}}static get defaultPropertiesToUpdate(){return[[gI.FREETEXT_SIZE,DI._defaultFontSize],[gI.FREETEXT_COLOR,DI._defaultColor||hI._defaultLineColor]]}get propertiesToUpdate(){return[[gI.FREETEXT_SIZE,F(this,Lg)],[gI.FREETEXT_COLOR,F(this,sC)]]}_translateEmpty(g,C){this._uiManager.translateSelectedEditors(g,C,!0)}getInitialTranslation(){const g=this.parentScale;return[-DI._internalPadding*g,-(DI._internalPadding+F(this,Lg))*g]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){if(this.isInEditMode())return;this.parent.setEditingState(!1),this.parent.updateToolbar(sI.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant");const g=this._uiManager._signal;this.editorDiv.addEventListener("keydown",F(this,GB),{signal:g}),this.editorDiv.addEventListener("focus",F(this,iB),{signal:g}),this.editorDiv.addEventListener("blur",F(this,FB),{signal:g}),this.editorDiv.addEventListener("input",F(this,cB),{signal:g}),this.editorDiv.addEventListener("paste",F(this,WB),{signal:g})}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",F(this,VB)),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",F(this,GB)),this.editorDiv.removeEventListener("focus",F(this,iB)),this.editorDiv.removeEventListener("blur",F(this,FB)),this.editorDiv.removeEventListener("input",F(this,cB)),this.editorDiv.removeEventListener("paste",F(this,WB)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"))}focusin(g){this._focusEventsAllowed&&(super.focusin(g),g.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var g;this.width||(this.enableEditMode(),this.editorDiv.focus(),(g=this._initialOptions)!=null&&g.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const g=F(this,zg),C=U(this,zg,b(this,EI,KR).call(this).trimEnd());if(g===C)return;const A=l=>{if(U(this,zg,l),!l){this.remove();return}b(this,EI,ai).call(this),this._uiManager.rebuild(this),b(this,EI,hi).call(this)};this.addCommands({cmd:()=>{A(C)},undo:()=>{A(g)},mustExec:!1}),b(this,EI,hi).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(g){this.enterInEditMode()}keydown(g){g.target===this.div&&g.key==="Enter"&&(this.enterInEditMode(),g.preventDefault())}editorDivKeydown(g){DI._keyboardManager.exec(this,g)}editorDivFocus(g){this.isEditing=!0}editorDivBlur(g){this.isEditing=!1}editorDivInput(g){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let g,C;this.width&&(g=this.x,C=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",F(this,VB)),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text"),this.enableEditing(),hI._l10nPromise.get("pdfjs-free-text-default-content").then(l=>{var Z;return(Z=this.editorDiv)==null?void 0:Z.setAttribute("default-content",l)}),this.editorDiv.contentEditable=!0;const{style:A}=this.editorDiv;if(A.fontSize=`calc(${F(this,Lg)}px * var(--scale-factor))`,A.color=F(this,sC),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),nF(this,this.div,["dblclick","keydown"]),this.width){const[l,Z]=this.parentDimensions;if(this.annotationElementId){const{position:B}=F(this,cd);let[i,c]=this.getInitialTranslation();[i,c]=this.pageTranslationToScreen(i,c);const[G,W]=this.pageDimensions,[V,R]=this.pageTranslation;let s,Q;switch(this.rotation){case 0:s=g+(B[0]-V)/G,Q=C+this.height-(B[1]-R)/W;break;case 90:s=g+(B[0]-V)/G,Q=C-(B[1]-R)/W,[i,c]=[c,-i];break;case 180:s=g-this.width+(B[0]-V)/G,Q=C-(B[1]-R)/W,[i,c]=[-i,-c];break;case 270:s=g+(B[0]-V-this.height*W)/G,Q=C+(B[1]-R-this.width*G)/W,[i,c]=[-c,i];break}this.setAt(s*l,Q*Z,i,c)}else this.setAt(g*l,C*Z,this.width*l,this.height*Z);b(this,EI,ai).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}editorDivPaste(g){var s,Q,h;const C=g.clipboardData||window.clipboardData,{types:A}=C;if(A.length===1&&A[0]==="text/plain")return;g.preventDefault();const l=b(s=DI,mA,YG).call(s,C.getData("text")||"").replaceAll(HF,`
`);if(!l)return;const Z=window.getSelection();if(!Z.rangeCount)return;this.editorDiv.normalize(),Z.deleteFromDocument();const B=Z.getRangeAt(0);if(!l.includes(`
`)){B.insertNode(document.createTextNode(l)),this.editorDiv.normalize(),Z.collapseToStart();return}const{startContainer:i,startOffset:c}=B,G=[],W=[];if(i.nodeType===Node.TEXT_NODE){const N=i.parentElement;if(W.push(i.nodeValue.slice(c).replaceAll(HF,"")),N!==this.editorDiv){let o=G;for(const Y of this.editorDiv.childNodes){if(Y===N){o=W;continue}o.push(b(Q=DI,mA,oi).call(Q,Y))}}G.push(i.nodeValue.slice(0,c).replaceAll(HF,""))}else if(i===this.editorDiv){let N=G,o=0;for(const Y of this.editorDiv.childNodes)o++===c&&(N=W),N.push(b(h=DI,mA,oi).call(h,Y))}U(this,zg,`${G.join(`
`)}${l}${W.join(`
`)}`),b(this,EI,ai).call(this);const V=new Range;let R=G.reduce((N,o)=>N+o.length,0);for(const{firstChild:N}of this.editorDiv.childNodes)if(N.nodeType===Node.TEXT_NODE){const o=N.nodeValue.length;if(R<=o){V.setStart(N,R),V.setEnd(N,R);break}R-=o}Z.removeAllRanges(),Z.addRange(V)}get contentDiv(){return this.editorDiv}static deserialize(g,C,A){var B;let l=null;if(g instanceof UV){const{data:{defaultAppearanceData:{fontSize:i,fontColor:c},rect:G,rotation:W,id:V},textContent:R,textPosition:s,parent:{page:{pageNumber:Q}}}=g;if(!R||R.length===0)return null;l=g={annotationType:sI.FREETEXT,color:Array.from(c),fontSize:i,value:R.join(`
`),position:s,pageIndex:Q-1,rect:G.slice(0),rotation:W,id:V,deleted:!1}}const Z=super.deserialize(g,C,A);return U(Z,Lg,g.fontSize),U(Z,sC,x.makeHexColor(...g.color)),U(Z,zg,b(B=DI,mA,YG).call(B,g.value)),Z.annotationElementId=g.id||null,U(Z,cd,l),Z}serialize(g=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const C=DI._internalPadding*this.parentScale,A=this.getRect(C,C),l=hI._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:F(this,sC)),Z={annotationType:sI.FREETEXT,color:l,fontSize:F(this,Lg),value:b(this,EI,TR).call(this),pageIndex:this.pageIndex,rect:A,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return g?Z:this.annotationElementId&&!b(this,EI,zR).call(this,Z)?null:(Z.id=this.annotationElementId,Z)}renderAnnotationElement(g){const C=super.renderAnnotationElement(g);if(this.deleted)return C;const{style:A}=C;A.fontSize=`calc(${F(this,Lg)}px * var(--scale-factor))`,A.color=F(this,sC),C.replaceChildren();for(const Z of F(this,zg).split(`
`)){const B=document.createElement("div");B.append(Z?document.createTextNode(Z):document.createElement("br")),C.append(B)}const l=DI._internalPadding*this.parentScale;return g.updateEdited({rect:this.getRect(l,l),popupContent:F(this,zg)}),C}resetAnnotationElement(g){super.resetAnnotationElement(g),g.resetEdited()}};FB=new WeakMap,iB=new WeakMap,cB=new WeakMap,GB=new WeakMap,WB=new WeakMap,sC=new WeakMap,zg=new WeakMap,VB=new WeakMap,Lg=new WeakMap,cd=new WeakMap,EI=new WeakSet,pR=function(g){const C=l=>{this.editorDiv.style.fontSize=`calc(${l}px * var(--scale-factor))`,this.translate(0,-(l-F(this,Lg))*this.parentScale),U(this,Lg,l),b(this,EI,hi).call(this)},A=F(this,Lg);this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},kR=function(g){const C=l=>{U(this,sC,this.editorDiv.style.color=l)},A=F(this,sC);this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},KR=function(){var C;const g=[];this.editorDiv.normalize();for(const A of this.editorDiv.childNodes)g.push(b(C=DI,mA,oi).call(C,A));return g.join(`
`)},hi=function(){const[g,C]=this.parentDimensions;let A;if(this.isAttachedToDOM)A=this.div.getBoundingClientRect();else{const{currentLayer:l,div:Z}=this,B=Z.style.display,i=Z.classList.contains("hidden");Z.classList.remove("hidden"),Z.style.display="hidden",l.div.append(this.div),A=Z.getBoundingClientRect(),Z.remove(),Z.style.display=B,Z.classList.toggle("hidden",i)}this.rotation%180===this.parentRotation%180?(this.width=A.width/g,this.height=A.height/C):(this.width=A.height/g,this.height=A.width/C),this.fixAndSetPosition()},mA=new WeakSet,oi=function(g){return(g.nodeType===Node.TEXT_NODE?g.nodeValue:g.innerText).replaceAll(HF,"")},ai=function(){if(this.editorDiv.replaceChildren(),!!F(this,zg))for(const g of F(this,zg).split(`
`)){const C=document.createElement("div");C.append(g?document.createTextNode(g):document.createElement("br")),this.editorDiv.append(C)}},TR=function(){return F(this,zg).replaceAll(" "," ")},YG=function(g){return g.replaceAll(" "," ")},zR=function(g){const{value:C,fontSize:A,color:l,pageIndex:Z}=F(this,cd);return this._hasBeenMoved||g.value!==C||g.fontSize!==A||g.color.some((B,i)=>B!==l[i])||g.pageIndex!==Z},m(DI,mA),dI(DI,"_freeTextDefaultContent",""),dI(DI,"_internalPadding",0),dI(DI,"_defaultColor",null),dI(DI,"_defaultFontSize",10),dI(DI,"_type","freetext"),dI(DI,"_editorType",sI.FREETEXT);let Mc=DI;class Dc{constructor(I,g=0,C=0,A=!0){m(this,Ng);m(this,RB);m(this,_A,[]);m(this,UC,[]);let l=1/0,Z=-1/0,B=1/0,i=-1/0;const G=10**-4;for(const{x:N,y:o,width:Y,height:n}of I){const a=Math.floor((N-g)/G)*G,w=Math.ceil((N+Y+g)/G)*G,X=Math.floor((o-g)/G)*G,J=Math.ceil((o+n+g)/G)*G,y=[a,X,J,!0],z=[w,X,J,!1];F(this,_A).push(y,z),l=Math.min(l,a),Z=Math.max(Z,w),B=Math.min(B,X),i=Math.max(i,J)}const W=Z-l+2*C,V=i-B+2*C,R=l-C,s=B-C,Q=F(this,_A).at(A?-1:-2),h=[Q[0],Q[2]];for(const N of F(this,_A)){const[o,Y,n]=N;N[0]=(o-R)/W,N[1]=(Y-s)/V,N[2]=(n-s)/V}U(this,RB,{x:R,y:s,width:W,height:V,lastPoint:h})}getOutlines(){F(this,_A).sort((g,C)=>g[0]-C[0]||g[1]-C[1]||g[2]-C[2]);const I=[];for(const g of F(this,_A))g[3]?(I.push(...b(this,Ng,wG).call(this,g)),b(this,Ng,ER).call(this,g)):(b(this,Ng,jR).call(this,g),I.push(...b(this,Ng,wG).call(this,g)));return b(this,Ng,LR).call(this,I)}}RB=new WeakMap,_A=new WeakMap,UC=new WeakMap,Ng=new WeakSet,LR=function(I){const g=[],C=new Set;for(const Z of I){const[B,i,c]=Z;g.push([B,i,Z],[B,c,Z])}g.sort((Z,B)=>Z[1]-B[1]||Z[0]-B[0]);for(let Z=0,B=g.length;Z<B;Z+=2){const i=g[Z][2],c=g[Z+1][2];i.push(c),c.push(i),C.add(i),C.add(c)}const A=[];let l;for(;C.size>0;){const Z=C.values().next().value;let[B,i,c,G,W]=Z;C.delete(Z);let V=B,R=i;for(l=[B,c],A.push(l);;){let s;if(C.has(G))s=G;else if(C.has(W))s=W;else break;C.delete(s),[B,i,c,G,W]=s,V!==B&&(l.push(V,R,B,R===i?i:c),V=B),R=R===i?c:i}l.push(V,R)}return new Tm(A,F(this,RB))},Yi=function(I){const g=F(this,UC);let C=0,A=g.length-1;for(;C<=A;){const l=C+A>>1,Z=g[l][0];if(Z===I)return l;Z<I?C=l+1:A=l-1}return A+1},ER=function([,I,g]){const C=b(this,Ng,Yi).call(this,I);F(this,UC).splice(C,0,[I,g])},jR=function([,I,g]){const C=b(this,Ng,Yi).call(this,I);for(let A=C;A<F(this,UC).length;A++){const[l,Z]=F(this,UC)[A];if(l!==I)break;if(l===I&&Z===g){F(this,UC).splice(A,1);return}}for(let A=C-1;A>=0;A--){const[l,Z]=F(this,UC)[A];if(l!==I)break;if(l===I&&Z===g){F(this,UC).splice(A,1);return}}},wG=function(I){const[g,C,A]=I,l=[[g,C,A]],Z=b(this,Ng,Yi).call(this,A);for(let B=0;B<Z;B++){const[i,c]=F(this,UC)[B];for(let G=0,W=l.length;G<W;G++){const[,V,R]=l[G];if(!(c<=V||R<=i)){if(V>=i){if(R>c)l[G][1]=c;else{if(W===1)return[];l.splice(G,1),G--,W--}continue}l[G][2]=i,R>c&&l.push([g,c,R])}}}return l};class NV{toSVGPath(){throw new Error("Abstract method `toSVGPath` must be implemented.")}get box(){throw new Error("Abstract getter `box` must be implemented.")}serialize(I,g){throw new Error("Abstract method `serialize` must be implemented.")}get free(){return this instanceof Xc}}class Tm extends NV{constructor(g,C){super();m(this,sB);m(this,Gd);U(this,Gd,g),U(this,sB,C)}toSVGPath(){const g=[];for(const C of F(this,Gd)){let[A,l]=C;g.push(`M${A} ${l}`);for(let Z=2;Z<C.length;Z+=2){const B=C[Z],i=C[Z+1];B===A?(g.push(`V${i}`),l=i):i===l&&(g.push(`H${B}`),A=B)}g.push("Z")}return g.join(" ")}serialize([g,C,A,l],Z){const B=[],i=A-g,c=l-C;for(const G of F(this,Gd)){const W=new Array(G.length);for(let V=0;V<G.length;V+=2)W[V]=g+G[V]*i,W[V+1]=l-G[V+1]*c;B.push(W)}return B}get box(){return F(this,sB)}}sB=new WeakMap,Gd=new WeakMap;const NA=class NA{constructor({x:I,y:g},C,A,l,Z,B=0){m(this,QB);m(this,pC);m(this,QA,[]);m(this,Wd);m(this,Vd);m(this,kC,[]);m(this,VI,new Float64Array(18));m(this,gZ);m(this,CZ);m(this,UB);m(this,bB);m(this,Rd);m(this,sd);m(this,$A,[]);U(this,pC,C),U(this,sd,l*A),U(this,Vd,Z),F(this,VI).set([NaN,NaN,NaN,NaN,I,g],6),U(this,Wd,B),U(this,bB,F(NA,mB)*A),U(this,UB,F(NA,Zi)*A),U(this,Rd,A),F(this,$A).push(I,g)}get free(){return!0}isEmpty(){return isNaN(F(this,VI)[8])}add({x:I,y:g}){var y;U(this,gZ,I),U(this,CZ,g);const[C,A,l,Z]=F(this,pC);let[B,i,c,G]=F(this,VI).subarray(8,12);const W=I-c,V=g-G,R=Math.hypot(W,V);if(R<F(this,UB))return!1;const s=R-F(this,bB),Q=s/R,h=Q*W,N=Q*V;let o=B,Y=i;B=c,i=G,c+=h,G+=N,(y=F(this,$A))==null||y.push(I,g);const n=-N/s,a=h/s,w=n*F(this,sd),X=a*F(this,sd);return F(this,VI).set(F(this,VI).subarray(2,8),0),F(this,VI).set([c+w,G+X],4),F(this,VI).set(F(this,VI).subarray(14,18),12),F(this,VI).set([c-w,G-X],16),isNaN(F(this,VI)[6])?(F(this,kC).length===0&&(F(this,VI).set([B+w,i+X],2),F(this,kC).push(NaN,NaN,NaN,NaN,(B+w-C)/l,(i+X-A)/Z),F(this,VI).set([B-w,i-X],14),F(this,QA).push(NaN,NaN,NaN,NaN,(B-w-C)/l,(i-X-A)/Z)),F(this,VI).set([o,Y,B,i,c,G],6),!this.isEmpty()):(F(this,VI).set([o,Y,B,i,c,G],6),Math.abs(Math.atan2(Y-i,o-B)-Math.atan2(N,h))<Math.PI/2?([B,i,c,G]=F(this,VI).subarray(2,6),F(this,kC).push(NaN,NaN,NaN,NaN,((B+c)/2-C)/l,((i+G)/2-A)/Z),[B,i,o,Y]=F(this,VI).subarray(14,18),F(this,QA).push(NaN,NaN,NaN,NaN,((o+B)/2-C)/l,((Y+i)/2-A)/Z),!0):([o,Y,B,i,c,G]=F(this,VI).subarray(0,6),F(this,kC).push(((o+5*B)/6-C)/l,((Y+5*i)/6-A)/Z,((5*B+c)/6-C)/l,((5*i+G)/6-A)/Z,((B+c)/2-C)/l,((i+G)/2-A)/Z),[c,G,B,i,o,Y]=F(this,VI).subarray(12,18),F(this,QA).push(((o+5*B)/6-C)/l,((Y+5*i)/6-A)/Z,((5*B+c)/6-C)/l,((5*i+G)/6-A)/Z,((B+c)/2-C)/l,((i+G)/2-A)/Z),!0))}toSVGPath(){if(this.isEmpty())return"";const I=F(this,kC),g=F(this,QA),C=F(this,VI).subarray(4,6),A=F(this,VI).subarray(16,18),[l,Z,B,i]=F(this,pC),[c,G,W,V]=b(this,QB,nG).call(this);if(isNaN(F(this,VI)[6])&&!this.isEmpty())return`M${(F(this,VI)[2]-l)/B} ${(F(this,VI)[3]-Z)/i} L${(F(this,VI)[4]-l)/B} ${(F(this,VI)[5]-Z)/i} L${c} ${G} L${W} ${V} L${(F(this,VI)[16]-l)/B} ${(F(this,VI)[17]-Z)/i} L${(F(this,VI)[14]-l)/B} ${(F(this,VI)[15]-Z)/i} Z`;const R=[];R.push(`M${I[4]} ${I[5]}`);for(let s=6;s<I.length;s+=6)isNaN(I[s])?R.push(`L${I[s+4]} ${I[s+5]}`):R.push(`C${I[s]} ${I[s+1]} ${I[s+2]} ${I[s+3]} ${I[s+4]} ${I[s+5]}`);R.push(`L${(C[0]-l)/B} ${(C[1]-Z)/i} L${c} ${G} L${W} ${V} L${(A[0]-l)/B} ${(A[1]-Z)/i}`);for(let s=g.length-6;s>=6;s-=6)isNaN(g[s])?R.push(`L${g[s+4]} ${g[s+5]}`):R.push(`C${g[s]} ${g[s+1]} ${g[s+2]} ${g[s+3]} ${g[s+4]} ${g[s+5]}`);return R.push(`L${g[4]} ${g[5]} Z`),R.join(" ")}getOutlines(){var N;const I=F(this,kC),g=F(this,QA),C=F(this,VI),A=C.subarray(4,6),l=C.subarray(16,18),[Z,B,i,c]=F(this,pC),G=new Float64Array((((N=F(this,$A))==null?void 0:N.length)??0)+2);for(let o=0,Y=G.length-2;o<Y;o+=2)G[o]=(F(this,$A)[o]-Z)/i,G[o+1]=(F(this,$A)[o+1]-B)/c;G[G.length-2]=(F(this,gZ)-Z)/i,G[G.length-1]=(F(this,CZ)-B)/c;const[W,V,R,s]=b(this,QB,nG).call(this);if(isNaN(C[6])&&!this.isEmpty()){const o=new Float64Array(36);return o.set([NaN,NaN,NaN,NaN,(C[2]-Z)/i,(C[3]-B)/c,NaN,NaN,NaN,NaN,(C[4]-Z)/i,(C[5]-B)/c,NaN,NaN,NaN,NaN,W,V,NaN,NaN,NaN,NaN,R,s,NaN,NaN,NaN,NaN,(C[16]-Z)/i,(C[17]-B)/c,NaN,NaN,NaN,NaN,(C[14]-Z)/i,(C[15]-B)/c],0),new Xc(o,G,F(this,pC),F(this,Rd),F(this,Wd),F(this,Vd))}const Q=new Float64Array(F(this,kC).length+24+F(this,QA).length);let h=I.length;for(let o=0;o<h;o+=2){if(isNaN(I[o])){Q[o]=Q[o+1]=NaN;continue}Q[o]=I[o],Q[o+1]=I[o+1]}Q.set([NaN,NaN,NaN,NaN,(A[0]-Z)/i,(A[1]-B)/c,NaN,NaN,NaN,NaN,W,V,NaN,NaN,NaN,NaN,R,s,NaN,NaN,NaN,NaN,(l[0]-Z)/i,(l[1]-B)/c],h),h+=24;for(let o=g.length-6;o>=6;o-=6)for(let Y=0;Y<6;Y+=2){if(isNaN(g[o+Y])){Q[h]=Q[h+1]=NaN,h+=2;continue}Q[h]=g[o+Y],Q[h+1]=g[o+Y+1],h+=2}return Q.set([NaN,NaN,NaN,NaN,g[4],g[5]],h),new Xc(Q,G,F(this,pC),F(this,Rd),F(this,Wd),F(this,Vd))}};pC=new WeakMap,QA=new WeakMap,Wd=new WeakMap,Vd=new WeakMap,kC=new WeakMap,VI=new WeakMap,gZ=new WeakMap,CZ=new WeakMap,UB=new WeakMap,bB=new WeakMap,Rd=new WeakMap,sd=new WeakMap,$A=new WeakMap,mB=new WeakMap,li=new WeakMap,Zi=new WeakMap,QB=new WeakSet,nG=function(){const I=F(this,VI).subarray(4,6),g=F(this,VI).subarray(16,18),[C,A,l,Z]=F(this,pC);return[(F(this,gZ)+(I[0]-g[0])/2-C)/l,(F(this,CZ)+(I[1]-g[1])/2-A)/Z,(F(this,gZ)+(g[0]-I[0])/2-C)/l,(F(this,CZ)+(g[1]-I[1])/2-A)/Z]},m(NA,mB,8),m(NA,li,2),m(NA,Zi,F(NA,mB)+F(NA,li));let eF=NA;class Xc extends NV{constructor(g,C,A,l,Z,B){super();m(this,Xg);m(this,Ud);m(this,AZ,null);m(this,hA);m(this,NB);m(this,Eg);m(this,hB);m(this,KI);U(this,KI,g),U(this,Eg,C),U(this,Ud,A),U(this,hB,l),U(this,hA,Z),U(this,NB,B),b(this,Xg,xR).call(this,B);const{x:i,y:c,width:G,height:W}=F(this,AZ);for(let V=0,R=g.length;V<R;V+=2)g[V]=(g[V]-i)/G,g[V+1]=(g[V+1]-c)/W;for(let V=0,R=C.length;V<R;V+=2)C[V]=(C[V]-i)/G,C[V+1]=(C[V+1]-c)/W}toSVGPath(){const g=[`M${F(this,KI)[4]} ${F(this,KI)[5]}`];for(let C=6,A=F(this,KI).length;C<A;C+=6){if(isNaN(F(this,KI)[C])){g.push(`L${F(this,KI)[C+4]} ${F(this,KI)[C+5]}`);continue}g.push(`C${F(this,KI)[C]} ${F(this,KI)[C+1]} ${F(this,KI)[C+2]} ${F(this,KI)[C+3]} ${F(this,KI)[C+4]} ${F(this,KI)[C+5]}`)}return g.push("Z"),g.join(" ")}serialize([g,C,A,l],Z){const B=A-g,i=l-C;let c,G;switch(Z){case 0:c=b(this,Xg,jB).call(this,F(this,KI),g,l,B,-i),G=b(this,Xg,jB).call(this,F(this,Eg),g,l,B,-i);break;case 90:c=b(this,Xg,xB).call(this,F(this,KI),g,C,B,i),G=b(this,Xg,xB).call(this,F(this,Eg),g,C,B,i);break;case 180:c=b(this,Xg,jB).call(this,F(this,KI),A,C,-B,i),G=b(this,Xg,jB).call(this,F(this,Eg),A,C,-B,i);break;case 270:c=b(this,Xg,xB).call(this,F(this,KI),A,l,-B,-i),G=b(this,Xg,xB).call(this,F(this,Eg),A,l,-B,-i);break}return{outline:Array.from(c),points:[Array.from(G)]}}get box(){return F(this,AZ)}getNewOutline(g,C){const{x:A,y:l,width:Z,height:B}=F(this,AZ),[i,c,G,W]=F(this,Ud),V=Z*G,R=B*W,s=A*G+i,Q=l*W+c,h=new eF({x:F(this,Eg)[0]*V+s,y:F(this,Eg)[1]*R+Q},F(this,Ud),F(this,hB),g,F(this,NB),C??F(this,hA));for(let N=2;N<F(this,Eg).length;N+=2)h.add({x:F(this,Eg)[N]*V+s,y:F(this,Eg)[N+1]*R+Q});return h.getOutlines()}}Ud=new WeakMap,AZ=new WeakMap,hA=new WeakMap,NB=new WeakMap,Eg=new WeakMap,hB=new WeakMap,KI=new WeakMap,Xg=new WeakSet,jB=function(g,C,A,l,Z){const B=new Float64Array(g.length);for(let i=0,c=g.length;i<c;i+=2)B[i]=C+g[i]*l,B[i+1]=A+g[i+1]*Z;return B},xB=function(g,C,A,l,Z){const B=new Float64Array(g.length);for(let i=0,c=g.length;i<c;i+=2)B[i]=C+g[i+1]*l,B[i+1]=A+g[i]*Z;return B},xR=function(g){const C=F(this,KI);let A=C[4],l=C[5],Z=A,B=l,i=A,c=l,G=A,W=l;const V=g?Math.max:Math.min;for(let N=6,o=C.length;N<o;N+=6){if(isNaN(C[N]))Z=Math.min(Z,C[N+4]),B=Math.min(B,C[N+5]),i=Math.max(i,C[N+4]),c=Math.max(c,C[N+5]),W<C[N+5]?(G=C[N+4],W=C[N+5]):W===C[N+5]&&(G=V(G,C[N+4]));else{const Y=x.bezierBoundingBox(A,l,...C.slice(N,N+6));Z=Math.min(Z,Y[0]),B=Math.min(B,Y[1]),i=Math.max(i,Y[2]),c=Math.max(c,Y[3]),W<Y[3]?(G=Y[2],W=Y[3]):W===Y[3]&&(G=V(G,Y[2]))}A=C[N+4],l=C[N+5]}const R=Z-F(this,hA),s=B-F(this,hA),Q=i-Z+2*F(this,hA),h=c-B+2*F(this,hA);U(this,AZ,{x:R,y:s,width:Q,height:h,lastPoint:[G,W]})};const oA=class oA{constructor({editor:I=null,uiManager:g=null}){m(this,SI);m(this,oB,b(this,SI,OR).bind(this));m(this,aB,b(this,SI,rR).bind(this));m(this,bC,null);m(this,lZ,null);m(this,bd);m(this,vI,null);m(this,YB,!1);m(this,md,!1);m(this,wB,null);m(this,nB);m(this,mC,null);m(this,Qd);var C;I?(U(this,md,!1),U(this,Qd,gI.HIGHLIGHT_COLOR),U(this,wB,I)):(U(this,md,!0),U(this,Qd,gI.HIGHLIGHT_DEFAULT_COLOR)),U(this,mC,(I==null?void 0:I._uiManager)||g),U(this,nB,F(this,mC)._eventBus),U(this,bd,(I==null?void 0:I.color)||((C=F(this,mC))==null?void 0:C.highlightColors.values().next().value)||"#FFFF98")}static get _keyboardManager(){return bI(this,"_keyboardManager",new fd([[["Escape","mac+Escape"],oA.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],oA.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],oA.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],oA.prototype._moveToPrevious],[["Home","mac+Home"],oA.prototype._moveToBeginning],[["End","mac+End"],oA.prototype._moveToEnd]]))}renderButton(){const I=U(this,bC,document.createElement("button"));I.className="colorPicker",I.tabIndex="0",I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),I.setAttribute("aria-haspopup",!0);const g=F(this,mC)._signal;I.addEventListener("click",b(this,SI,QZ).bind(this),{signal:g}),I.addEventListener("keydown",F(this,oB),{signal:g});const C=U(this,lZ,document.createElement("span"));return C.className="swatch",C.setAttribute("aria-hidden",!0),C.style.backgroundColor=F(this,bd),I.append(C),I}renderMainDropdown(){const I=U(this,vI,b(this,SI,SG).call(this));return I.setAttribute("aria-orientation","horizontal"),I.setAttribute("aria-labelledby","highlightColorPickerLabel"),I}_colorSelectFromKeyboard(I){if(I.target===F(this,bC)){b(this,SI,QZ).call(this,I);return}const g=I.target.getAttribute("data-color");g&&b(this,SI,JG).call(this,g,I)}_moveToNext(I){var g,C;if(!F(this,SI,Fl)){b(this,SI,QZ).call(this,I);return}if(I.target===F(this,bC)){(g=F(this,vI).firstChild)==null||g.focus();return}(C=I.target.nextSibling)==null||C.focus()}_moveToPrevious(I){var g,C;if(I.target===((g=F(this,vI))==null?void 0:g.firstChild)||I.target===F(this,bC)){F(this,SI,Fl)&&this._hideDropdownFromKeyboard();return}F(this,SI,Fl)||b(this,SI,QZ).call(this,I),(C=I.target.previousSibling)==null||C.focus()}_moveToBeginning(I){var g;if(!F(this,SI,Fl)){b(this,SI,QZ).call(this,I);return}(g=F(this,vI).firstChild)==null||g.focus()}_moveToEnd(I){var g;if(!F(this,SI,Fl)){b(this,SI,QZ).call(this,I);return}(g=F(this,vI).lastChild)==null||g.focus()}hideDropdown(){var I;(I=F(this,vI))==null||I.classList.add("hidden"),window.removeEventListener("pointerdown",F(this,aB))}_hideDropdownFromKeyboard(){var I;if(!F(this,md)){if(!F(this,SI,Fl)){(I=F(this,wB))==null||I.unselect();return}this.hideDropdown(),F(this,bC).focus({preventScroll:!0,focusVisible:F(this,YB)})}}updateColor(I){if(F(this,lZ)&&(F(this,lZ).style.backgroundColor=I),!F(this,vI))return;const g=F(this,mC).highlightColors.values();for(const C of F(this,vI).children)C.setAttribute("aria-selected",g.next().value===I)}destroy(){var I,g;(I=F(this,bC))==null||I.remove(),U(this,bC,null),U(this,lZ,null),(g=F(this,vI))==null||g.remove(),U(this,vI,null)}};oB=new WeakMap,aB=new WeakMap,bC=new WeakMap,lZ=new WeakMap,bd=new WeakMap,vI=new WeakMap,YB=new WeakMap,md=new WeakMap,wB=new WeakMap,nB=new WeakMap,mC=new WeakMap,Qd=new WeakMap,SI=new WeakSet,SG=function(){const I=document.createElement("div"),g=F(this,mC)._signal;I.addEventListener("contextmenu",ng,{signal:g}),I.className="dropdown",I.role="listbox",I.setAttribute("aria-multiselectable",!1),I.setAttribute("aria-orientation","vertical"),I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown");for(const[C,A]of F(this,mC).highlightColors){const l=document.createElement("button");l.tabIndex="0",l.role="option",l.setAttribute("data-color",A),l.title=C,l.setAttribute("data-l10n-id",`pdfjs-editor-colorpicker-${C}`);const Z=document.createElement("span");l.append(Z),Z.className="swatch",Z.style.backgroundColor=A,l.setAttribute("aria-selected",A===F(this,bd)),l.addEventListener("click",b(this,SI,JG).bind(this,A),{signal:g}),I.append(l)}return I.addEventListener("keydown",F(this,oB),{signal:g}),I},JG=function(I,g){g.stopPropagation(),F(this,nB).dispatch("switchannotationeditorparams",{source:this,type:F(this,Qd),value:I})},OR=function(I){oA._keyboardManager.exec(this,I)},QZ=function(I){if(F(this,SI,Fl)){this.hideDropdown();return}if(U(this,YB,I.detail===0),window.addEventListener("pointerdown",F(this,aB),{signal:F(this,mC)._signal}),F(this,vI)){F(this,vI).classList.remove("hidden");return}const g=U(this,vI,b(this,SI,SG).call(this));F(this,bC).append(g)},rR=function(I){var g;(g=F(this,vI))!=null&&g.contains(I.target)||this.hideDropdown()},Fl=function(){return F(this,vI)&&!F(this,vI).classList.contains("hidden")};let uF=oA;const NI=class NI extends hI{constructor(g){super({...g,name:"highlightEditor"});m(this,GI);m(this,Nd,null);m(this,SB,0);m(this,Il);m(this,ZZ,null);m(this,hd,null);m(this,IC,null);m(this,JB,null);m(this,MB,0);m(this,dZ,null);m(this,QC,null);m(this,hg,null);m(this,jg,!1);m(this,di,b(this,GI,qR).bind(this));m(this,od,null);m(this,BZ);m(this,PI,null);m(this,ad,"");m(this,KC);m(this,DB,"");this.color=g.color||NI._defaultColor,U(this,KC,g.thickness||NI._defaultThickness),U(this,BZ,g.opacity||NI._defaultOpacity),U(this,Il,g.boxes||null),U(this,DB,g.methodOfCreation||""),U(this,ad,g.text||""),this._isDraggable=!1,g.highlightId>-1?(U(this,jg,!0),b(this,GI,DG).call(this,g),b(this,GI,OB).call(this)):(U(this,Nd,g.anchorNode),U(this,SB,g.anchorOffset),U(this,JB,g.focusNode),U(this,MB,g.focusOffset),b(this,GI,MG).call(this),b(this,GI,OB).call(this),this.rotate(this.rotation))}static get _keyboardManager(){const g=NI.prototype;return bI(this,"_keyboardManager",new fd([[["ArrowLeft","mac+ArrowLeft"],g._moveCaret,{args:[0]}],[["ArrowRight","mac+ArrowRight"],g._moveCaret,{args:[1]}],[["ArrowUp","mac+ArrowUp"],g._moveCaret,{args:[2]}],[["ArrowDown","mac+ArrowDown"],g._moveCaret,{args:[3]}]]))}get telemetryInitialData(){return{action:"added",type:F(this,jg)?"free_highlight":"highlight",color:this._uiManager.highlightColorNames.get(this.color),thickness:F(this,KC),methodOfCreation:F(this,DB)}}get telemetryFinalData(){return{type:"highlight",color:this._uiManager.highlightColorNames.get(this.color)}}static computeTelemetryFinalData(g){return{numberOfColors:g.get("color").size}}static initialize(g,C){var A;hI.initialize(g,C),NI._defaultColor||(NI._defaultColor=((A=C.highlightColors)==null?void 0:A.values().next().value)||"#fff066")}static updateDefaultParams(g,C){switch(g){case gI.HIGHLIGHT_DEFAULT_COLOR:NI._defaultColor=C;break;case gI.HIGHLIGHT_THICKNESS:NI._defaultThickness=C;break}}translateInPage(g,C){}get toolbarPosition(){return F(this,od)}updateParams(g,C){switch(g){case gI.HIGHLIGHT_COLOR:b(this,GI,vR).call(this,C);break;case gI.HIGHLIGHT_THICKNESS:b(this,GI,PR).call(this,C);break}}static get defaultPropertiesToUpdate(){return[[gI.HIGHLIGHT_DEFAULT_COLOR,NI._defaultColor],[gI.HIGHLIGHT_THICKNESS,NI._defaultThickness]]}get propertiesToUpdate(){return[[gI.HIGHLIGHT_COLOR,this.color||NI._defaultColor],[gI.HIGHLIGHT_THICKNESS,F(this,KC)||NI._defaultThickness],[gI.HIGHLIGHT_FREE,F(this,jg)]]}async addEditToolbar(){const g=await super.addEditToolbar();return g?(this._uiManager.highlightColors&&(U(this,hd,new uF({editor:this})),g.addColorPicker(F(this,hd))),g):null}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(b(this,GI,rB).call(this))}getBaseTranslation(){return[0,0]}getRect(g,C){return super.getRect(g,C,b(this,GI,rB).call(this))}onceAdded(){this.parent.addUndoableEditor(this),this.div.focus()}remove(){b(this,GI,XG).call(this),this._reportTelemetry({action:"deleted"}),super.remove()}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(b(this,GI,OB).call(this),this.isAttachedToDOM||this.parent.add(this)))}setParent(g){var A;let C=!1;this.parent&&!g?b(this,GI,XG).call(this):g&&(b(this,GI,OB).call(this,g),C=!this.parent&&((A=this.div)==null?void 0:A.classList.contains("selectedEditor"))),super.setParent(g),this.show(this._isVisible),C&&this.select()}rotate(g){var l,Z,B;const{drawLayer:C}=this.parent;let A;F(this,jg)?(g=(g-this.rotation+360)%360,A=b(l=NI,gC,td).call(l,F(this,QC).box,g)):A=b(Z=NI,gC,td).call(Z,this,g),C.rotate(F(this,hg),g),C.rotate(F(this,PI),g),C.updateBox(F(this,hg),A),C.updateBox(F(this,PI),b(B=NI,gC,td).call(B,F(this,IC).box,g))}render(){if(this.div)return this.div;const g=super.render();F(this,ad)&&(g.setAttribute("aria-label",F(this,ad)),g.setAttribute("role","mark")),F(this,jg)?g.classList.add("free"):this.div.addEventListener("keydown",F(this,di),{signal:this._uiManager._signal});const C=U(this,dZ,document.createElement("div"));g.append(C),C.setAttribute("aria-hidden","true"),C.className="internal",C.style.clipPath=F(this,ZZ);const[A,l]=this.parentDimensions;return this.setDims(this.width*A,this.height*l),nF(this,F(this,dZ),["pointerover","pointerleave"]),this.enableEditing(),g}pointerover(){this.parent.drawLayer.addClass(F(this,PI),"hovered")}pointerleave(){this.parent.drawLayer.removeClass(F(this,PI),"hovered")}_moveCaret(g){switch(this.parent.unselect(this),g){case 0:case 2:b(this,GI,wi).call(this,!0);break;case 1:case 3:b(this,GI,wi).call(this,!1);break}}select(){var g,C;super.select(),F(this,PI)&&((g=this.parent)==null||g.drawLayer.removeClass(F(this,PI),"hovered"),(C=this.parent)==null||C.drawLayer.addClass(F(this,PI),"selected"))}unselect(){var g;super.unselect(),F(this,PI)&&((g=this.parent)==null||g.drawLayer.removeClass(F(this,PI),"selected"),F(this,jg)||b(this,GI,wi).call(this,!1))}get _mustFixPosition(){return!F(this,jg)}show(g=this._isVisible){super.show(g),this.parent&&(this.parent.drawLayer.show(F(this,hg),g),this.parent.drawLayer.show(F(this,PI),g))}static startHighlighting(g,C,{target:A,x:l,y:Z}){const{x:B,y:i,width:c,height:G}=A.getBoundingClientRect(),W=h=>{b(this,gC,Is).call(this,g,h)},V=g._signal,R={capture:!0,passive:!1,signal:V},s=h=>{h.preventDefault(),h.stopPropagation()},Q=h=>{A.removeEventListener("pointermove",W),window.removeEventListener("blur",Q),window.removeEventListener("pointerup",Q),window.removeEventListener("pointerdown",s,R),window.removeEventListener("contextmenu",ng),b(this,gC,gs).call(this,g,h)};window.addEventListener("blur",Q,{signal:V}),window.addEventListener("pointerup",Q,{signal:V}),window.addEventListener("pointerdown",s,R),window.addEventListener("contextmenu",ng,{signal:V}),A.addEventListener("pointermove",W,{signal:V}),this._freeHighlight=new eF({x:l,y:Z},[B,i,c,G],g.scale,this._defaultThickness/2,C,.001),{id:this._freeHighlightId,clipPathId:this._freeHighlightClipId}=g.drawLayer.highlight(this._freeHighlight,this._defaultColor,this._defaultOpacity,!0)}static deserialize(g,C,A){var Q;const l=super.deserialize(g,C,A),{rect:[Z,B,i,c],color:G,quadPoints:W}=g;l.color=x.makeHexColor(...G),U(l,BZ,g.opacity);const[V,R]=l.pageDimensions;l.width=(i-Z)/V,l.height=(c-B)/R;const s=U(l,Il,[]);for(let h=0;h<W.length;h+=8)s.push({x:(W[4]-i)/V,y:(c-(1-W[h+5]))/R,width:(W[h+2]-W[h])/V,height:(W[h+5]-W[h+1])/R});return b(Q=l,GI,MG).call(Q),l}serialize(g=!1){if(this.isEmpty()||g)return null;const C=this.getRect(0,0),A=hI._colorManager.convert(this.color);return{annotationType:sI.HIGHLIGHT,color:A,opacity:F(this,BZ),thickness:F(this,KC),quadPoints:b(this,GI,_R).call(this),outlines:b(this,GI,$R).call(this,C),pageIndex:this.pageIndex,rect:C,rotation:b(this,GI,rB).call(this),structTreeParentId:this._structTreeParentId}}static canCreateNewEmptyEditor(){return!1}};Nd=new WeakMap,SB=new WeakMap,Il=new WeakMap,ZZ=new WeakMap,hd=new WeakMap,IC=new WeakMap,JB=new WeakMap,MB=new WeakMap,dZ=new WeakMap,QC=new WeakMap,hg=new WeakMap,jg=new WeakMap,di=new WeakMap,od=new WeakMap,BZ=new WeakMap,PI=new WeakMap,ad=new WeakMap,KC=new WeakMap,DB=new WeakMap,GI=new WeakSet,MG=function(){const g=new Dc(F(this,Il),.001);U(this,QC,g.getOutlines()),{x:this.x,y:this.y,width:this.width,height:this.height}=F(this,QC).box;const C=new Dc(F(this,Il),.0025,.001,this._uiManager.direction==="ltr");U(this,IC,C.getOutlines());const{lastPoint:A}=F(this,IC).box;U(this,od,[(A[0]-this.x)/this.width,(A[1]-this.y)/this.height])},DG=function({highlightOutlines:g,highlightId:C,clipPathId:A}){var W,V;if(U(this,QC,g),U(this,IC,g.getNewOutline(F(this,KC)/2+1.5,.0025)),C>=0)U(this,hg,C),U(this,ZZ,A),this.parent.drawLayer.finalizeLine(C,g),U(this,PI,this.parent.drawLayer.highlightOutline(F(this,IC)));else if(this.parent){const R=this.parent.viewport.rotation;this.parent.drawLayer.updateLine(F(this,hg),g),this.parent.drawLayer.updateBox(F(this,hg),b(W=NI,gC,td).call(W,F(this,QC).box,(R-this.rotation+360)%360)),this.parent.drawLayer.updateLine(F(this,PI),F(this,IC)),this.parent.drawLayer.updateBox(F(this,PI),b(V=NI,gC,td).call(V,F(this,IC).box,R))}const{x:Z,y:B,width:i,height:c}=g.box;switch(this.rotation){case 0:this.x=Z,this.y=B,this.width=i,this.height=c;break;case 90:{const[R,s]=this.parentDimensions;this.x=B,this.y=1-Z,this.width=i*s/R,this.height=c*R/s;break}case 180:this.x=1-Z,this.y=1-B,this.width=i,this.height=c;break;case 270:{const[R,s]=this.parentDimensions;this.x=1-B,this.y=Z,this.width=i*s/R,this.height=c*R/s;break}}const{lastPoint:G}=F(this,IC).box;U(this,od,[(G[0]-Z)/i,(G[1]-B)/c])},vR=function(g){const C=l=>{var Z,B;this.color=l,(Z=this.parent)==null||Z.drawLayer.changeColor(F(this,hg),l),(B=F(this,hd))==null||B.updateColor(l)},A=this.color;this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"color_changed",color:this._uiManager.highlightColorNames.get(g)},!0)},PR=function(g){const C=F(this,KC),A=l=>{U(this,KC,l),b(this,GI,fR).call(this,l)};this.addCommands({cmd:A.bind(this,g),undo:A.bind(this,C),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"thickness_changed",thickness:g},!0)},fR=function(g){if(!F(this,jg))return;b(this,GI,DG).call(this,{highlightOutlines:F(this,QC).getNewOutline(g/2)}),this.fixAndSetPosition();const[C,A]=this.parentDimensions;this.setDims(this.width*C,this.height*A)},XG=function(){F(this,hg)===null||!this.parent||(this.parent.drawLayer.remove(F(this,hg)),U(this,hg,null),this.parent.drawLayer.remove(F(this,PI)),U(this,PI,null))},OB=function(g=this.parent){F(this,hg)===null&&({id:rg(this,hg)._,clipPathId:rg(this,ZZ)._}=g.drawLayer.highlight(F(this,QC),this.color,F(this,BZ)),U(this,PI,g.drawLayer.highlightOutline(F(this,IC))),F(this,dZ)&&(F(this,dZ).style.clipPath=F(this,ZZ)))},gC=new WeakSet,td=function({x:g,y:C,width:A,height:l},Z){switch(Z){case 90:return{x:1-C-l,y:g,width:l,height:A};case 180:return{x:1-g-A,y:1-C-l,width:A,height:l};case 270:return{x:C,y:1-g-A,width:l,height:A}}return{x:g,y:C,width:A,height:l}},qR=function(g){NI._keyboardManager.exec(this,g)},wi=function(g){if(!F(this,Nd))return;const C=window.getSelection();g?C.setPosition(F(this,Nd),F(this,SB)):C.setPosition(F(this,JB),F(this,MB))},rB=function(){return F(this,jg)?this.rotation:0},_R=function(){if(F(this,jg))return null;const[g,C]=this.pageDimensions,A=F(this,Il),l=new Float32Array(A.length*8);let Z=0;for(const{x:B,y:i,width:c,height:G}of A){const W=B*g,V=(1-i-G)*C;l[Z]=l[Z+4]=W,l[Z+1]=l[Z+3]=V,l[Z+2]=l[Z+6]=W+c*g,l[Z+5]=l[Z+7]=V+G*C,Z+=8}return l},$R=function(g){return F(this,QC).serialize(g,b(this,GI,rB).call(this))},Is=function(g,C){this._freeHighlight.add(C)&&g.drawLayer.updatePath(this._freeHighlightId,this._freeHighlight)},gs=function(g,C){this._freeHighlight.isEmpty()?g.drawLayer.removeFreeHighlight(this._freeHighlightId):g.createAndAddNewEditor(C,!1,{highlightId:this._freeHighlightId,highlightOutlines:this._freeHighlight.getOutlines(),clipPathId:this._freeHighlightClipId,methodOfCreation:"main_toolbar"}),this._freeHighlightId=-1,this._freeHighlight=null,this._freeHighlightClipId=""},m(NI,gC),dI(NI,"_defaultColor",null),dI(NI,"_defaultOpacity",1),dI(NI,"_defaultThickness",12),dI(NI,"_l10nPromise"),dI(NI,"_type","highlight"),dI(NI,"_editorType",sI.HIGHLIGHT),dI(NI,"_freeHighlightId",-1),dI(NI,"_freeHighlight",null),dI(NI,"_freeHighlightClipId","");let pF=NI;const HI=class HI extends hI{constructor(g){super({...g,name:"inkEditor"});m(this,T);m(this,FZ,0);m(this,iZ,0);m(this,XB,this.canvasPointermove.bind(this));m(this,tB,this.canvasPointerleave.bind(this));m(this,yB,this.canvasPointerup.bind(this));m(this,cZ,this.canvasPointerdown.bind(this));m(this,TC,null);m(this,aA,new Path2D);m(this,CC,!1);m(this,GZ,!1);m(this,WZ,!1);m(this,YA,null);m(this,VZ,0);m(this,RZ,0);m(this,gl,null);this.color=g.color||null,this.thickness=g.thickness||null,this.opacity=g.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(g,C){hI.initialize(g,C)}static updateDefaultParams(g,C){switch(g){case gI.INK_THICKNESS:HI._defaultThickness=C;break;case gI.INK_COLOR:HI._defaultColor=C;break;case gI.INK_OPACITY:HI._defaultOpacity=C/100;break}}updateParams(g,C){switch(g){case gI.INK_THICKNESS:b(this,T,Cs).call(this,C);break;case gI.INK_COLOR:b(this,T,As).call(this,C);break;case gI.INK_OPACITY:b(this,T,ls).call(this,C);break}}static get defaultPropertiesToUpdate(){return[[gI.INK_THICKNESS,HI._defaultThickness],[gI.INK_COLOR,HI._defaultColor||hI._defaultLineColor],[gI.INK_OPACITY,Math.round(HI._defaultOpacity*100)]]}get propertiesToUpdate(){return[[gI.INK_THICKNESS,this.thickness||HI._defaultThickness],[gI.INK_COLOR,this.color||HI._defaultColor||hI._defaultLineColor],[gI.INK_OPACITY,Math.round(100*(this.opacity??HI._defaultOpacity))]]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.canvas||(b(this,T,ni).call(this),b(this,T,Si).call(this)),this.isAttachedToDOM||(this.parent.add(this),b(this,T,yd).call(this)),b(this,T,vB).call(this)))}remove(){var g;this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,F(this,TC)&&(clearTimeout(F(this,TC)),U(this,TC,null)),(g=F(this,YA))==null||g.disconnect(),U(this,YA,null),super.remove())}setParent(g){!this.parent&&g?this._uiManager.removeShouldRescale(this):this.parent&&g===null&&this._uiManager.addShouldRescale(this),super.setParent(g)}onScaleChanging(){const[g,C]=this.parentDimensions,A=this.width*g,l=this.height*C;this.setDimensions(A,l)}enableEditMode(){F(this,CC)||this.canvas===null||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",F(this,cZ),{signal:this._uiManager._signal}))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",F(this,cZ)))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){F(this,CC)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),U(this,CC,!0),this.div.classList.add("disabled"),b(this,T,vB).call(this,!0),this.select(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(g){this._focusEventsAllowed&&(super.focusin(g),this.enableEditMode())}canvasPointerdown(g){g.button!==0||!this.isInEditMode()||F(this,CC)||(this.setInForeground(),g.preventDefault(),this.div.contains(document.activeElement)||this.div.focus({preventScroll:!0}),b(this,T,ds).call(this,g.offsetX,g.offsetY))}canvasPointermove(g){g.preventDefault(),b(this,T,yG).call(this,g.offsetX,g.offsetY)}canvasPointerup(g){g.preventDefault(),b(this,T,HG).call(this,g)}canvasPointerleave(g){b(this,T,HG).call(this,g)}get isResizable(){return!this.isEmpty()&&F(this,CC)}render(){if(this.div)return this.div;let g,C;this.width&&(g=this.x,C=this.y),super.render(),this.div.setAttribute("data-l10n-id","pdfjs-ink");const[A,l,Z,B]=b(this,T,Zs).call(this);if(this.setAt(A,l,0,0),this.setDims(Z,B),b(this,T,ni).call(this),this.width){const[i,c]=this.parentDimensions;this.setAspectRatio(this.width*i,this.height*c),this.setAt(g*i,C*c,this.width*i,this.height*c),U(this,WZ,!0),b(this,T,yd).call(this),this.setDims(this.width*i,this.height*c),b(this,T,NZ).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return b(this,T,Si).call(this),this.div}setDimensions(g,C){const A=Math.round(g),l=Math.round(C);if(F(this,VZ)===A&&F(this,RZ)===l)return;U(this,VZ,A),U(this,RZ,l),this.canvas.style.visibility="hidden";const[Z,B]=this.parentDimensions;this.width=g/Z,this.height=C/B,this.fixAndSetPosition(),F(this,CC)&&b(this,T,eG).call(this,g,C),b(this,T,yd).call(this),b(this,T,NZ).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(g,C,A){var h,N,o;if(g instanceof mV)return null;const l=super.deserialize(g,C,A);l.thickness=g.thickness,l.color=x.makeHexColor(...g.color),l.opacity=g.opacity;const[Z,B]=l.pageDimensions,i=l.width*Z,c=l.height*B,G=l.parentScale,W=g.thickness/2;U(l,CC,!0),U(l,VZ,Math.round(i)),U(l,RZ,Math.round(c));const{paths:V,rect:R,rotation:s}=g;for(let{bezier:Y}of V){Y=b(h=HI,wA,Vs).call(h,Y,R,s);const n=[];l.paths.push(n);let a=G*(Y[0]-W),w=G*(Y[1]-W);for(let J=2,y=Y.length;J<y;J+=6){const z=G*(Y[J]-W),u=G*(Y[J+1]-W),II=G*(Y[J+2]-W),_=G*(Y[J+3]-W),BI=G*(Y[J+4]-W),FI=G*(Y[J+5]-W);n.push([[a,w],[z,u],[II,_],[BI,FI]]),a=BI,w=FI}const X=b(this,wA,Ws).call(this,n);l.bezierPath2D.push(X)}const Q=b(N=l,T,pG).call(N);return U(l,iZ,Math.max(hI.MIN_SIZE,Q[2]-Q[0])),U(l,FZ,Math.max(hI.MIN_SIZE,Q[3]-Q[1])),b(o=l,T,eG).call(o,i,c),l}serialize(){if(this.isEmpty())return null;const g=this.getRect(0,0),C=hI._colorManager.convert(this.ctx.strokeStyle);return{annotationType:sI.INK,color:C,thickness:this.thickness,opacity:this.opacity,paths:b(this,T,Rs).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,g),pageIndex:this.pageIndex,rect:g,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}};FZ=new WeakMap,iZ=new WeakMap,XB=new WeakMap,tB=new WeakMap,yB=new WeakMap,cZ=new WeakMap,TC=new WeakMap,aA=new WeakMap,CC=new WeakMap,GZ=new WeakMap,WZ=new WeakMap,YA=new WeakMap,VZ=new WeakMap,RZ=new WeakMap,gl=new WeakMap,T=new WeakSet,Cs=function(g){const C=l=>{this.thickness=l,b(this,T,vB).call(this)},A=this.thickness;this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},As=function(g){const C=l=>{this.color=l,b(this,T,NZ).call(this)},A=this.color;this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},ls=function(g){const C=l=>{this.opacity=l,b(this,T,NZ).call(this)};g/=100;const A=this.opacity;this.addCommands({cmd:C.bind(this,g),undo:C.bind(this,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:gI.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},Zs=function(){const{parentRotation:g,parentDimensions:[C,A]}=this;switch(g){case 90:return[0,A,A,C];case 180:return[C,A,C,A];case 270:return[C,0,A,C];default:return[0,0,C,A]}},tG=function(){const{ctx:g,color:C,opacity:A,thickness:l,parentScale:Z,scaleFactor:B}=this;g.lineWidth=l*Z/B,g.lineCap="round",g.lineJoin="round",g.miterLimit=10,g.strokeStyle=`${C}${cb(A)}`},ds=function(g,C){const A=this._uiManager._signal;this.canvas.addEventListener("contextmenu",ng,{signal:A}),this.canvas.addEventListener("pointerleave",F(this,tB),{signal:A}),this.canvas.addEventListener("pointermove",F(this,XB),{signal:A}),this.canvas.addEventListener("pointerup",F(this,yB),{signal:A}),this.canvas.removeEventListener("pointerdown",F(this,cZ)),this.isEditing=!0,F(this,WZ)||(U(this,WZ,!0),b(this,T,yd).call(this),this.thickness||(this.thickness=HI._defaultThickness),this.color||(this.color=HI._defaultColor||hI._defaultLineColor),this.opacity??(this.opacity=HI._defaultOpacity)),this.currentPath.push([g,C]),U(this,GZ,!1),b(this,T,tG).call(this),U(this,gl,()=>{b(this,T,is).call(this),F(this,gl)&&window.requestAnimationFrame(F(this,gl))}),window.requestAnimationFrame(F(this,gl))},yG=function(g,C){const[A,l]=this.currentPath.at(-1);if(this.currentPath.length>1&&g===A&&C===l)return;const Z=this.currentPath;let B=F(this,aA);if(Z.push([g,C]),U(this,GZ,!0),Z.length<=2){B.moveTo(...Z[0]),B.lineTo(g,C);return}Z.length===3&&(U(this,aA,B=new Path2D),B.moveTo(...Z[0])),b(this,T,cs).call(this,B,...Z.at(-3),...Z.at(-2),g,C)},Bs=function(){if(this.currentPath.length===0)return;const g=this.currentPath.at(-1);F(this,aA).lineTo(...g)},Fs=function(g,C){U(this,gl,null),g=Math.min(Math.max(g,0),this.canvas.width),C=Math.min(Math.max(C,0),this.canvas.height),b(this,T,yG).call(this,g,C),b(this,T,Bs).call(this);let A;if(this.currentPath.length!==1)A=b(this,T,Gs).call(this);else{const c=[g,C];A=[[c,c.slice(),c.slice(),c]]}const l=F(this,aA),Z=this.currentPath;this.currentPath=[],U(this,aA,new Path2D);const B=()=>{this.allRawPaths.push(Z),this.paths.push(A),this.bezierPath2D.push(l),this._uiManager.rebuild(this)},i=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(b(this,T,ni).call(this),b(this,T,Si).call(this)),b(this,T,vB).call(this))};this.addCommands({cmd:B,undo:i,mustExec:!0})},is=function(){if(!F(this,GZ))return;U(this,GZ,!1);const g=Math.ceil(this.thickness*this.parentScale),C=this.currentPath.slice(-3),A=C.map(B=>B[0]),l=C.map(B=>B[1]);Math.min(...A)-g,Math.max(...A)+g,Math.min(...l)-g,Math.max(...l)+g;const{ctx:Z}=this;Z.save(),Z.clearRect(0,0,this.canvas.width,this.canvas.height);for(const B of this.bezierPath2D)Z.stroke(B);Z.stroke(F(this,aA)),Z.restore()},cs=function(g,C,A,l,Z,B,i){const c=(C+l)/2,G=(A+Z)/2,W=(l+B)/2,V=(Z+i)/2;g.bezierCurveTo(c+2*(l-c)/3,G+2*(Z-G)/3,W+2*(l-W)/3,V+2*(Z-V)/3,W,V)},Gs=function(){const g=this.currentPath;if(g.length<=2)return[[g[0],g[0],g.at(-1),g.at(-1)]];const C=[];let A,[l,Z]=g[0];for(A=1;A<g.length-2;A++){const[R,s]=g[A],[Q,h]=g[A+1],N=(R+Q)/2,o=(s+h)/2,Y=[l+2*(R-l)/3,Z+2*(s-Z)/3],n=[N+2*(R-N)/3,o+2*(s-o)/3];C.push([[l,Z],Y,n,[N,o]]),[l,Z]=[N,o]}const[B,i]=g[A],[c,G]=g[A+1],W=[l+2*(B-l)/3,Z+2*(i-Z)/3],V=[c+2*(B-c)/3,G+2*(i-G)/3];return C.push([[l,Z],W,V,[c,G]]),C},NZ=function(){if(this.isEmpty()){b(this,T,Ji).call(this);return}b(this,T,tG).call(this);const{canvas:g,ctx:C}=this;C.setTransform(1,0,0,1,0,0),C.clearRect(0,0,g.width,g.height),b(this,T,Ji).call(this);for(const A of this.bezierPath2D)C.stroke(A)},HG=function(g){this.canvas.removeEventListener("pointerleave",F(this,tB)),this.canvas.removeEventListener("pointermove",F(this,XB)),this.canvas.removeEventListener("pointerup",F(this,yB)),this.canvas.addEventListener("pointerdown",F(this,cZ),{signal:this._uiManager._signal}),F(this,TC)&&clearTimeout(F(this,TC)),U(this,TC,setTimeout(()=>{U(this,TC,null),this.canvas.removeEventListener("contextmenu",ng)},10)),b(this,T,Fs).call(this,g.offsetX,g.offsetY),this.addToAnnotationStorage(),this.setInBackground()},ni=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",this.canvas.setAttribute("data-l10n-id","pdfjs-ink-canvas"),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},Si=function(){U(this,YA,new ResizeObserver(g=>{const C=g[0].contentRect;C.width&&C.height&&this.setDimensions(C.width,C.height)})),F(this,YA).observe(this.div),this._uiManager._signal.addEventListener("abort",()=>{var g;(g=F(this,YA))==null||g.disconnect(),U(this,YA,null)},{once:!0})},yd=function(){if(!F(this,WZ))return;const[g,C]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*g),this.canvas.height=Math.ceil(this.height*C),b(this,T,Ji).call(this)},eG=function(g,C){const A=b(this,T,Mi).call(this),l=(g-A)/F(this,iZ),Z=(C-A)/F(this,FZ);this.scaleFactor=Math.min(l,Z)},Ji=function(){const g=b(this,T,Mi).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+g,this.translationY*this.scaleFactor+g)},wA=new WeakSet,Ws=function(g){const C=new Path2D;for(let A=0,l=g.length;A<l;A++){const[Z,B,i,c]=g[A];A===0&&C.moveTo(...Z),C.bezierCurveTo(B[0],B[1],i[0],i[1],c[0],c[1])}return C},uG=function(g,C,A){const[l,Z,B,i]=C;switch(A){case 0:for(let c=0,G=g.length;c<G;c+=2)g[c]+=l,g[c+1]=i-g[c+1];break;case 90:for(let c=0,G=g.length;c<G;c+=2){const W=g[c];g[c]=g[c+1]+l,g[c+1]=W+Z}break;case 180:for(let c=0,G=g.length;c<G;c+=2)g[c]=B-g[c],g[c+1]+=Z;break;case 270:for(let c=0,G=g.length;c<G;c+=2){const W=g[c];g[c]=B-g[c+1],g[c+1]=i-W}break;default:throw new Error("Invalid rotation")}return g},Vs=function(g,C,A){const[l,Z,B,i]=C;switch(A){case 0:for(let c=0,G=g.length;c<G;c+=2)g[c]-=l,g[c+1]=i-g[c+1];break;case 90:for(let c=0,G=g.length;c<G;c+=2){const W=g[c];g[c]=g[c+1]-Z,g[c+1]=W-l}break;case 180:for(let c=0,G=g.length;c<G;c+=2)g[c]=B-g[c],g[c+1]-=Z;break;case 270:for(let c=0,G=g.length;c<G;c+=2){const W=g[c];g[c]=i-g[c+1],g[c+1]=B-W}break;default:throw new Error("Invalid rotation")}return g},Rs=function(g,C,A,l){var G,W;const Z=[],B=this.thickness/2,i=g*C+B,c=g*A+B;for(const V of this.paths){const R=[],s=[];for(let Q=0,h=V.length;Q<h;Q++){const[N,o,Y,n]=V[Q];if(N[0]===n[0]&&N[1]===n[1]&&h===1){const _=g*N[0]+i,BI=g*N[1]+c;R.push(_,BI),s.push(_,BI);break}const a=g*N[0]+i,w=g*N[1]+c,X=g*o[0]+i,J=g*o[1]+c,y=g*Y[0]+i,z=g*Y[1]+c,u=g*n[0]+i,II=g*n[1]+c;Q===0&&(R.push(a,w),s.push(a,w)),R.push(X,J,y,z,u,II),s.push(X,J),Q===h-1&&s.push(u,II)}Z.push({bezier:b(G=HI,wA,uG).call(G,R,l,this.rotation),points:b(W=HI,wA,uG).call(W,s,l,this.rotation)})}return Z},pG=function(){let g=1/0,C=-1/0,A=1/0,l=-1/0;for(const Z of this.paths)for(const[B,i,c,G]of Z){const W=x.bezierBoundingBox(...B,...i,...c,...G);g=Math.min(g,W[0]),A=Math.min(A,W[1]),C=Math.max(C,W[2]),l=Math.max(l,W[3])}return[g,A,C,l]},Mi=function(){return F(this,CC)?Math.ceil(this.thickness*this.parentScale):0},vB=function(g=!1){if(this.isEmpty())return;if(!F(this,CC)){b(this,T,NZ).call(this);return}const C=b(this,T,pG).call(this),A=b(this,T,Mi).call(this);U(this,iZ,Math.max(hI.MIN_SIZE,C[2]-C[0])),U(this,FZ,Math.max(hI.MIN_SIZE,C[3]-C[1]));const l=Math.ceil(A+F(this,iZ)*this.scaleFactor),Z=Math.ceil(A+F(this,FZ)*this.scaleFactor),[B,i]=this.parentDimensions;this.width=l/B,this.height=Z/i,this.setAspectRatio(l,Z);const c=this.translationX,G=this.translationY;this.translationX=-C[0],this.translationY=-C[1],b(this,T,yd).call(this),b(this,T,NZ).call(this),U(this,VZ,l),U(this,RZ,Z),this.setDims(l,Z);const W=g?A/this.scaleFactor/2:0;this.translate(c-this.translationX-W,G-this.translationY-W)},m(HI,wA),dI(HI,"_defaultColor",null),dI(HI,"_defaultOpacity",1),dI(HI,"_defaultThickness",1),dI(HI,"_type","ink"),dI(HI,"_editorType",sI.INK);let tc=HI;const eB=class eB extends hI{constructor(g){super({...g,name:"stampEditor"});m(this,mI);m(this,Zg,null);m(this,dg,null);m(this,Cl,null);m(this,nA,null);m(this,Al,null);m(this,Yd,"");m(this,zC,null);m(this,SA,null);m(this,LC,null);m(this,NC,!1);m(this,HB,!1);U(this,nA,g.bitmapUrl),U(this,Al,g.bitmapFile)}static initialize(g,C){hI.initialize(g,C)}static get supportedTypes(){return bI(this,"supportedTypes",["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"].map(C=>`image/${C}`))}static get supportedTypesStr(){return bI(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(g){return this.supportedTypes.includes(g)}static paste(g,C){C.pasteEditor(sI.STAMP,{bitmapFile:g.getAsFile()})}remove(){var g,C;F(this,dg)&&(U(this,Zg,null),this._uiManager.imageManager.deleteId(F(this,dg)),(g=F(this,zC))==null||g.remove(),U(this,zC,null),(C=F(this,SA))==null||C.disconnect(),U(this,SA,null),F(this,LC)&&(clearTimeout(F(this,LC)),U(this,LC,null))),super.remove()}rebuild(){if(!this.parent){F(this,dg)&&b(this,mI,Di).call(this);return}super.rebuild(),this.div!==null&&(F(this,dg)&&F(this,zC)===null&&b(this,mI,Di).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(F(this,Cl)||F(this,Zg)||F(this,nA)||F(this,Al)||F(this,dg))}get isResizable(){return!0}render(){if(this.div)return this.div;let g,C;if(this.width&&(g=this.x,C=this.y),super.render(),this.div.hidden=!0,this.addAltTextButton(),F(this,Zg)?b(this,mI,kG).call(this):b(this,mI,Di).call(this),this.width){const[A,l]=this.parentDimensions;this.setAt(g*A,C*l,this.width*A,this.height*l)}return this.div}getImageForAltText(){return F(this,zC)}static deserialize(g,C,A){if(g instanceof QV)return null;const l=super.deserialize(g,C,A),{rect:Z,bitmapUrl:B,bitmapId:i,isSvg:c,accessibilityData:G}=g;i&&A.imageManager.isValidId(i)?U(l,dg,i):U(l,nA,B),U(l,NC,c);const[W,V]=l.pageDimensions;return l.width=(Z[2]-Z[0])/W,l.height=(Z[3]-Z[1])/V,G&&(l.altTextData=G),l}serialize(g=!1,C=null){if(this.isEmpty())return null;const A={annotationType:sI.STAMP,bitmapId:F(this,dg),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:F(this,NC),structTreeParentId:this._structTreeParentId};if(g)return A.bitmapUrl=b(this,mI,Xi).call(this,!0),A.accessibilityData=this.altTextData,A;const{decorative:l,altText:Z}=this.altTextData;if(!l&&Z&&(A.accessibilityData={type:"Figure",alt:Z}),C===null)return A;C.stamps||(C.stamps=new Map);const B=F(this,NC)?(A.rect[2]-A.rect[0])*(A.rect[3]-A.rect[1]):null;if(!C.stamps.has(F(this,dg)))C.stamps.set(F(this,dg),{area:B,serialized:A}),A.bitmap=b(this,mI,Xi).call(this,!1);else if(F(this,NC)){const i=C.stamps.get(F(this,dg));B>i.area&&(i.area=B,i.serialized.bitmap.close(),i.serialized.bitmap=b(this,mI,Xi).call(this,!1))}return A}};Zg=new WeakMap,dg=new WeakMap,Cl=new WeakMap,nA=new WeakMap,Al=new WeakMap,Yd=new WeakMap,zC=new WeakMap,SA=new WeakMap,LC=new WeakMap,NC=new WeakMap,HB=new WeakMap,mI=new WeakSet,PB=function(g,C=!1){if(!g){this.remove();return}U(this,Zg,g.bitmap),C||(U(this,dg,g.id),U(this,NC,g.isSvg)),g.file&&U(this,Yd,g.file.name),b(this,mI,kG).call(this)},fB=function(){U(this,Cl,null),this._uiManager.enableWaiting(!1),F(this,zC)&&this.div.focus()},Di=function(){if(F(this,dg)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(F(this,dg)).then(A=>b(this,mI,PB).call(this,A,!0)).finally(()=>b(this,mI,fB).call(this));return}if(F(this,nA)){const A=F(this,nA);U(this,nA,null),this._uiManager.enableWaiting(!0),U(this,Cl,this._uiManager.imageManager.getFromUrl(A).then(l=>b(this,mI,PB).call(this,l)).finally(()=>b(this,mI,fB).call(this)));return}if(F(this,Al)){const A=F(this,Al);U(this,Al,null),this._uiManager.enableWaiting(!0),U(this,Cl,this._uiManager.imageManager.getFromFile(A).then(l=>b(this,mI,PB).call(this,l)).finally(()=>b(this,mI,fB).call(this)));return}const g=document.createElement("input");g.type="file",g.accept=eB.supportedTypesStr;const C=this._uiManager._signal;U(this,Cl,new Promise(A=>{g.addEventListener("change",async()=>{if(!g.files||g.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const l=await this._uiManager.imageManager.getFromFile(g.files[0]);b(this,mI,PB).call(this,l)}A()},{signal:C}),g.addEventListener("cancel",()=>{this.remove(),A()},{signal:C})}).finally(()=>b(this,mI,fB).call(this))),g.click()},kG=function(){const{div:g}=this;let{width:C,height:A}=F(this,Zg);const[l,Z]=this.pageDimensions,B=.75;if(this.width)C=this.width*l,A=this.height*Z;else if(C>B*l||A>B*Z){const W=Math.min(B*l/C,B*Z/A);C*=W,A*=W}const[i,c]=this.parentDimensions;this.setDims(C*i/l,A*c/Z),this._uiManager.enableWaiting(!1);const G=U(this,zC,document.createElement("canvas"));g.append(G),g.hidden=!1,b(this,mI,KG).call(this,C,A),b(this,mI,bs).call(this),F(this,HB)||(this.parent.addUndoableEditor(this),U(this,HB,!0)),this._reportTelemetry({action:"inserted_image"}),F(this,Yd)&&G.setAttribute("aria-label",F(this,Yd))},ss=function(g,C){var B;const[A,l]=this.parentDimensions;this.width=g/A,this.height=C/l,this.setDims(g,C),(B=this._initialOptions)!=null&&B.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,F(this,LC)!==null&&clearTimeout(F(this,LC)),U(this,LC,setTimeout(()=>{U(this,LC,null),b(this,mI,KG).call(this,g,C)},200))},Us=function(g,C){const{width:A,height:l}=F(this,Zg);let Z=A,B=l,i=F(this,Zg);for(;Z>2*g||B>2*C;){const c=Z,G=B;Z>2*g&&(Z=Z>=16384?Math.floor(Z/2)-1:Math.ceil(Z/2)),B>2*C&&(B=B>=16384?Math.floor(B/2)-1:Math.ceil(B/2));const W=new OffscreenCanvas(Z,B);W.getContext("2d").drawImage(i,0,0,c,G,0,0,Z,B),i=W.transferToImageBitmap()}return i},KG=function(g,C){g=Math.ceil(g),C=Math.ceil(C);const A=F(this,zC);if(!A||A.width===g&&A.height===C)return;A.width=g,A.height=C;const l=F(this,NC)?F(this,Zg):b(this,mI,Us).call(this,g,C);if(this._uiManager.hasMLManager&&!this.hasAltText()){const i=new OffscreenCanvas(g,C).getContext("2d");i.drawImage(l,0,0,l.width,l.height,0,0,g,C),this._uiManager.mlGuess({service:"image-to-text",request:{data:i.getImageData(0,0,g,C).data,width:g,height:C,channels:4}}).then(c=>{const G=(c==null?void 0:c.output)||"";this.parent&&G&&!this.hasAltText()&&(this.altTextData={altText:G,decorative:!1})})}const Z=A.getContext("2d");Z.filter=this._uiManager.hcmFilter,Z.drawImage(l,0,0,l.width,l.height,0,0,g,C)},Xi=function(g){if(g){if(F(this,NC)){const l=this._uiManager.imageManager.getSvgUrl(F(this,dg));if(l)return l}const C=document.createElement("canvas");return{width:C.width,height:C.height}=F(this,Zg),C.getContext("2d").drawImage(F(this,Zg),0,0),C.toDataURL()}if(F(this,NC)){const[C,A]=this.pageDimensions,l=Math.round(this.width*C*uA.PDF_TO_CSS_UNITS),Z=Math.round(this.height*A*uA.PDF_TO_CSS_UNITS),B=new OffscreenCanvas(l,Z);return B.getContext("2d").drawImage(F(this,Zg),0,0,F(this,Zg).width,F(this,Zg).height,0,0,l,Z),B.transferToImageBitmap()}return structuredClone(F(this,Zg))},bs=function(){this._uiManager._signal&&(U(this,SA,new ResizeObserver(g=>{const C=g[0].contentRect;C.width&&C.height&&b(this,mI,ss).call(this,C.width,C.height)})),F(this,SA).observe(this.div),this._uiManager._signal.addEventListener("abort",()=>{var g;(g=F(this,SA))==null||g.disconnect(),U(this,SA,null)},{once:!0}))},dI(eB,"_type","stamp"),dI(eB,"_editorType",sI.STAMP);let yc=eB;const hC=class hC{constructor({uiManager:I,pageIndex:g,div:C,accessibilityManager:A,annotationLayer:l,drawLayer:Z,textLayer:B,viewport:i,l10n:c}){m(this,Bg);m(this,sZ);m(this,wd,!1);m(this,EC,null);m(this,UZ,null);m(this,JA,null);m(this,MA,null);m(this,DA,null);m(this,xg,new Map);m(this,ll,!1);m(this,nd,!1);m(this,Sd,!1);m(this,og,null);m(this,r);const G=[...F(hC,Zl).values()];if(!hC._initialized){hC._initialized=!0;for(const W of G)W.initialize(c,I)}I.registerEditorTypes(G),U(this,r,I),this.pageIndex=g,this.div=C,U(this,sZ,A),U(this,EC,l),this.viewport=i,U(this,og,B),this.drawLayer=Z,F(this,r).addLayer(this)}get isEmpty(){return F(this,xg).size===0}get isInvisible(){return this.isEmpty&&F(this,r).getMode()===sI.NONE}updateToolbar(I){F(this,r).updateToolbar(I)}updateMode(I=F(this,r).getMode()){switch(b(this,Bg,ti).call(this),I){case sI.NONE:this.disableTextSelection(),this.togglePointerEvents(!1),this.toggleAnnotationLayerPointerEvents(!0),this.disableClick();return;case sI.INK:this.addInkEditorIfNeeded(!1),this.disableTextSelection(),this.togglePointerEvents(!0),this.disableClick();break;case sI.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}this.toggleAnnotationLayerPointerEvents(!1);const{classList:g}=this.div;for(const C of F(hC,Zl).values())g.toggle(`${C._type}Editing`,I===C._editorType);this.div.hidden=!1}hasTextLayer(I){var g;return I===((g=F(this,og))==null?void 0:g.div)}addInkEditorIfNeeded(I){if(F(this,r).getMode()!==sI.INK)return;if(!I){for(const C of F(this,xg).values())if(C.isEmpty()){C.setInBackground();return}}this.createAndAddNewEditor({offsetX:0,offsetY:0},!1).setInBackground()}setEditingState(I){F(this,r).setEditingState(I)}addCommands(I){F(this,r).addCommands(I)}togglePointerEvents(I=!1){this.div.classList.toggle("disabled",!I)}toggleAnnotationLayerPointerEvents(I=!1){var g;(g=F(this,EC))==null||g.div.classList.toggle("disabled",!I)}enable(){this.div.tabIndex=0,this.togglePointerEvents(!0);const I=new Set;for(const C of F(this,xg).values())C.enableEditing(),C.show(!0),C.annotationElementId&&(F(this,r).removeChangedExistingAnnotation(C),I.add(C.annotationElementId));if(!F(this,EC))return;const g=F(this,EC).getEditableAnnotations();for(const C of g){if(C.hide(),F(this,r).isDeletedAnnotationElement(C.data.id)||I.has(C.data.id))continue;const A=this.deserialize(C);A&&(this.addOrRebuild(A),A.enableEditing())}}disable(){var A;U(this,Sd,!0),this.div.tabIndex=-1,this.togglePointerEvents(!1);const I=new Map,g=new Map;for(const l of F(this,xg).values())if(l.disableEditing(),!!l.annotationElementId){if(l.serialize()!==null){I.set(l.annotationElementId,l);continue}else g.set(l.annotationElementId,l);(A=this.getEditableAnnotation(l.annotationElementId))==null||A.show(),l.remove()}if(F(this,EC)){const l=F(this,EC).getEditableAnnotations();for(const Z of l){const{id:B}=Z.data;if(F(this,r).isDeletedAnnotationElement(B))continue;let i=g.get(B);if(i){i.resetAnnotationElement(Z),i.show(!1),Z.show();continue}i=I.get(B),i&&(F(this,r).addChangedExistingAnnotation(i),i.renderAnnotationElement(Z),i.show(!1)),Z.show()}}b(this,Bg,ti).call(this),this.isEmpty&&(this.div.hidden=!0);const{classList:C}=this.div;for(const l of F(hC,Zl).values())C.remove(`${l._type}Editing`);this.disableTextSelection(),this.toggleAnnotationLayerPointerEvents(!0),U(this,Sd,!1)}getEditableAnnotation(I){var g;return((g=F(this,EC))==null?void 0:g.getEditableAnnotation(I))||null}setActiveEditor(I){F(this,r).getActive()!==I&&F(this,r).setActiveEditor(I)}enableTextSelection(){var I;this.div.tabIndex=-1,(I=F(this,og))!=null&&I.div&&!F(this,MA)&&(U(this,MA,b(this,Bg,ms).bind(this)),F(this,og).div.addEventListener("pointerdown",F(this,MA),{signal:F(this,r)._signal}),F(this,og).div.classList.add("highlighting"))}disableTextSelection(){var I;this.div.tabIndex=0,(I=F(this,og))!=null&&I.div&&F(this,MA)&&(F(this,og).div.removeEventListener("pointerdown",F(this,MA)),U(this,MA,null),F(this,og).div.classList.remove("highlighting"))}enableClick(){if(F(this,JA))return;const I=F(this,r)._signal;U(this,JA,this.pointerdown.bind(this)),U(this,UZ,this.pointerup.bind(this)),this.div.addEventListener("pointerdown",F(this,JA),{signal:I}),this.div.addEventListener("pointerup",F(this,UZ),{signal:I})}disableClick(){F(this,JA)&&(this.div.removeEventListener("pointerdown",F(this,JA)),this.div.removeEventListener("pointerup",F(this,UZ)),U(this,JA,null),U(this,UZ,null))}attach(I){F(this,xg).set(I.id,I);const{annotationElementId:g}=I;g&&F(this,r).isDeletedAnnotationElement(g)&&F(this,r).removeDeletedAnnotationElement(I)}detach(I){var g;F(this,xg).delete(I.id),(g=F(this,sZ))==null||g.removePointerInTextLayer(I.contentDiv),!F(this,Sd)&&I.annotationElementId&&F(this,r).addDeletedAnnotationElement(I)}remove(I){this.detach(I),F(this,r).removeEditor(I),I.div.remove(),I.isAttachedToDOM=!1,F(this,nd)||this.addInkEditorIfNeeded(!1)}changeParent(I){var g;I.parent!==this&&(I.parent&&I.annotationElementId&&(F(this,r).addDeletedAnnotationElement(I.annotationElementId),hI.deleteAnnotationElement(I),I.annotationElementId=null),this.attach(I),(g=I.parent)==null||g.detach(I),I.setParent(this),I.div&&I.isAttachedToDOM&&(I.div.remove(),this.div.append(I.div)))}add(I){if(!(I.parent===this&&I.isAttachedToDOM)){if(this.changeParent(I),F(this,r).addEditor(I),this.attach(I),!I.isAttachedToDOM){const g=I.render();this.div.append(g),I.isAttachedToDOM=!0}I.fixAndSetPosition(),I.onceAdded(),F(this,r).addToAnnotationStorage(I),I._reportTelemetry(I.telemetryInitialData)}}moveEditorInDOM(I){var C;if(!I.isAttachedToDOM)return;const{activeElement:g}=document;I.div.contains(g)&&!F(this,DA)&&(I._focusEventsAllowed=!1,U(this,DA,setTimeout(()=>{U(this,DA,null),I.div.contains(document.activeElement)?I._focusEventsAllowed=!0:(I.div.addEventListener("focusin",()=>{I._focusEventsAllowed=!0},{once:!0,signal:F(this,r)._signal}),g.focus())},0))),I._structTreeParentId=(C=F(this,sZ))==null?void 0:C.moveElementInDOM(this.div,I.div,I.contentDiv,!0)}addOrRebuild(I){I.needsToBeRebuilt()?(I.parent||(I.parent=this),I.rebuild(),I.show()):this.add(I)}addUndoableEditor(I){const g=()=>I._uiManager.rebuild(I),C=()=>{I.remove()};this.addCommands({cmd:g,undo:C,mustExec:!1})}getNextId(){return F(this,r).getId()}get _signal(){return F(this,r)._signal}canCreateNewEmptyEditor(){var I;return(I=F(this,Bg,TG))==null?void 0:I.canCreateNewEmptyEditor()}pasteEditor(I,g){F(this,r).updateToolbar(I),F(this,r).updateMode(I);const{offsetX:C,offsetY:A}=b(this,Bg,LG).call(this),l=this.getNextId(),Z=b(this,Bg,zG).call(this,{parent:this,id:l,x:C,y:A,uiManager:F(this,r),isCentered:!0,...g});Z&&this.add(Z)}deserialize(I){var g;return((g=F(hC,Zl).get(I.annotationType??I.annotationEditorType))==null?void 0:g.deserialize(I,this,F(this,r)))||null}createAndAddNewEditor(I,g,C={}){const A=this.getNextId(),l=b(this,Bg,zG).call(this,{parent:this,id:A,x:I.offsetX,y:I.offsetY,uiManager:F(this,r),isCentered:g,...C});return l&&this.add(l),l}addNewEditor(){this.createAndAddNewEditor(b(this,Bg,LG).call(this),!0)}setSelected(I){F(this,r).setSelected(I)}toggleSelected(I){F(this,r).toggleSelected(I)}isSelected(I){return F(this,r).isSelected(I)}unselect(I){F(this,r).unselect(I)}pointerup(I){const{isMac:g}=wg.platform;if(!(I.button!==0||I.ctrlKey&&g)&&I.target===this.div&&F(this,ll)){if(U(this,ll,!1),!F(this,wd)){U(this,wd,!0);return}if(F(this,r).getMode()===sI.STAMP){F(this,r).unselectAll();return}this.createAndAddNewEditor(I,!1)}}pointerdown(I){if(F(this,r).getMode()===sI.HIGHLIGHT&&this.enableTextSelection(),F(this,ll)){U(this,ll,!1);return}const{isMac:g}=wg.platform;if(I.button!==0||I.ctrlKey&&g||I.target!==this.div)return;U(this,ll,!0);const C=F(this,r).getActive();U(this,wd,!C||C.isEmpty())}findNewParent(I,g,C){const A=F(this,r).findParent(g,C);return A===null||A===this?!1:(A.changeParent(I),!0)}destroy(){var I,g;((I=F(this,r).getActive())==null?void 0:I.parent)===this&&(F(this,r).commitOrRemove(),F(this,r).setActiveEditor(null)),F(this,DA)&&(clearTimeout(F(this,DA)),U(this,DA,null));for(const C of F(this,xg).values())(g=F(this,sZ))==null||g.removePointerInTextLayer(C.contentDiv),C.setParent(null),C.isAttachedToDOM=!1,C.div.remove();this.div=null,F(this,xg).clear(),F(this,r).removeLayer(this)}render({viewport:I}){this.viewport=I,Rl(this.div,I);for(const g of F(this,r).getEditors(this.pageIndex))this.add(g),g.rebuild();this.updateMode()}update({viewport:I}){F(this,r).commitOrRemove(),b(this,Bg,ti).call(this);const g=this.viewport.rotation,C=I.rotation;if(this.viewport=I,Rl(this.div,{rotation:C}),g!==C)for(const A of F(this,xg).values())A.rotate(C);this.addInkEditorIfNeeded(!1)}get pageDimensions(){const{pageWidth:I,pageHeight:g}=this.viewport.rawDims;return[I,g]}get scale(){return F(this,r).viewParameters.realScale}};sZ=new WeakMap,wd=new WeakMap,EC=new WeakMap,UZ=new WeakMap,JA=new WeakMap,MA=new WeakMap,DA=new WeakMap,xg=new WeakMap,ll=new WeakMap,nd=new WeakMap,Sd=new WeakMap,og=new WeakMap,r=new WeakMap,Zl=new WeakMap,Bg=new WeakSet,ms=function(I){if(F(this,r).unselectAll(),I.target===F(this,og).div){const{isMac:g}=wg.platform;if(I.button!==0||I.ctrlKey&&g)return;F(this,r).showAllEditors("highlight",!0,!0),F(this,og).div.classList.add("free"),pF.startHighlighting(this,F(this,r).direction==="ltr",I),F(this,og).div.addEventListener("pointerup",()=>{F(this,og).div.classList.remove("free")},{once:!0,signal:F(this,r)._signal}),I.preventDefault()}},TG=function(){return F(hC,Zl).get(F(this,r).getMode())},zG=function(I){const g=F(this,Bg,TG);return g?new g.prototype.constructor(I):null},LG=function(){const{x:I,y:g,width:C,height:A}=this.div.getBoundingClientRect(),l=Math.max(0,I),Z=Math.max(0,g),B=Math.min(window.innerWidth,I+C),i=Math.min(window.innerHeight,g+A),c=(l+B)/2-I,G=(Z+i)/2-g,[W,V]=this.viewport.rotation%180===0?[c,G]:[G,c];return{offsetX:W,offsetY:V}},ti=function(){U(this,nd,!0);for(const I of F(this,xg).values())I.isEmpty()&&I.remove();U(this,nd,!1)},dI(hC,"_initialized",!1),m(hC,Zl,new Map([Mc,tc,yc,pF].map(I=>[I._editorType,I])));let Hc=hC;const Fg=class Fg{constructor({pageIndex:I}){m(this,bZ);m(this,jC,null);m(this,uB,0);m(this,fI,new Map);m(this,dl,new Map);this.pageIndex=I}setParent(I){if(!F(this,jC)){U(this,jC,I);return}if(F(this,jC)!==I){if(F(this,fI).size>0)for(const g of F(this,fI).values())g.remove(),I.append(g);U(this,jC,I)}}static get _svgFactory(){return bI(this,"_svgFactory",new Fc)}highlight(I,g,C,A=!1){const l=rg(this,uB)._++,Z=b(this,bZ,jG).call(this,I.box);Z.classList.add("highlight"),I.free&&Z.classList.add("free");const B=Fg._svgFactory.createElement("defs");Z.append(B);const i=Fg._svgFactory.createElement("path");B.append(i);const c=`path_p${this.pageIndex}_${l}`;i.setAttribute("id",c),i.setAttribute("d",I.toSVGPath()),A&&F(this,dl).set(l,i);const G=b(this,bZ,Qs).call(this,B,c),W=Fg._svgFactory.createElement("use");return Z.append(W),Z.setAttribute("fill",g),Z.setAttribute("fill-opacity",C),W.setAttribute("href",`#${c}`),F(this,fI).set(l,Z),{id:l,clipPathId:`url(#${G})`}}highlightOutline(I){const g=rg(this,uB)._++,C=b(this,bZ,jG).call(this,I.box);C.classList.add("highlightOutline");const A=Fg._svgFactory.createElement("defs");C.append(A);const l=Fg._svgFactory.createElement("path");A.append(l);const Z=`path_p${this.pageIndex}_${g}`;l.setAttribute("id",Z),l.setAttribute("d",I.toSVGPath()),l.setAttribute("vector-effect","non-scaling-stroke");let B;if(I.free){C.classList.add("free");const G=Fg._svgFactory.createElement("mask");A.append(G),B=`mask_p${this.pageIndex}_${g}`,G.setAttribute("id",B),G.setAttribute("maskUnits","objectBoundingBox");const W=Fg._svgFactory.createElement("rect");G.append(W),W.setAttribute("width","1"),W.setAttribute("height","1"),W.setAttribute("fill","white");const V=Fg._svgFactory.createElement("use");G.append(V),V.setAttribute("href",`#${Z}`),V.setAttribute("stroke","none"),V.setAttribute("fill","black"),V.setAttribute("fill-rule","nonzero"),V.classList.add("mask")}const i=Fg._svgFactory.createElement("use");C.append(i),i.setAttribute("href",`#${Z}`),B&&i.setAttribute("mask",`url(#${B})`);const c=i.cloneNode();return C.append(c),i.classList.add("mainOutline"),c.classList.add("secondaryOutline"),F(this,fI).set(g,C),g}finalizeLine(I,g){const C=F(this,dl).get(I);F(this,dl).delete(I),this.updateBox(I,g.box),C.setAttribute("d",g.toSVGPath())}updateLine(I,g){F(this,fI).get(I).firstChild.firstChild.setAttribute("d",g.toSVGPath())}removeFreeHighlight(I){this.remove(I),F(this,dl).delete(I)}updatePath(I,g){F(this,dl).get(I).setAttribute("d",g.toSVGPath())}updateBox(I,g){var C;b(C=Fg,pB,EG).call(C,F(this,fI).get(I),g)}show(I,g){F(this,fI).get(I).classList.toggle("hidden",!g)}rotate(I,g){F(this,fI).get(I).setAttribute("data-main-rotation",g)}changeColor(I,g){F(this,fI).get(I).setAttribute("fill",g)}changeOpacity(I,g){F(this,fI).get(I).setAttribute("fill-opacity",g)}addClass(I,g){F(this,fI).get(I).classList.add(g)}removeClass(I,g){F(this,fI).get(I).classList.remove(g)}remove(I){F(this,jC)!==null&&(F(this,fI).get(I).remove(),F(this,fI).delete(I))}destroy(){U(this,jC,null);for(const I of F(this,fI).values())I.remove();F(this,fI).clear()}};jC=new WeakMap,uB=new WeakMap,fI=new WeakMap,dl=new WeakMap,pB=new WeakSet,EG=function(I,{x:g=0,y:C=0,width:A=1,height:l=1}={}){const{style:Z}=I;Z.top=`${100*C}%`,Z.left=`${100*g}%`,Z.width=`${100*A}%`,Z.height=`${100*l}%`},bZ=new WeakSet,jG=function(I){var C;const g=Fg._svgFactory.create(1,1,!0);return F(this,jC).append(g),g.setAttribute("aria-hidden",!0),b(C=Fg,pB,EG).call(C,g,I),g},Qs=function(I,g){const C=Fg._svgFactory.createElement("clipPath");I.append(C);const A=`clip_${g}`;C.setAttribute("id",A),C.setAttribute("clipPathUnits","objectBoundingBox");const l=Fg._svgFactory.createElement("use");return C.append(l),l.setAttribute("href",`#${g}`),l.classList.add("clip"),A},m(Fg,pB);let ec=Fg;$.AbortException,$.AnnotationEditorLayer,$.AnnotationEditorParamsType,$.AnnotationEditorType,$.AnnotationEditorUIManager,$.AnnotationLayer,$.AnnotationMode,$.CMapCompressionType,$.ColorPicker,$.DOMSVGFactory,$.DrawLayer,$.FeatureTest;var zm=$.GlobalWorkerOptions;$.ImageKind,$.InvalidPDFException,$.MissingPDFException,$.OPS,$.Outliner,$.PDFDataRangeTransport,$.PDFDateString,$.PDFWorker,$.PasswordResponses,$.PermissionFlag,$.PixelsPerInch,$.RenderingCancelledException;var Lm=$.TextLayer;$.UnexpectedResponseException,$.Util,$.VerbosityLevel,$.XfaLayer,$.build,$.createValidAbsoluteUrl,$.fetchData;var Em=$.getDocument;$.getFilenameFromUrl,$.getPdfFilenameFromUrl,$.getXfaPageViewport,$.isDataScheme,$.isPdfFile,$.noContextMenu,$.normalizeUnicode,$.renderTextLayer,$.setLayerDimensions,$.shadow,$.updateTextLayer,$.version;const jm="data:text/javascript;base64,";zm.workerSrc=jm;const xm=async d=>await Em(d).promise;function Om(d){return d&&d.__esModule&&Object.prototype.hasOwnProperty.call(d,"default")?d.default:d}var hV={exports:{}},oV={exports:{}};(function(){var d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",I={rotl:function(g,C){return g<<C|g>>>32-C},rotr:function(g,C){return g<<32-C|g>>>C},endian:function(g){if(g.constructor==Number)return I.rotl(g,8)&16711935|I.rotl(g,24)&4278255360;for(var C=0;C<g.length;C++)g[C]=I.endian(g[C]);return g},randomBytes:function(g){for(var C=[];g>0;g--)C.push(Math.floor(Math.random()*256));return C},bytesToWords:function(g){for(var C=[],A=0,l=0;A<g.length;A++,l+=8)C[l>>>5]|=g[A]<<24-l%32;return C},wordsToBytes:function(g){for(var C=[],A=0;A<g.length*32;A+=8)C.push(g[A>>>5]>>>24-A%32&255);return C},bytesToHex:function(g){for(var C=[],A=0;A<g.length;A++)C.push((g[A]>>>4).toString(16)),C.push((g[A]&15).toString(16));return C.join("")},hexToBytes:function(g){for(var C=[],A=0;A<g.length;A+=2)C.push(parseInt(g.substr(A,2),16));return C},bytesToBase64:function(g){for(var C=[],A=0;A<g.length;A+=3)for(var l=g[A]<<16|g[A+1]<<8|g[A+2],Z=0;Z<4;Z++)A*8+Z*6<=g.length*8?C.push(d.charAt(l>>>6*(3-Z)&63)):C.push("=");return C.join("")},base64ToBytes:function(g){g=g.replace(/[^A-Z0-9+\/]/ig,"");for(var C=[],A=0,l=0;A<g.length;l=++A%4)l!=0&&C.push((d.indexOf(g.charAt(A-1))&Math.pow(2,-2*l+8)-1)<<l*2|d.indexOf(g.charAt(A))>>>6-l*2);return C}};oV.exports=I})();var rm=oV.exports,uc={utf8:{stringToBytes:function(d){return uc.bin.stringToBytes(unescape(encodeURIComponent(d)))},bytesToString:function(d){return decodeURIComponent(escape(uc.bin.bytesToString(d)))}},bin:{stringToBytes:function(d){for(var I=[],g=0;g<d.length;g++)I.push(d.charCodeAt(g)&255);return I},bytesToString:function(d){for(var I=[],g=0;g<d.length;g++)I.push(String.fromCharCode(d[g]));return I.join("")}}},aV=uc;/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */var vm=function(d){return d!=null&&(YV(d)||Pm(d)||!!d._isBuffer)};function YV(d){return!!d.constructor&&typeof d.constructor.isBuffer=="function"&&d.constructor.isBuffer(d)}function Pm(d){return typeof d.readFloatLE=="function"&&typeof d.slice=="function"&&YV(d.slice(0,0))}(function(){var d=rm,I=aV.utf8,g=vm,C=aV.bin,A=function(l,Z){l.constructor==String?Z&&Z.encoding==="binary"?l=C.stringToBytes(l):l=I.stringToBytes(l):g(l)?l=Array.prototype.slice.call(l,0):!Array.isArray(l)&&l.constructor!==Uint8Array&&(l=l.toString());for(var B=d.bytesToWords(l),i=l.length*8,c=1732584193,G=-271733879,W=-1732584194,V=271733878,R=0;R<B.length;R++)B[R]=(B[R]<<8|B[R]>>>24)&16711935|(B[R]<<24|B[R]>>>8)&4278255360;B[i>>>5]|=128<<i%32,B[(i+64>>>9<<4)+14]=i;for(var s=A._ff,Q=A._gg,h=A._hh,N=A._ii,R=0;R<B.length;R+=16){var o=c,Y=G,n=W,a=V;c=s(c,G,W,V,B[R+0],7,-680876936),V=s(V,c,G,W,B[R+1],12,-389564586),W=s(W,V,c,G,B[R+2],17,606105819),G=s(G,W,V,c,B[R+3],22,-1044525330),c=s(c,G,W,V,B[R+4],7,-176418897),V=s(V,c,G,W,B[R+5],12,1200080426),W=s(W,V,c,G,B[R+6],17,-1473231341),G=s(G,W,V,c,B[R+7],22,-45705983),c=s(c,G,W,V,B[R+8],7,1770035416),V=s(V,c,G,W,B[R+9],12,-1958414417),W=s(W,V,c,G,B[R+10],17,-42063),G=s(G,W,V,c,B[R+11],22,-1990404162),c=s(c,G,W,V,B[R+12],7,1804603682),V=s(V,c,G,W,B[R+13],12,-40341101),W=s(W,V,c,G,B[R+14],17,-1502002290),G=s(G,W,V,c,B[R+15],22,1236535329),c=Q(c,G,W,V,B[R+1],5,-165796510),V=Q(V,c,G,W,B[R+6],9,-1069501632),W=Q(W,V,c,G,B[R+11],14,643717713),G=Q(G,W,V,c,B[R+0],20,-373897302),c=Q(c,G,W,V,B[R+5],5,-701558691),V=Q(V,c,G,W,B[R+10],9,38016083),W=Q(W,V,c,G,B[R+15],14,-660478335),G=Q(G,W,V,c,B[R+4],20,-405537848),c=Q(c,G,W,V,B[R+9],5,568446438),V=Q(V,c,G,W,B[R+14],9,-1019803690),W=Q(W,V,c,G,B[R+3],14,-187363961),G=Q(G,W,V,c,B[R+8],20,1163531501),c=Q(c,G,W,V,B[R+13],5,-1444681467),V=Q(V,c,G,W,B[R+2],9,-51403784),W=Q(W,V,c,G,B[R+7],14,1735328473),G=Q(G,W,V,c,B[R+12],20,-1926607734),c=h(c,G,W,V,B[R+5],4,-378558),V=h(V,c,G,W,B[R+8],11,-2022574463),W=h(W,V,c,G,B[R+11],16,1839030562),G=h(G,W,V,c,B[R+14],23,-35309556),c=h(c,G,W,V,B[R+1],4,-1530992060),V=h(V,c,G,W,B[R+4],11,1272893353),W=h(W,V,c,G,B[R+7],16,-155497632),G=h(G,W,V,c,B[R+10],23,-1094730640),c=h(c,G,W,V,B[R+13],4,681279174),V=h(V,c,G,W,B[R+0],11,-358537222),W=h(W,V,c,G,B[R+3],16,-722521979),G=h(G,W,V,c,B[R+6],23,76029189),c=h(c,G,W,V,B[R+9],4,-640364487),V=h(V,c,G,W,B[R+12],11,-421815835),W=h(W,V,c,G,B[R+15],16,530742520),G=h(G,W,V,c,B[R+2],23,-995338651),c=N(c,G,W,V,B[R+0],6,-198630844),V=N(V,c,G,W,B[R+7],10,1126891415),W=N(W,V,c,G,B[R+14],15,-1416354905),G=N(G,W,V,c,B[R+5],21,-57434055),c=N(c,G,W,V,B[R+12],6,1700485571),V=N(V,c,G,W,B[R+3],10,-1894986606),W=N(W,V,c,G,B[R+10],15,-1051523),G=N(G,W,V,c,B[R+1],21,-2054922799),c=N(c,G,W,V,B[R+8],6,1873313359),V=N(V,c,G,W,B[R+15],10,-30611744),W=N(W,V,c,G,B[R+6],15,-1560198380),G=N(G,W,V,c,B[R+13],21,1309151649),c=N(c,G,W,V,B[R+4],6,-145523070),V=N(V,c,G,W,B[R+11],10,-1120210379),W=N(W,V,c,G,B[R+2],15,718787259),G=N(G,W,V,c,B[R+9],21,-343485551),c=c+o>>>0,G=G+Y>>>0,W=W+n>>>0,V=V+a>>>0}return d.endian([c,G,W,V])};A._ff=function(l,Z,B,i,c,G,W){var V=l+(Z&B|~Z&i)+(c>>>0)+W;return(V<<G|V>>>32-G)+Z},A._gg=function(l,Z,B,i,c,G,W){var V=l+(Z&i|B&~i)+(c>>>0)+W;return(V<<G|V>>>32-G)+Z},A._hh=function(l,Z,B,i,c,G,W){var V=l+(Z^B^i)+(c>>>0)+W;return(V<<G|V>>>32-G)+Z},A._ii=function(l,Z,B,i,c,G,W){var V=l+(B^(Z|~i))+(c>>>0)+W;return(V<<G|V>>>32-G)+Z},A._blocksize=16,A._digestsize=16,hV.exports=function(l,Z){if(l==null)throw new Error("Illegal argument "+l);var B=d.wordsToBytes(A(l,Z));return Z&&Z.asBytes?B:Z&&Z.asString?C.bytesToString(B):d.bytesToHex(B)}})();var fm=hV.exports;const qm=Om(fm),wV="KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIE0wKG0pe3JldHVybiBtJiZtLl9fZXNNb2R1bGUmJk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtLCJkZWZhdWx0Iik/bS5kZWZhdWx0Om19ZnVuY3Rpb24gQzAobSl7dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZHluYW1pY2FsbHkgcmVxdWlyZSAiJyttKyciLiBQbGVhc2UgY29uZmlndXJlIHRoZSBkeW5hbWljUmVxdWlyZVRhcmdldHMgb3IvYW5kIGlnbm9yZUR5bmFtaWNSZXF1aXJlcyBvcHRpb24gb2YgQHJvbGx1cC9wbHVnaW4tY29tbW9uanMgYXBwcm9wcmlhdGVseSBmb3IgdGhpcyByZXF1aXJlIGNhbGwgdG8gd29yay4nKX12YXIgZDA9e2V4cG9ydHM6e319LEZlPXt9LHMwO2Z1bmN0aW9uIEhlKCl7cmV0dXJuIHMwfHwoczA9MSxmdW5jdGlvbihtKXt2YXIgRz10eXBlb2YgVWludDhBcnJheTwidSImJnR5cGVvZiBVaW50MTZBcnJheTwidSImJnR5cGVvZiBJbnQzMkFycmF5PCJ1IjtmdW5jdGlvbiBZKEkscil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChJLHIpfW0uYXNzaWduPWZ1bmN0aW9uKEkpe2Zvcih2YXIgcj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7ci5sZW5ndGg7KXt2YXIgdD1yLnNoaWZ0KCk7aWYodCl7aWYodHlwZW9mIHQhPSJvYmplY3QiKXRocm93IG5ldyBUeXBlRXJyb3IodCsibXVzdCBiZSBub24tb2JqZWN0Iik7Zm9yKHZhciBpIGluIHQpWSh0LGkpJiYoSVtpXT10W2ldKX19cmV0dXJuIEl9LG0uc2hyaW5rQnVmPWZ1bmN0aW9uKEkscil7cmV0dXJuIEkubGVuZ3RoPT09cj9JOkkuc3ViYXJyYXk/SS5zdWJhcnJheSgwLHIpOihJLmxlbmd0aD1yLEkpfTt2YXIgUj17YXJyYXlTZXQ6ZnVuY3Rpb24oSSxyLHQsaSxiKXtpZihyLnN1YmFycmF5JiZJLnN1YmFycmF5KXtJLnNldChyLnN1YmFycmF5KHQsdCtpKSxiKTtyZXR1cm59Zm9yKHZhciBfPTA7XzxpO18rKylJW2IrX109clt0K19dfSxmbGF0dGVuQ2h1bmtzOmZ1bmN0aW9uKEkpe3ZhciByLHQsaSxiLF8scztmb3IoaT0wLHI9MCx0PUkubGVuZ3RoO3I8dDtyKyspaSs9SVtyXS5sZW5ndGg7Zm9yKHM9bmV3IFVpbnQ4QXJyYXkoaSksYj0wLHI9MCx0PUkubGVuZ3RoO3I8dDtyKyspXz1JW3JdLHMuc2V0KF8sYiksYis9Xy5sZW5ndGg7cmV0dXJuIHN9fSxrPXthcnJheVNldDpmdW5jdGlvbihJLHIsdCxpLGIpe2Zvcih2YXIgXz0wO188aTtfKyspSVtiK19dPXJbdCtfXX0sZmxhdHRlbkNodW5rczpmdW5jdGlvbihJKXtyZXR1cm5bXS5jb25jYXQuYXBwbHkoW10sSSl9fTttLnNldFR5cGVkPWZ1bmN0aW9uKEkpe0k/KG0uQnVmOD1VaW50OEFycmF5LG0uQnVmMTY9VWludDE2QXJyYXksbS5CdWYzMj1JbnQzMkFycmF5LG0uYXNzaWduKG0sUikpOihtLkJ1Zjg9QXJyYXksbS5CdWYxNj1BcnJheSxtLkJ1ZjMyPUFycmF5LG0uYXNzaWduKG0saykpfSxtLnNldFR5cGVkKEcpfShGZSkpLEZlfXZhciBZZT17fSxNZT17fSxKZT17fSxfMDtmdW5jdGlvbiBtMCgpe2lmKF8wKXJldHVybiBKZTtfMD0xO3ZhciBtPUhlKCksRz00LFk9MCxSPTEsaz0yO2Z1bmN0aW9uIEkobCl7Zm9yKHZhciBKPWwubGVuZ3RoOy0tSj49MDspbFtKXT0wfXZhciByPTAsdD0xLGk9MixiPTMsXz0yNTgscz0yOSxoPTI1Nix2PWgrMStzLEU9MzAsZD0xOSx1PTIqdisxLGM9MTUsbz0xNixuPTcsdz0yNTYsZz0xNixwPTE3LFM9MTgsQT1bMCwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMiwyLDIsMiwzLDMsMywzLDQsNCw0LDQsNSw1LDUsNSwwXSxMPVswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSxEPVswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMyw3XSxCPVsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSxqPTUxMixDPW5ldyBBcnJheSgodisyKSoyKTtJKEMpO3ZhciBIPW5ldyBBcnJheShFKjIpO0koSCk7dmFyIFU9bmV3IEFycmF5KGopO0koVSk7dmFyIFg9bmV3IEFycmF5KF8tYisxKTtJKFgpO3ZhciBUPW5ldyBBcnJheShzKTtJKFQpO3ZhciBQPW5ldyBBcnJheShFKTtJKFApO2Z1bmN0aW9uIFoobCxKLFcsZWUseSl7dGhpcy5zdGF0aWNfdHJlZT1sLHRoaXMuZXh0cmFfYml0cz1KLHRoaXMuZXh0cmFfYmFzZT1XLHRoaXMuZWxlbXM9ZWUsdGhpcy5tYXhfbGVuZ3RoPXksdGhpcy5oYXNfc3RyZWU9bCYmbC5sZW5ndGh9dmFyIGFlLCQsdGU7ZnVuY3Rpb24gVihsLEope3RoaXMuZHluX3RyZWU9bCx0aGlzLm1heF9jb2RlPTAsdGhpcy5zdGF0X2Rlc2M9Sn1mdW5jdGlvbiB1ZShsKXtyZXR1cm4gbDwyNTY/VVtsXTpVWzI1NisobD4+PjcpXX1mdW5jdGlvbiBmZShsLEope2wucGVuZGluZ19idWZbbC5wZW5kaW5nKytdPUomMjU1LGwucGVuZGluZ19idWZbbC5wZW5kaW5nKytdPUo+Pj44JjI1NX1mdW5jdGlvbiBoZShsLEosVyl7bC5iaV92YWxpZD5vLVc/KGwuYmlfYnVmfD1KPDxsLmJpX3ZhbGlkJjY1NTM1LGZlKGwsbC5iaV9idWYpLGwuYmlfYnVmPUo+Pm8tbC5iaV92YWxpZCxsLmJpX3ZhbGlkKz1XLW8pOihsLmJpX2J1Znw9Sjw8bC5iaV92YWxpZCY2NTUzNSxsLmJpX3ZhbGlkKz1XKX1mdW5jdGlvbiBsZShsLEosVyl7aGUobCxXW0oqMl0sV1tKKjIrMV0pfWZ1bmN0aW9uIHNlKGwsSil7dmFyIFc9MDtkbyBXfD1sJjEsbD4+Pj0xLFc8PD0xO3doaWxlKC0tSj4wKTtyZXR1cm4gVz4+PjF9ZnVuY3Rpb24gZ2UobCl7bC5iaV92YWxpZD09PTE2PyhmZShsLGwuYmlfYnVmKSxsLmJpX2J1Zj0wLGwuYmlfdmFsaWQ9MCk6bC5iaV92YWxpZD49OCYmKGwucGVuZGluZ19idWZbbC5wZW5kaW5nKytdPWwuYmlfYnVmJjI1NSxsLmJpX2J1Zj4+PTgsbC5iaV92YWxpZC09OCl9ZnVuY3Rpb24gemUobCxKKXt2YXIgVz1KLmR5bl90cmVlLGVlPUoubWF4X2NvZGUseT1KLnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxNPUouc3RhdF9kZXNjLmhhc19zdHJlZSxhPUouc3RhdF9kZXNjLmV4dHJhX2JpdHMsSz1KLnN0YXRfZGVzYy5leHRyYV9iYXNlLG5lPUouc3RhdF9kZXNjLm1heF9sZW5ndGgsZSxOLE8sZix4LHosaWU9MDtmb3IoZj0wO2Y8PWM7ZisrKWwuYmxfY291bnRbZl09MDtmb3IoV1tsLmhlYXBbbC5oZWFwX21heF0qMisxXT0wLGU9bC5oZWFwX21heCsxO2U8dTtlKyspTj1sLmhlYXBbZV0sZj1XW1dbTioyKzFdKjIrMV0rMSxmPm5lJiYoZj1uZSxpZSsrKSxXW04qMisxXT1mLCEoTj5lZSkmJihsLmJsX2NvdW50W2ZdKysseD0wLE4+PUsmJih4PWFbTi1LXSksej1XW04qMl0sbC5vcHRfbGVuKz16KihmK3gpLE0mJihsLnN0YXRpY19sZW4rPXoqKHlbTioyKzFdK3gpKSk7aWYoaWUhPT0wKXtkb3tmb3IoZj1uZS0xO2wuYmxfY291bnRbZl09PT0wOylmLS07bC5ibF9jb3VudFtmXS0tLGwuYmxfY291bnRbZisxXSs9MixsLmJsX2NvdW50W25lXS0tLGllLT0yfXdoaWxlKGllPjApO2ZvcihmPW5lO2YhPT0wO2YtLSlmb3IoTj1sLmJsX2NvdW50W2ZdO04hPT0wOylPPWwuaGVhcFstLWVdLCEoTz5lZSkmJihXW08qMisxXSE9PWYmJihsLm9wdF9sZW4rPShmLVdbTyoyKzFdKSpXW08qMl0sV1tPKjIrMV09ZiksTi0tKX19ZnVuY3Rpb24geGUobCxKLFcpe3ZhciBlZT1uZXcgQXJyYXkoYysxKSx5PTAsTSxhO2ZvcihNPTE7TTw9YztNKyspZWVbTV09eT15K1dbTS0xXTw8MTtmb3IoYT0wO2E8PUo7YSsrKXt2YXIgSz1sW2EqMisxXTtLIT09MCYmKGxbYSoyXT1zZShlZVtLXSsrLEspKX19ZnVuY3Rpb24gY2UoKXt2YXIgbCxKLFcsZWUseSxNPW5ldyBBcnJheShjKzEpO2ZvcihXPTAsZWU9MDtlZTxzLTE7ZWUrKylmb3IoVFtlZV09VyxsPTA7bDwxPDxBW2VlXTtsKyspWFtXKytdPWVlO2ZvcihYW1ctMV09ZWUseT0wLGVlPTA7ZWU8MTY7ZWUrKylmb3IoUFtlZV09eSxsPTA7bDwxPDxMW2VlXTtsKyspVVt5KytdPWVlO2Zvcih5Pj49NztlZTxFO2VlKyspZm9yKFBbZWVdPXk8PDcsbD0wO2w8MTw8TFtlZV0tNztsKyspVVsyNTYreSsrXT1lZTtmb3IoSj0wO0o8PWM7SisrKU1bSl09MDtmb3IobD0wO2w8PTE0MzspQ1tsKjIrMV09OCxsKyssTVs4XSsrO2Zvcig7bDw9MjU1OylDW2wqMisxXT05LGwrKyxNWzldKys7Zm9yKDtsPD0yNzk7KUNbbCoyKzFdPTcsbCsrLE1bN10rKztmb3IoO2w8PTI4NzspQ1tsKjIrMV09OCxsKyssTVs4XSsrO2Zvcih4ZShDLHYrMSxNKSxsPTA7bDxFO2wrKylIW2wqMisxXT01LEhbbCoyXT1zZShsLDUpO2FlPW5ldyBaKEMsQSxoKzEsdixjKSwkPW5ldyBaKEgsTCwwLEUsYyksdGU9bmV3IFoobmV3IEFycmF5KDApLEQsMCxkLG4pfWZ1bmN0aW9uIFNlKGwpe3ZhciBKO2ZvcihKPTA7Sjx2O0orKylsLmR5bl9sdHJlZVtKKjJdPTA7Zm9yKEo9MDtKPEU7SisrKWwuZHluX2R0cmVlW0oqMl09MDtmb3IoSj0wO0o8ZDtKKyspbC5ibF90cmVlW0oqMl09MDtsLmR5bl9sdHJlZVt3KjJdPTEsbC5vcHRfbGVuPWwuc3RhdGljX2xlbj0wLGwubGFzdF9saXQ9bC5tYXRjaGVzPTB9ZnVuY3Rpb24gbWUobCl7bC5iaV92YWxpZD44P2ZlKGwsbC5iaV9idWYpOmwuYmlfdmFsaWQ+MCYmKGwucGVuZGluZ19idWZbbC5wZW5kaW5nKytdPWwuYmlfYnVmKSxsLmJpX2J1Zj0wLGwuYmlfdmFsaWQ9MH1mdW5jdGlvbiBSZShsLEosVyxlZSl7bWUobCksZmUobCxXKSxmZShsLH5XKSxtLmFycmF5U2V0KGwucGVuZGluZ19idWYsbC53aW5kb3csSixXLGwucGVuZGluZyksbC5wZW5kaW5nKz1XfWZ1bmN0aW9uIG9lKGwsSixXLGVlKXt2YXIgeT1KKjIsTT1XKjI7cmV0dXJuIGxbeV08bFtNXXx8bFt5XT09PWxbTV0mJmVlW0pdPD1lZVtXXX1mdW5jdGlvbiBxKGwsSixXKXtmb3IodmFyIGVlPWwuaGVhcFtXXSx5PVc8PDE7eTw9bC5oZWFwX2xlbiYmKHk8bC5oZWFwX2xlbiYmb2UoSixsLmhlYXBbeSsxXSxsLmhlYXBbeV0sbC5kZXB0aCkmJnkrKywhb2UoSixlZSxsLmhlYXBbeV0sbC5kZXB0aCkpOylsLmhlYXBbV109bC5oZWFwW3ldLFc9eSx5PDw9MTtsLmhlYXBbV109ZWV9ZnVuY3Rpb24gcmUobCxKLFcpe3ZhciBlZSx5LE09MCxhLEs7aWYobC5sYXN0X2xpdCE9PTApZG8gZWU9bC5wZW5kaW5nX2J1ZltsLmRfYnVmK00qMl08PDh8bC5wZW5kaW5nX2J1ZltsLmRfYnVmK00qMisxXSx5PWwucGVuZGluZ19idWZbbC5sX2J1ZitNXSxNKyssZWU9PT0wP2xlKGwseSxKKTooYT1YW3ldLGxlKGwsYStoKzEsSiksSz1BW2FdLEshPT0wJiYoeS09VFthXSxoZShsLHksSykpLGVlLS0sYT11ZShlZSksbGUobCxhLFcpLEs9TFthXSxLIT09MCYmKGVlLT1QW2FdLGhlKGwsZWUsSykpKTt3aGlsZShNPGwubGFzdF9saXQpO2xlKGwsdyxKKX1mdW5jdGlvbiBkZShsLEope3ZhciBXPUouZHluX3RyZWUsZWU9Si5zdGF0X2Rlc2Muc3RhdGljX3RyZWUseT1KLnN0YXRfZGVzYy5oYXNfc3RyZWUsTT1KLnN0YXRfZGVzYy5lbGVtcyxhLEssbmU9LTEsZTtmb3IobC5oZWFwX2xlbj0wLGwuaGVhcF9tYXg9dSxhPTA7YTxNO2ErKylXW2EqMl0hPT0wPyhsLmhlYXBbKytsLmhlYXBfbGVuXT1uZT1hLGwuZGVwdGhbYV09MCk6V1thKjIrMV09MDtmb3IoO2wuaGVhcF9sZW48MjspZT1sLmhlYXBbKytsLmhlYXBfbGVuXT1uZTwyPysrbmU6MCxXW2UqMl09MSxsLmRlcHRoW2VdPTAsbC5vcHRfbGVuLS0seSYmKGwuc3RhdGljX2xlbi09ZWVbZSoyKzFdKTtmb3IoSi5tYXhfY29kZT1uZSxhPWwuaGVhcF9sZW4+PjE7YT49MTthLS0pcShsLFcsYSk7ZT1NO2RvIGE9bC5oZWFwWzFdLGwuaGVhcFsxXT1sLmhlYXBbbC5oZWFwX2xlbi0tXSxxKGwsVywxKSxLPWwuaGVhcFsxXSxsLmhlYXBbLS1sLmhlYXBfbWF4XT1hLGwuaGVhcFstLWwuaGVhcF9tYXhdPUssV1tlKjJdPVdbYSoyXStXW0sqMl0sbC5kZXB0aFtlXT0obC5kZXB0aFthXT49bC5kZXB0aFtLXT9sLmRlcHRoW2FdOmwuZGVwdGhbS10pKzEsV1thKjIrMV09V1tLKjIrMV09ZSxsLmhlYXBbMV09ZSsrLHEobCxXLDEpO3doaWxlKGwuaGVhcF9sZW4+PTIpO2wuaGVhcFstLWwuaGVhcF9tYXhdPWwuaGVhcFsxXSx6ZShsLEopLHhlKFcsbmUsbC5ibF9jb3VudCl9ZnVuY3Rpb24gd2UobCxKLFcpe3ZhciBlZSx5PS0xLE0sYT1KWzAqMisxXSxLPTAsbmU9NyxlPTQ7Zm9yKGE9PT0wJiYobmU9MTM4LGU9MyksSlsoVysxKSoyKzFdPTY1NTM1LGVlPTA7ZWU8PVc7ZWUrKylNPWEsYT1KWyhlZSsxKSoyKzFdLCEoKytLPG5lJiZNPT09YSkmJihLPGU/bC5ibF90cmVlW00qMl0rPUs6TSE9PTA/KE0hPT15JiZsLmJsX3RyZWVbTSoyXSsrLGwuYmxfdHJlZVtnKjJdKyspOks8PTEwP2wuYmxfdHJlZVtwKjJdKys6bC5ibF90cmVlW1MqMl0rKyxLPTAseT1NLGE9PT0wPyhuZT0xMzgsZT0zKTpNPT09YT8obmU9NixlPTMpOihuZT03LGU9NCkpfWZ1bmN0aW9uIGJlKGwsSixXKXt2YXIgZWUseT0tMSxNLGE9SlswKjIrMV0sSz0wLG5lPTcsZT00O2ZvcihhPT09MCYmKG5lPTEzOCxlPTMpLGVlPTA7ZWU8PVc7ZWUrKylpZihNPWEsYT1KWyhlZSsxKSoyKzFdLCEoKytLPG5lJiZNPT09YSkpe2lmKEs8ZSlkbyBsZShsLE0sbC5ibF90cmVlKTt3aGlsZSgtLUshPT0wKTtlbHNlIE0hPT0wPyhNIT09eSYmKGxlKGwsTSxsLmJsX3RyZWUpLEstLSksbGUobCxnLGwuYmxfdHJlZSksaGUobCxLLTMsMikpOks8PTEwPyhsZShsLHAsbC5ibF90cmVlKSxoZShsLEstMywzKSk6KGxlKGwsUyxsLmJsX3RyZWUpLGhlKGwsSy0xMSw3KSk7Sz0wLHk9TSxhPT09MD8obmU9MTM4LGU9Myk6TT09PWE/KG5lPTYsZT0zKToobmU9NyxlPTQpfX1mdW5jdGlvbiBBZShsKXt2YXIgSjtmb3Iod2UobCxsLmR5bl9sdHJlZSxsLmxfZGVzYy5tYXhfY29kZSksd2UobCxsLmR5bl9kdHJlZSxsLmRfZGVzYy5tYXhfY29kZSksZGUobCxsLmJsX2Rlc2MpLEo9ZC0xO0o+PTMmJmwuYmxfdHJlZVtCW0pdKjIrMV09PT0wO0otLSk7cmV0dXJuIGwub3B0X2xlbis9MyooSisxKSs1KzUrNCxKfWZ1bmN0aW9uICRlKGwsSixXLGVlKXt2YXIgeTtmb3IoaGUobCxKLTI1Nyw1KSxoZShsLFctMSw1KSxoZShsLGVlLTQsNCkseT0wO3k8ZWU7eSsrKWhlKGwsbC5ibF90cmVlW0JbeV0qMisxXSwzKTtiZShsLGwuZHluX2x0cmVlLEotMSksYmUobCxsLmR5bl9kdHJlZSxXLTEpfWZ1bmN0aW9uIGplKGwpe3ZhciBKPTQwOTM2MjQ0NDcsVztmb3IoVz0wO1c8PTMxO1crKyxKPj4+PTEpaWYoSiYxJiZsLmR5bl9sdHJlZVtXKjJdIT09MClyZXR1cm4gWTtpZihsLmR5bl9sdHJlZVs5KjJdIT09MHx8bC5keW5fbHRyZWVbMTAqMl0hPT0wfHxsLmR5bl9sdHJlZVsxMyoyXSE9PTApcmV0dXJuIFI7Zm9yKFc9MzI7VzxoO1crKylpZihsLmR5bl9sdHJlZVtXKjJdIT09MClyZXR1cm4gUjtyZXR1cm4gWX12YXIgQ2U9ITE7ZnVuY3Rpb24gWGUobCl7Q2V8fChjZSgpLENlPSEwKSxsLmxfZGVzYz1uZXcgVihsLmR5bl9sdHJlZSxhZSksbC5kX2Rlc2M9bmV3IFYobC5keW5fZHRyZWUsJCksbC5ibF9kZXNjPW5ldyBWKGwuYmxfdHJlZSx0ZSksbC5iaV9idWY9MCxsLmJpX3ZhbGlkPTAsU2UobCl9ZnVuY3Rpb24gVWUobCxKLFcsZWUpe2hlKGwsKHI8PDEpKyhlZT8xOjApLDMpLFJlKGwsSixXKX1mdW5jdGlvbiBEZShsKXtoZShsLHQ8PDEsMyksbGUobCx3LEMpLGdlKGwpfWZ1bmN0aW9uIEllKGwsSixXLGVlKXt2YXIgeSxNLGE9MDtsLmxldmVsPjA/KGwuc3RybS5kYXRhX3R5cGU9PT1rJiYobC5zdHJtLmRhdGFfdHlwZT1qZShsKSksZGUobCxsLmxfZGVzYyksZGUobCxsLmRfZGVzYyksYT1BZShsKSx5PWwub3B0X2xlbiszKzc+Pj4zLE09bC5zdGF0aWNfbGVuKzMrNz4+PjMsTTw9eSYmKHk9TSkpOnk9TT1XKzUsVys0PD15JiZKIT09LTE/VWUobCxKLFcsZWUpOmwuc3RyYXRlZ3k9PT1HfHxNPT09eT8oaGUobCwodDw8MSkrKGVlPzE6MCksMykscmUobCxDLEgpKTooaGUobCwoaTw8MSkrKGVlPzE6MCksMyksJGUobCxsLmxfZGVzYy5tYXhfY29kZSsxLGwuZF9kZXNjLm1heF9jb2RlKzEsYSsxKSxyZShsLGwuZHluX2x0cmVlLGwuZHluX2R0cmVlKSksU2UobCksZWUmJm1lKGwpfWZ1bmN0aW9uIFZlKGwsSixXKXtyZXR1cm4gbC5wZW5kaW5nX2J1ZltsLmRfYnVmK2wubGFzdF9saXQqMl09Sj4+PjgmMjU1LGwucGVuZGluZ19idWZbbC5kX2J1ZitsLmxhc3RfbGl0KjIrMV09SiYyNTUsbC5wZW5kaW5nX2J1ZltsLmxfYnVmK2wubGFzdF9saXRdPVcmMjU1LGwubGFzdF9saXQrKyxKPT09MD9sLmR5bl9sdHJlZVtXKjJdKys6KGwubWF0Y2hlcysrLEotLSxsLmR5bl9sdHJlZVsoWFtXXStoKzEpKjJdKyssbC5keW5fZHRyZWVbdWUoSikqMl0rKyksbC5sYXN0X2xpdD09PWwubGl0X2J1ZnNpemUtMX1yZXR1cm4gSmUuX3RyX2luaXQ9WGUsSmUuX3RyX3N0b3JlZF9ibG9jaz1VZSxKZS5fdHJfZmx1c2hfYmxvY2s9SWUsSmUuX3RyX3RhbGx5PVZlLEplLl90cl9hbGlnbj1EZSxKZX12YXIgZTAsdTA7ZnVuY3Rpb24gdjAoKXtpZih1MClyZXR1cm4gZTA7dTA9MTtmdW5jdGlvbiBtKEcsWSxSLGspe2Zvcih2YXIgST1HJjY1NTM1fDAscj1HPj4+MTYmNjU1MzV8MCx0PTA7UiE9PTA7KXt0PVI+MmUzPzJlMzpSLFItPXQ7ZG8gST1JK1lbaysrXXwwLHI9citJfDA7d2hpbGUoLS10KTtJJT02NTUyMSxyJT02NTUyMX1yZXR1cm4gSXxyPDwxNnwwfXJldHVybiBlMD1tLGUwfXZhciB0MCxjMDtmdW5jdGlvbiB3MCgpe2lmKGMwKXJldHVybiB0MDtjMD0xO2Z1bmN0aW9uIG0oKXtmb3IodmFyIFIsaz1bXSxJPTA7STwyNTY7SSsrKXtSPUk7Zm9yKHZhciByPTA7cjw4O3IrKylSPVImMT8zOTg4MjkyMzg0XlI+Pj4xOlI+Pj4xO2tbSV09Un1yZXR1cm4ga312YXIgRz1tKCk7ZnVuY3Rpb24gWShSLGssSSxyKXt2YXIgdD1HLGk9citJO1JePS0xO2Zvcih2YXIgYj1yO2I8aTtiKyspUj1SPj4+OF50WyhSXmtbYl0pJjI1NV07cmV0dXJuIFJeLTF9cmV0dXJuIHQwPVksdDB9dmFyIHIwLGIwO2Z1bmN0aW9uIGkwKCl7cmV0dXJuIGIwfHwoYjA9MSxyMD17MjoibmVlZCBkaWN0aW9uYXJ5IiwxOiJzdHJlYW0gZW5kIiwwOiIiLCItMSI6ImZpbGUgZXJyb3IiLCItMiI6InN0cmVhbSBlcnJvciIsIi0zIjoiZGF0YSBlcnJvciIsIi00IjoiaW5zdWZmaWNpZW50IG1lbW9yeSIsIi01IjoiYnVmZmVyIGVycm9yIiwiLTYiOiJpbmNvbXBhdGlibGUgdmVyc2lvbiJ9KSxyMH12YXIgZzA7ZnVuY3Rpb24gSTAoKXtpZihnMClyZXR1cm4gTWU7ZzA9MTt2YXIgbT1IZSgpLEc9bTAoKSxZPXYwKCksUj13MCgpLGs9aTAoKSxJPTAscj0xLHQ9MyxpPTQsYj01LF89MCxzPTEsaD0tMix2PS0zLEU9LTUsZD0tMSx1PTEsYz0yLG89MyxuPTQsdz0wLGc9MixwPTgsUz05LEE9MTUsTD04LEQ9MjksQj0yNTYsaj1CKzErRCxDPTMwLEg9MTksVT0yKmorMSxYPTE1LFQ9MyxQPTI1OCxaPVArVCsxLGFlPTMyLCQ9NDIsdGU9NjksVj03Myx1ZT05MSxmZT0xMDMsaGU9MTEzLGxlPTY2NixzZT0xLGdlPTIsemU9Myx4ZT00LGNlPTM7ZnVuY3Rpb24gU2UoZSxOKXtyZXR1cm4gZS5tc2c9a1tOXSxOfWZ1bmN0aW9uIG1lKGUpe3JldHVybihlPDwxKS0oZT40Pzk6MCl9ZnVuY3Rpb24gUmUoZSl7Zm9yKHZhciBOPWUubGVuZ3RoOy0tTj49MDspZVtOXT0wfWZ1bmN0aW9uIG9lKGUpe3ZhciBOPWUuc3RhdGUsTz1OLnBlbmRpbmc7Tz5lLmF2YWlsX291dCYmKE89ZS5hdmFpbF9vdXQpLE8hPT0wJiYobS5hcnJheVNldChlLm91dHB1dCxOLnBlbmRpbmdfYnVmLE4ucGVuZGluZ19vdXQsTyxlLm5leHRfb3V0KSxlLm5leHRfb3V0Kz1PLE4ucGVuZGluZ19vdXQrPU8sZS50b3RhbF9vdXQrPU8sZS5hdmFpbF9vdXQtPU8sTi5wZW5kaW5nLT1PLE4ucGVuZGluZz09PTAmJihOLnBlbmRpbmdfb3V0PTApKX1mdW5jdGlvbiBxKGUsTil7Ry5fdHJfZmx1c2hfYmxvY2soZSxlLmJsb2NrX3N0YXJ0Pj0wP2UuYmxvY2tfc3RhcnQ6LTEsZS5zdHJzdGFydC1lLmJsb2NrX3N0YXJ0LE4pLGUuYmxvY2tfc3RhcnQ9ZS5zdHJzdGFydCxvZShlLnN0cm0pfWZ1bmN0aW9uIHJlKGUsTil7ZS5wZW5kaW5nX2J1ZltlLnBlbmRpbmcrK109Tn1mdW5jdGlvbiBkZShlLE4pe2UucGVuZGluZ19idWZbZS5wZW5kaW5nKytdPU4+Pj44JjI1NSxlLnBlbmRpbmdfYnVmW2UucGVuZGluZysrXT1OJjI1NX1mdW5jdGlvbiB3ZShlLE4sTyxmKXt2YXIgeD1lLmF2YWlsX2luO3JldHVybiB4PmYmJih4PWYpLHg9PT0wPzA6KGUuYXZhaWxfaW4tPXgsbS5hcnJheVNldChOLGUuaW5wdXQsZS5uZXh0X2luLHgsTyksZS5zdGF0ZS53cmFwPT09MT9lLmFkbGVyPVkoZS5hZGxlcixOLHgsTyk6ZS5zdGF0ZS53cmFwPT09MiYmKGUuYWRsZXI9UihlLmFkbGVyLE4seCxPKSksZS5uZXh0X2luKz14LGUudG90YWxfaW4rPXgseCl9ZnVuY3Rpb24gYmUoZSxOKXt2YXIgTz1lLm1heF9jaGFpbl9sZW5ndGgsZj1lLnN0cnN0YXJ0LHgseixpZT1lLnByZXZfbGVuZ3RoLFE9ZS5uaWNlX21hdGNoLEY9ZS5zdHJzdGFydD5lLndfc2l6ZS1aP2Uuc3Ryc3RhcnQtKGUud19zaXplLVopOjAsX2U9ZS53aW5kb3csR2U9ZS53X21hc2sscGU9ZS5wcmV2LHZlPWUuc3Ryc3RhcnQrUCxFZT1fZVtmK2llLTFdLEJlPV9lW2YraWVdO2UucHJldl9sZW5ndGg+PWUuZ29vZF9tYXRjaCYmKE8+Pj0yKSxRPmUubG9va2FoZWFkJiYoUT1lLmxvb2thaGVhZCk7ZG8gaWYoeD1OLCEoX2VbeCtpZV0hPT1CZXx8X2VbeCtpZS0xXSE9PUVlfHxfZVt4XSE9PV9lW2ZdfHxfZVsrK3hdIT09X2VbZisxXSkpe2YrPTIseCsrO2RvO3doaWxlKF9lWysrZl09PT1fZVsrK3hdJiZfZVsrK2ZdPT09X2VbKyt4XSYmX2VbKytmXT09PV9lWysreF0mJl9lWysrZl09PT1fZVsrK3hdJiZfZVsrK2ZdPT09X2VbKyt4XSYmX2VbKytmXT09PV9lWysreF0mJl9lWysrZl09PT1fZVsrK3hdJiZfZVsrK2ZdPT09X2VbKyt4XSYmZjx2ZSk7aWYoej1QLSh2ZS1mKSxmPXZlLVAsej5pZSl7aWYoZS5tYXRjaF9zdGFydD1OLGllPXosej49USlicmVhaztFZT1fZVtmK2llLTFdLEJlPV9lW2YraWVdfX13aGlsZSgoTj1wZVtOJkdlXSk+RiYmLS1PIT09MCk7cmV0dXJuIGllPD1lLmxvb2thaGVhZD9pZTplLmxvb2thaGVhZH1mdW5jdGlvbiBBZShlKXt2YXIgTj1lLndfc2l6ZSxPLGYseCx6LGllO2Rve2lmKHo9ZS53aW5kb3dfc2l6ZS1lLmxvb2thaGVhZC1lLnN0cnN0YXJ0LGUuc3Ryc3RhcnQ+PU4rKE4tWikpe20uYXJyYXlTZXQoZS53aW5kb3csZS53aW5kb3csTixOLDApLGUubWF0Y2hfc3RhcnQtPU4sZS5zdHJzdGFydC09TixlLmJsb2NrX3N0YXJ0LT1OLGY9ZS5oYXNoX3NpemUsTz1mO2RvIHg9ZS5oZWFkWy0tT10sZS5oZWFkW09dPXg+PU4/eC1OOjA7d2hpbGUoLS1mKTtmPU4sTz1mO2RvIHg9ZS5wcmV2Wy0tT10sZS5wcmV2W09dPXg+PU4/eC1OOjA7d2hpbGUoLS1mKTt6Kz1OfWlmKGUuc3RybS5hdmFpbF9pbj09PTApYnJlYWs7aWYoZj13ZShlLnN0cm0sZS53aW5kb3csZS5zdHJzdGFydCtlLmxvb2thaGVhZCx6KSxlLmxvb2thaGVhZCs9ZixlLmxvb2thaGVhZCtlLmluc2VydD49VClmb3IoaWU9ZS5zdHJzdGFydC1lLmluc2VydCxlLmluc19oPWUud2luZG93W2llXSxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbaWUrMV0pJmUuaGFzaF9tYXNrO2UuaW5zZXJ0JiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2llK1QtMV0pJmUuaGFzaF9tYXNrLGUucHJldltpZSZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1pZSxpZSsrLGUuaW5zZXJ0LS0sIShlLmxvb2thaGVhZCtlLmluc2VydDxUKSk7KTt9d2hpbGUoZS5sb29rYWhlYWQ8WiYmZS5zdHJtLmF2YWlsX2luIT09MCl9ZnVuY3Rpb24gJGUoZSxOKXt2YXIgTz02NTUzNTtmb3IoTz5lLnBlbmRpbmdfYnVmX3NpemUtNSYmKE89ZS5wZW5kaW5nX2J1Zl9zaXplLTUpOzspe2lmKGUubG9va2FoZWFkPD0xKXtpZihBZShlKSxlLmxvb2thaGVhZD09PTAmJk49PT1JKXJldHVybiBzZTtpZihlLmxvb2thaGVhZD09PTApYnJlYWt9ZS5zdHJzdGFydCs9ZS5sb29rYWhlYWQsZS5sb29rYWhlYWQ9MDt2YXIgZj1lLmJsb2NrX3N0YXJ0K087aWYoKGUuc3Ryc3RhcnQ9PT0wfHxlLnN0cnN0YXJ0Pj1mKSYmKGUubG9va2FoZWFkPWUuc3Ryc3RhcnQtZixlLnN0cnN0YXJ0PWYscShlLCExKSxlLnN0cm0uYXZhaWxfb3V0PT09MCl8fGUuc3Ryc3RhcnQtZS5ibG9ja19zdGFydD49ZS53X3NpemUtWiYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApKXJldHVybiBzZX1yZXR1cm4gZS5pbnNlcnQ9MCxOPT09aT8ocShlLCEwKSxlLnN0cm0uYXZhaWxfb3V0PT09MD96ZTp4ZSk6KGUuc3Ryc3RhcnQ+ZS5ibG9ja19zdGFydCYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApLHNlKX1mdW5jdGlvbiBqZShlLE4pe2Zvcih2YXIgTyxmOzspe2lmKGUubG9va2FoZWFkPFope2lmKEFlKGUpLGUubG9va2FoZWFkPFomJk49PT1JKXJldHVybiBzZTtpZihlLmxvb2thaGVhZD09PTApYnJlYWt9aWYoTz0wLGUubG9va2FoZWFkPj1UJiYoZS5pbnNfaD0oZS5pbnNfaDw8ZS5oYXNoX3NoaWZ0XmUud2luZG93W2Uuc3Ryc3RhcnQrVC0xXSkmZS5oYXNoX21hc2ssTz1lLnByZXZbZS5zdHJzdGFydCZlLndfbWFza109ZS5oZWFkW2UuaW5zX2hdLGUuaGVhZFtlLmluc19oXT1lLnN0cnN0YXJ0KSxPIT09MCYmZS5zdHJzdGFydC1PPD1lLndfc2l6ZS1aJiYoZS5tYXRjaF9sZW5ndGg9YmUoZSxPKSksZS5tYXRjaF9sZW5ndGg+PVQpaWYoZj1HLl90cl90YWxseShlLGUuc3Ryc3RhcnQtZS5tYXRjaF9zdGFydCxlLm1hdGNoX2xlbmd0aC1UKSxlLmxvb2thaGVhZC09ZS5tYXRjaF9sZW5ndGgsZS5tYXRjaF9sZW5ndGg8PWUubWF4X2xhenlfbWF0Y2gmJmUubG9va2FoZWFkPj1UKXtlLm1hdGNoX2xlbmd0aC0tO2RvIGUuc3Ryc3RhcnQrKyxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCtULTFdKSZlLmhhc2hfbWFzayxPPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQ7d2hpbGUoLS1lLm1hdGNoX2xlbmd0aCE9PTApO2Uuc3Ryc3RhcnQrK31lbHNlIGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTAsZS5pbnNfaD1lLndpbmRvd1tlLnN0cnN0YXJ0XSxlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCsxXSkmZS5oYXNoX21hc2s7ZWxzZSBmPUcuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0Kys7aWYoZiYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApKXJldHVybiBzZX1yZXR1cm4gZS5pbnNlcnQ9ZS5zdHJzdGFydDxULTE/ZS5zdHJzdGFydDpULTEsTj09PWk/KHEoZSwhMCksZS5zdHJtLmF2YWlsX291dD09PTA/emU6eGUpOmUubGFzdF9saXQmJihxKGUsITEpLGUuc3RybS5hdmFpbF9vdXQ9PT0wKT9zZTpnZX1mdW5jdGlvbiBDZShlLE4pe2Zvcih2YXIgTyxmLHg7Oyl7aWYoZS5sb29rYWhlYWQ8Wil7aWYoQWUoZSksZS5sb29rYWhlYWQ8WiYmTj09PUkpcmV0dXJuIHNlO2lmKGUubG9va2FoZWFkPT09MClicmVha31pZihPPTAsZS5sb29rYWhlYWQ+PVQmJihlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCtULTFdKSZlLmhhc2hfbWFzayxPPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpLGUucHJldl9sZW5ndGg9ZS5tYXRjaF9sZW5ndGgsZS5wcmV2X21hdGNoPWUubWF0Y2hfc3RhcnQsZS5tYXRjaF9sZW5ndGg9VC0xLE8hPT0wJiZlLnByZXZfbGVuZ3RoPGUubWF4X2xhenlfbWF0Y2gmJmUuc3Ryc3RhcnQtTzw9ZS53X3NpemUtWiYmKGUubWF0Y2hfbGVuZ3RoPWJlKGUsTyksZS5tYXRjaF9sZW5ndGg8PTUmJihlLnN0cmF0ZWd5PT09dXx8ZS5tYXRjaF9sZW5ndGg9PT1UJiZlLnN0cnN0YXJ0LWUubWF0Y2hfc3RhcnQ+NDA5NikmJihlLm1hdGNoX2xlbmd0aD1ULTEpKSxlLnByZXZfbGVuZ3RoPj1UJiZlLm1hdGNoX2xlbmd0aDw9ZS5wcmV2X2xlbmd0aCl7eD1lLnN0cnN0YXJ0K2UubG9va2FoZWFkLVQsZj1HLl90cl90YWxseShlLGUuc3Ryc3RhcnQtMS1lLnByZXZfbWF0Y2gsZS5wcmV2X2xlbmd0aC1UKSxlLmxvb2thaGVhZC09ZS5wcmV2X2xlbmd0aC0xLGUucHJldl9sZW5ndGgtPTI7ZG8rK2Uuc3Ryc3RhcnQ8PXgmJihlLmluc19oPShlLmluc19oPDxlLmhhc2hfc2hpZnReZS53aW5kb3dbZS5zdHJzdGFydCtULTFdKSZlLmhhc2hfbWFzayxPPWUucHJldltlLnN0cnN0YXJ0JmUud19tYXNrXT1lLmhlYWRbZS5pbnNfaF0sZS5oZWFkW2UuaW5zX2hdPWUuc3Ryc3RhcnQpO3doaWxlKC0tZS5wcmV2X2xlbmd0aCE9PTApO2lmKGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5tYXRjaF9sZW5ndGg9VC0xLGUuc3Ryc3RhcnQrKyxmJiYocShlLCExKSxlLnN0cm0uYXZhaWxfb3V0PT09MCkpcmV0dXJuIHNlfWVsc2UgaWYoZS5tYXRjaF9hdmFpbGFibGUpe2lmKGY9Ry5fdHJfdGFsbHkoZSwwLGUud2luZG93W2Uuc3Ryc3RhcnQtMV0pLGYmJnEoZSwhMSksZS5zdHJzdGFydCsrLGUubG9va2FoZWFkLS0sZS5zdHJtLmF2YWlsX291dD09PTApcmV0dXJuIHNlfWVsc2UgZS5tYXRjaF9hdmFpbGFibGU9MSxlLnN0cnN0YXJ0KyssZS5sb29rYWhlYWQtLX1yZXR1cm4gZS5tYXRjaF9hdmFpbGFibGUmJihmPUcuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0LTFdKSxlLm1hdGNoX2F2YWlsYWJsZT0wKSxlLmluc2VydD1lLnN0cnN0YXJ0PFQtMT9lLnN0cnN0YXJ0OlQtMSxOPT09aT8ocShlLCEwKSxlLnN0cm0uYXZhaWxfb3V0PT09MD96ZTp4ZSk6ZS5sYXN0X2xpdCYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApP3NlOmdlfWZ1bmN0aW9uIFhlKGUsTil7Zm9yKHZhciBPLGYseCx6LGllPWUud2luZG93Ozspe2lmKGUubG9va2FoZWFkPD1QKXtpZihBZShlKSxlLmxvb2thaGVhZDw9UCYmTj09PUkpcmV0dXJuIHNlO2lmKGUubG9va2FoZWFkPT09MClicmVha31pZihlLm1hdGNoX2xlbmd0aD0wLGUubG9va2FoZWFkPj1UJiZlLnN0cnN0YXJ0PjAmJih4PWUuc3Ryc3RhcnQtMSxmPWllW3hdLGY9PT1pZVsrK3hdJiZmPT09aWVbKyt4XSYmZj09PWllWysreF0pKXt6PWUuc3Ryc3RhcnQrUDtkbzt3aGlsZShmPT09aWVbKyt4XSYmZj09PWllWysreF0mJmY9PT1pZVsrK3hdJiZmPT09aWVbKyt4XSYmZj09PWllWysreF0mJmY9PT1pZVsrK3hdJiZmPT09aWVbKyt4XSYmZj09PWllWysreF0mJng8eik7ZS5tYXRjaF9sZW5ndGg9UC0oei14KSxlLm1hdGNoX2xlbmd0aD5lLmxvb2thaGVhZCYmKGUubWF0Y2hfbGVuZ3RoPWUubG9va2FoZWFkKX1pZihlLm1hdGNoX2xlbmd0aD49VD8oTz1HLl90cl90YWxseShlLDEsZS5tYXRjaF9sZW5ndGgtVCksZS5sb29rYWhlYWQtPWUubWF0Y2hfbGVuZ3RoLGUuc3Ryc3RhcnQrPWUubWF0Y2hfbGVuZ3RoLGUubWF0Y2hfbGVuZ3RoPTApOihPPUcuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyspLE8mJihxKGUsITEpLGUuc3RybS5hdmFpbF9vdXQ9PT0wKSlyZXR1cm4gc2V9cmV0dXJuIGUuaW5zZXJ0PTAsTj09PWk/KHEoZSwhMCksZS5zdHJtLmF2YWlsX291dD09PTA/emU6eGUpOmUubGFzdF9saXQmJihxKGUsITEpLGUuc3RybS5hdmFpbF9vdXQ9PT0wKT9zZTpnZX1mdW5jdGlvbiBVZShlLE4pe2Zvcih2YXIgTzs7KXtpZihlLmxvb2thaGVhZD09PTAmJihBZShlKSxlLmxvb2thaGVhZD09PTApKXtpZihOPT09SSlyZXR1cm4gc2U7YnJlYWt9aWYoZS5tYXRjaF9sZW5ndGg9MCxPPUcuX3RyX3RhbGx5KGUsMCxlLndpbmRvd1tlLnN0cnN0YXJ0XSksZS5sb29rYWhlYWQtLSxlLnN0cnN0YXJ0KyssTyYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApKXJldHVybiBzZX1yZXR1cm4gZS5pbnNlcnQ9MCxOPT09aT8ocShlLCEwKSxlLnN0cm0uYXZhaWxfb3V0PT09MD96ZTp4ZSk6ZS5sYXN0X2xpdCYmKHEoZSwhMSksZS5zdHJtLmF2YWlsX291dD09PTApP3NlOmdlfWZ1bmN0aW9uIERlKGUsTixPLGYseCl7dGhpcy5nb29kX2xlbmd0aD1lLHRoaXMubWF4X2xhenk9Tix0aGlzLm5pY2VfbGVuZ3RoPU8sdGhpcy5tYXhfY2hhaW49Zix0aGlzLmZ1bmM9eH12YXIgSWU7SWU9W25ldyBEZSgwLDAsMCwwLCRlKSxuZXcgRGUoNCw0LDgsNCxqZSksbmV3IERlKDQsNSwxNiw4LGplKSxuZXcgRGUoNCw2LDMyLDMyLGplKSxuZXcgRGUoNCw0LDE2LDE2LENlKSxuZXcgRGUoOCwxNiwzMiwzMixDZSksbmV3IERlKDgsMTYsMTI4LDEyOCxDZSksbmV3IERlKDgsMzIsMTI4LDI1NixDZSksbmV3IERlKDMyLDEyOCwyNTgsMTAyNCxDZSksbmV3IERlKDMyLDI1OCwyNTgsNDA5NixDZSldO2Z1bmN0aW9uIFZlKGUpe2Uud2luZG93X3NpemU9MiplLndfc2l6ZSxSZShlLmhlYWQpLGUubWF4X2xhenlfbWF0Y2g9SWVbZS5sZXZlbF0ubWF4X2xhenksZS5nb29kX21hdGNoPUllW2UubGV2ZWxdLmdvb2RfbGVuZ3RoLGUubmljZV9tYXRjaD1JZVtlLmxldmVsXS5uaWNlX2xlbmd0aCxlLm1heF9jaGFpbl9sZW5ndGg9SWVbZS5sZXZlbF0ubWF4X2NoYWluLGUuc3Ryc3RhcnQ9MCxlLmJsb2NrX3N0YXJ0PTAsZS5sb29rYWhlYWQ9MCxlLmluc2VydD0wLGUubWF0Y2hfbGVuZ3RoPWUucHJldl9sZW5ndGg9VC0xLGUubWF0Y2hfYXZhaWxhYmxlPTAsZS5pbnNfaD0wfWZ1bmN0aW9uIGwoKXt0aGlzLnN0cm09bnVsbCx0aGlzLnN0YXR1cz0wLHRoaXMucGVuZGluZ19idWY9bnVsbCx0aGlzLnBlbmRpbmdfYnVmX3NpemU9MCx0aGlzLnBlbmRpbmdfb3V0PTAsdGhpcy5wZW5kaW5nPTAsdGhpcy53cmFwPTAsdGhpcy5nemhlYWQ9bnVsbCx0aGlzLmd6aW5kZXg9MCx0aGlzLm1ldGhvZD1wLHRoaXMubGFzdF9mbHVzaD0tMSx0aGlzLndfc2l6ZT0wLHRoaXMud19iaXRzPTAsdGhpcy53X21hc2s9MCx0aGlzLndpbmRvdz1udWxsLHRoaXMud2luZG93X3NpemU9MCx0aGlzLnByZXY9bnVsbCx0aGlzLmhlYWQ9bnVsbCx0aGlzLmluc19oPTAsdGhpcy5oYXNoX3NpemU9MCx0aGlzLmhhc2hfYml0cz0wLHRoaXMuaGFzaF9tYXNrPTAsdGhpcy5oYXNoX3NoaWZ0PTAsdGhpcy5ibG9ja19zdGFydD0wLHRoaXMubWF0Y2hfbGVuZ3RoPTAsdGhpcy5wcmV2X21hdGNoPTAsdGhpcy5tYXRjaF9hdmFpbGFibGU9MCx0aGlzLnN0cnN0YXJ0PTAsdGhpcy5tYXRjaF9zdGFydD0wLHRoaXMubG9va2FoZWFkPTAsdGhpcy5wcmV2X2xlbmd0aD0wLHRoaXMubWF4X2NoYWluX2xlbmd0aD0wLHRoaXMubWF4X2xhenlfbWF0Y2g9MCx0aGlzLmxldmVsPTAsdGhpcy5zdHJhdGVneT0wLHRoaXMuZ29vZF9tYXRjaD0wLHRoaXMubmljZV9tYXRjaD0wLHRoaXMuZHluX2x0cmVlPW5ldyBtLkJ1ZjE2KFUqMiksdGhpcy5keW5fZHRyZWU9bmV3IG0uQnVmMTYoKDIqQysxKSoyKSx0aGlzLmJsX3RyZWU9bmV3IG0uQnVmMTYoKDIqSCsxKSoyKSxSZSh0aGlzLmR5bl9sdHJlZSksUmUodGhpcy5keW5fZHRyZWUpLFJlKHRoaXMuYmxfdHJlZSksdGhpcy5sX2Rlc2M9bnVsbCx0aGlzLmRfZGVzYz1udWxsLHRoaXMuYmxfZGVzYz1udWxsLHRoaXMuYmxfY291bnQ9bmV3IG0uQnVmMTYoWCsxKSx0aGlzLmhlYXA9bmV3IG0uQnVmMTYoMipqKzEpLFJlKHRoaXMuaGVhcCksdGhpcy5oZWFwX2xlbj0wLHRoaXMuaGVhcF9tYXg9MCx0aGlzLmRlcHRoPW5ldyBtLkJ1ZjE2KDIqaisxKSxSZSh0aGlzLmRlcHRoKSx0aGlzLmxfYnVmPTAsdGhpcy5saXRfYnVmc2l6ZT0wLHRoaXMubGFzdF9saXQ9MCx0aGlzLmRfYnVmPTAsdGhpcy5vcHRfbGVuPTAsdGhpcy5zdGF0aWNfbGVuPTAsdGhpcy5tYXRjaGVzPTAsdGhpcy5pbnNlcnQ9MCx0aGlzLmJpX2J1Zj0wLHRoaXMuYmlfdmFsaWQ9MH1mdW5jdGlvbiBKKGUpe3ZhciBOO3JldHVybiFlfHwhZS5zdGF0ZT9TZShlLGgpOihlLnRvdGFsX2luPWUudG90YWxfb3V0PTAsZS5kYXRhX3R5cGU9ZyxOPWUuc3RhdGUsTi5wZW5kaW5nPTAsTi5wZW5kaW5nX291dD0wLE4ud3JhcDwwJiYoTi53cmFwPS1OLndyYXApLE4uc3RhdHVzPU4ud3JhcD8kOmhlLGUuYWRsZXI9Ti53cmFwPT09Mj8wOjEsTi5sYXN0X2ZsdXNoPUksRy5fdHJfaW5pdChOKSxfKX1mdW5jdGlvbiBXKGUpe3ZhciBOPUooZSk7cmV0dXJuIE49PT1fJiZWZShlLnN0YXRlKSxOfWZ1bmN0aW9uIGVlKGUsTil7cmV0dXJuIWV8fCFlLnN0YXRlfHxlLnN0YXRlLndyYXAhPT0yP2g6KGUuc3RhdGUuZ3poZWFkPU4sXyl9ZnVuY3Rpb24geShlLE4sTyxmLHgseil7aWYoIWUpcmV0dXJuIGg7dmFyIGllPTE7aWYoTj09PWQmJihOPTYpLGY8MD8oaWU9MCxmPS1mKTpmPjE1JiYoaWU9MixmLT0xNikseDwxfHx4PlN8fE8hPT1wfHxmPDh8fGY+MTV8fE48MHx8Tj45fHx6PDB8fHo+bilyZXR1cm4gU2UoZSxoKTtmPT09OCYmKGY9OSk7dmFyIFE9bmV3IGw7cmV0dXJuIGUuc3RhdGU9USxRLnN0cm09ZSxRLndyYXA9aWUsUS5nemhlYWQ9bnVsbCxRLndfYml0cz1mLFEud19zaXplPTE8PFEud19iaXRzLFEud19tYXNrPVEud19zaXplLTEsUS5oYXNoX2JpdHM9eCs3LFEuaGFzaF9zaXplPTE8PFEuaGFzaF9iaXRzLFEuaGFzaF9tYXNrPVEuaGFzaF9zaXplLTEsUS5oYXNoX3NoaWZ0PX5+KChRLmhhc2hfYml0cytULTEpL1QpLFEud2luZG93PW5ldyBtLkJ1ZjgoUS53X3NpemUqMiksUS5oZWFkPW5ldyBtLkJ1ZjE2KFEuaGFzaF9zaXplKSxRLnByZXY9bmV3IG0uQnVmMTYoUS53X3NpemUpLFEubGl0X2J1ZnNpemU9MTw8eCs2LFEucGVuZGluZ19idWZfc2l6ZT1RLmxpdF9idWZzaXplKjQsUS5wZW5kaW5nX2J1Zj1uZXcgbS5CdWY4KFEucGVuZGluZ19idWZfc2l6ZSksUS5kX2J1Zj0xKlEubGl0X2J1ZnNpemUsUS5sX2J1Zj0zKlEubGl0X2J1ZnNpemUsUS5sZXZlbD1OLFEuc3RyYXRlZ3k9eixRLm1ldGhvZD1PLFcoZSl9ZnVuY3Rpb24gTShlLE4pe3JldHVybiB5KGUsTixwLEEsTCx3KX1mdW5jdGlvbiBhKGUsTil7dmFyIE8sZix4LHo7aWYoIWV8fCFlLnN0YXRlfHxOPmJ8fE48MClyZXR1cm4gZT9TZShlLGgpOmg7aWYoZj1lLnN0YXRlLCFlLm91dHB1dHx8IWUuaW5wdXQmJmUuYXZhaWxfaW4hPT0wfHxmLnN0YXR1cz09PWxlJiZOIT09aSlyZXR1cm4gU2UoZSxlLmF2YWlsX291dD09PTA/RTpoKTtpZihmLnN0cm09ZSxPPWYubGFzdF9mbHVzaCxmLmxhc3RfZmx1c2g9TixmLnN0YXR1cz09PSQpaWYoZi53cmFwPT09MillLmFkbGVyPTAscmUoZiwzMSkscmUoZiwxMzkpLHJlKGYsOCksZi5nemhlYWQ/KHJlKGYsKGYuZ3poZWFkLnRleHQ/MTowKSsoZi5nemhlYWQuaGNyYz8yOjApKyhmLmd6aGVhZC5leHRyYT80OjApKyhmLmd6aGVhZC5uYW1lPzg6MCkrKGYuZ3poZWFkLmNvbW1lbnQ/MTY6MCkpLHJlKGYsZi5nemhlYWQudGltZSYyNTUpLHJlKGYsZi5nemhlYWQudGltZT4+OCYyNTUpLHJlKGYsZi5nemhlYWQudGltZT4+MTYmMjU1KSxyZShmLGYuZ3poZWFkLnRpbWU+PjI0JjI1NSkscmUoZixmLmxldmVsPT09OT8yOmYuc3RyYXRlZ3k+PWN8fGYubGV2ZWw8Mj80OjApLHJlKGYsZi5nemhlYWQub3MmMjU1KSxmLmd6aGVhZC5leHRyYSYmZi5nemhlYWQuZXh0cmEubGVuZ3RoJiYocmUoZixmLmd6aGVhZC5leHRyYS5sZW5ndGgmMjU1KSxyZShmLGYuZ3poZWFkLmV4dHJhLmxlbmd0aD4+OCYyNTUpKSxmLmd6aGVhZC5oY3JjJiYoZS5hZGxlcj1SKGUuYWRsZXIsZi5wZW5kaW5nX2J1ZixmLnBlbmRpbmcsMCkpLGYuZ3ppbmRleD0wLGYuc3RhdHVzPXRlKToocmUoZiwwKSxyZShmLDApLHJlKGYsMCkscmUoZiwwKSxyZShmLDApLHJlKGYsZi5sZXZlbD09PTk/MjpmLnN0cmF0ZWd5Pj1jfHxmLmxldmVsPDI/NDowKSxyZShmLGNlKSxmLnN0YXR1cz1oZSk7ZWxzZXt2YXIgaWU9cCsoZi53X2JpdHMtODw8NCk8PDgsUT0tMTtmLnN0cmF0ZWd5Pj1jfHxmLmxldmVsPDI/UT0wOmYubGV2ZWw8Nj9RPTE6Zi5sZXZlbD09PTY/UT0yOlE9MyxpZXw9UTw8NixmLnN0cnN0YXJ0IT09MCYmKGllfD1hZSksaWUrPTMxLWllJTMxLGYuc3RhdHVzPWhlLGRlKGYsaWUpLGYuc3Ryc3RhcnQhPT0wJiYoZGUoZixlLmFkbGVyPj4+MTYpLGRlKGYsZS5hZGxlciY2NTUzNSkpLGUuYWRsZXI9MX1pZihmLnN0YXR1cz09PXRlKWlmKGYuZ3poZWFkLmV4dHJhKXtmb3IoeD1mLnBlbmRpbmc7Zi5nemluZGV4PChmLmd6aGVhZC5leHRyYS5sZW5ndGgmNjU1MzUpJiYhKGYucGVuZGluZz09PWYucGVuZGluZ19idWZfc2l6ZSYmKGYuZ3poZWFkLmhjcmMmJmYucGVuZGluZz54JiYoZS5hZGxlcj1SKGUuYWRsZXIsZi5wZW5kaW5nX2J1ZixmLnBlbmRpbmcteCx4KSksb2UoZSkseD1mLnBlbmRpbmcsZi5wZW5kaW5nPT09Zi5wZW5kaW5nX2J1Zl9zaXplKSk7KXJlKGYsZi5nemhlYWQuZXh0cmFbZi5nemluZGV4XSYyNTUpLGYuZ3ppbmRleCsrO2YuZ3poZWFkLmhjcmMmJmYucGVuZGluZz54JiYoZS5hZGxlcj1SKGUuYWRsZXIsZi5wZW5kaW5nX2J1ZixmLnBlbmRpbmcteCx4KSksZi5nemluZGV4PT09Zi5nemhlYWQuZXh0cmEubGVuZ3RoJiYoZi5nemluZGV4PTAsZi5zdGF0dXM9Vil9ZWxzZSBmLnN0YXR1cz1WO2lmKGYuc3RhdHVzPT09VilpZihmLmd6aGVhZC5uYW1lKXt4PWYucGVuZGluZztkb3tpZihmLnBlbmRpbmc9PT1mLnBlbmRpbmdfYnVmX3NpemUmJihmLmd6aGVhZC5oY3JjJiZmLnBlbmRpbmc+eCYmKGUuYWRsZXI9UihlLmFkbGVyLGYucGVuZGluZ19idWYsZi5wZW5kaW5nLXgseCkpLG9lKGUpLHg9Zi5wZW5kaW5nLGYucGVuZGluZz09PWYucGVuZGluZ19idWZfc2l6ZSkpe3o9MTticmVha31mLmd6aW5kZXg8Zi5nemhlYWQubmFtZS5sZW5ndGg/ej1mLmd6aGVhZC5uYW1lLmNoYXJDb2RlQXQoZi5nemluZGV4KyspJjI1NTp6PTAscmUoZix6KX13aGlsZSh6IT09MCk7Zi5nemhlYWQuaGNyYyYmZi5wZW5kaW5nPngmJihlLmFkbGVyPVIoZS5hZGxlcixmLnBlbmRpbmdfYnVmLGYucGVuZGluZy14LHgpKSx6PT09MCYmKGYuZ3ppbmRleD0wLGYuc3RhdHVzPXVlKX1lbHNlIGYuc3RhdHVzPXVlO2lmKGYuc3RhdHVzPT09dWUpaWYoZi5nemhlYWQuY29tbWVudCl7eD1mLnBlbmRpbmc7ZG97aWYoZi5wZW5kaW5nPT09Zi5wZW5kaW5nX2J1Zl9zaXplJiYoZi5nemhlYWQuaGNyYyYmZi5wZW5kaW5nPngmJihlLmFkbGVyPVIoZS5hZGxlcixmLnBlbmRpbmdfYnVmLGYucGVuZGluZy14LHgpKSxvZShlKSx4PWYucGVuZGluZyxmLnBlbmRpbmc9PT1mLnBlbmRpbmdfYnVmX3NpemUpKXt6PTE7YnJlYWt9Zi5nemluZGV4PGYuZ3poZWFkLmNvbW1lbnQubGVuZ3RoP3o9Zi5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KGYuZ3ppbmRleCsrKSYyNTU6ej0wLHJlKGYseil9d2hpbGUoeiE9PTApO2YuZ3poZWFkLmhjcmMmJmYucGVuZGluZz54JiYoZS5hZGxlcj1SKGUuYWRsZXIsZi5wZW5kaW5nX2J1ZixmLnBlbmRpbmcteCx4KSksej09PTAmJihmLnN0YXR1cz1mZSl9ZWxzZSBmLnN0YXR1cz1mZTtpZihmLnN0YXR1cz09PWZlJiYoZi5nemhlYWQuaGNyYz8oZi5wZW5kaW5nKzI+Zi5wZW5kaW5nX2J1Zl9zaXplJiZvZShlKSxmLnBlbmRpbmcrMjw9Zi5wZW5kaW5nX2J1Zl9zaXplJiYocmUoZixlLmFkbGVyJjI1NSkscmUoZixlLmFkbGVyPj44JjI1NSksZS5hZGxlcj0wLGYuc3RhdHVzPWhlKSk6Zi5zdGF0dXM9aGUpLGYucGVuZGluZyE9PTApe2lmKG9lKGUpLGUuYXZhaWxfb3V0PT09MClyZXR1cm4gZi5sYXN0X2ZsdXNoPS0xLF99ZWxzZSBpZihlLmF2YWlsX2luPT09MCYmbWUoTik8PW1lKE8pJiZOIT09aSlyZXR1cm4gU2UoZSxFKTtpZihmLnN0YXR1cz09PWxlJiZlLmF2YWlsX2luIT09MClyZXR1cm4gU2UoZSxFKTtpZihlLmF2YWlsX2luIT09MHx8Zi5sb29rYWhlYWQhPT0wfHxOIT09SSYmZi5zdGF0dXMhPT1sZSl7dmFyIEY9Zi5zdHJhdGVneT09PWM/VWUoZixOKTpmLnN0cmF0ZWd5PT09bz9YZShmLE4pOkllW2YubGV2ZWxdLmZ1bmMoZixOKTtpZigoRj09PXplfHxGPT09eGUpJiYoZi5zdGF0dXM9bGUpLEY9PT1zZXx8Rj09PXplKXJldHVybiBlLmF2YWlsX291dD09PTAmJihmLmxhc3RfZmx1c2g9LTEpLF87aWYoRj09PWdlJiYoTj09PXI/Ry5fdHJfYWxpZ24oZik6TiE9PWImJihHLl90cl9zdG9yZWRfYmxvY2soZiwwLDAsITEpLE49PT10JiYoUmUoZi5oZWFkKSxmLmxvb2thaGVhZD09PTAmJihmLnN0cnN0YXJ0PTAsZi5ibG9ja19zdGFydD0wLGYuaW5zZXJ0PTApKSksb2UoZSksZS5hdmFpbF9vdXQ9PT0wKSlyZXR1cm4gZi5sYXN0X2ZsdXNoPS0xLF99cmV0dXJuIE4hPT1pP186Zi53cmFwPD0wP3M6KGYud3JhcD09PTI/KHJlKGYsZS5hZGxlciYyNTUpLHJlKGYsZS5hZGxlcj4+OCYyNTUpLHJlKGYsZS5hZGxlcj4+MTYmMjU1KSxyZShmLGUuYWRsZXI+PjI0JjI1NSkscmUoZixlLnRvdGFsX2luJjI1NSkscmUoZixlLnRvdGFsX2luPj44JjI1NSkscmUoZixlLnRvdGFsX2luPj4xNiYyNTUpLHJlKGYsZS50b3RhbF9pbj4+MjQmMjU1KSk6KGRlKGYsZS5hZGxlcj4+PjE2KSxkZShmLGUuYWRsZXImNjU1MzUpKSxvZShlKSxmLndyYXA+MCYmKGYud3JhcD0tZi53cmFwKSxmLnBlbmRpbmchPT0wP186cyl9ZnVuY3Rpb24gSyhlKXt2YXIgTjtyZXR1cm4hZXx8IWUuc3RhdGU/aDooTj1lLnN0YXRlLnN0YXR1cyxOIT09JCYmTiE9PXRlJiZOIT09ViYmTiE9PXVlJiZOIT09ZmUmJk4hPT1oZSYmTiE9PWxlP1NlKGUsaCk6KGUuc3RhdGU9bnVsbCxOPT09aGU/U2UoZSx2KTpfKSl9ZnVuY3Rpb24gbmUoZSxOKXt2YXIgTz1OLmxlbmd0aCxmLHgseixpZSxRLEYsX2UsR2U7aWYoIWV8fCFlLnN0YXRlfHwoZj1lLnN0YXRlLGllPWYud3JhcCxpZT09PTJ8fGllPT09MSYmZi5zdGF0dXMhPT0kfHxmLmxvb2thaGVhZCkpcmV0dXJuIGg7Zm9yKGllPT09MSYmKGUuYWRsZXI9WShlLmFkbGVyLE4sTywwKSksZi53cmFwPTAsTz49Zi53X3NpemUmJihpZT09PTAmJihSZShmLmhlYWQpLGYuc3Ryc3RhcnQ9MCxmLmJsb2NrX3N0YXJ0PTAsZi5pbnNlcnQ9MCksR2U9bmV3IG0uQnVmOChmLndfc2l6ZSksbS5hcnJheVNldChHZSxOLE8tZi53X3NpemUsZi53X3NpemUsMCksTj1HZSxPPWYud19zaXplKSxRPWUuYXZhaWxfaW4sRj1lLm5leHRfaW4sX2U9ZS5pbnB1dCxlLmF2YWlsX2luPU8sZS5uZXh0X2luPTAsZS5pbnB1dD1OLEFlKGYpO2YubG9va2FoZWFkPj1UOyl7eD1mLnN0cnN0YXJ0LHo9Zi5sb29rYWhlYWQtKFQtMSk7ZG8gZi5pbnNfaD0oZi5pbnNfaDw8Zi5oYXNoX3NoaWZ0XmYud2luZG93W3grVC0xXSkmZi5oYXNoX21hc2ssZi5wcmV2W3gmZi53X21hc2tdPWYuaGVhZFtmLmluc19oXSxmLmhlYWRbZi5pbnNfaF09eCx4Kys7d2hpbGUoLS16KTtmLnN0cnN0YXJ0PXgsZi5sb29rYWhlYWQ9VC0xLEFlKGYpfXJldHVybiBmLnN0cnN0YXJ0Kz1mLmxvb2thaGVhZCxmLmJsb2NrX3N0YXJ0PWYuc3Ryc3RhcnQsZi5pbnNlcnQ9Zi5sb29rYWhlYWQsZi5sb29rYWhlYWQ9MCxmLm1hdGNoX2xlbmd0aD1mLnByZXZfbGVuZ3RoPVQtMSxmLm1hdGNoX2F2YWlsYWJsZT0wLGUubmV4dF9pbj1GLGUuaW5wdXQ9X2UsZS5hdmFpbF9pbj1RLGYud3JhcD1pZSxffXJldHVybiBNZS5kZWZsYXRlSW5pdD1NLE1lLmRlZmxhdGVJbml0Mj15LE1lLmRlZmxhdGVSZXNldD1XLE1lLmRlZmxhdGVSZXNldEtlZXA9SixNZS5kZWZsYXRlU2V0SGVhZGVyPWVlLE1lLmRlZmxhdGU9YSxNZS5kZWZsYXRlRW5kPUssTWUuZGVmbGF0ZVNldERpY3Rpb25hcnk9bmUsTWUuZGVmbGF0ZUluZm89InBha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCkiLE1lfXZhciBLZT17fSxwMDtmdW5jdGlvbiB4MCgpe2lmKHAwKXJldHVybiBLZTtwMD0xO3ZhciBtPUhlKCksRz0hMCxZPSEwO3RyeXtTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsWzBdKX1jYXRjaHtHPSExfXRyeXtTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkoMSkpfWNhdGNoe1k9ITF9Zm9yKHZhciBSPW5ldyBtLkJ1ZjgoMjU2KSxrPTA7azwyNTY7aysrKVJba109az49MjUyPzY6az49MjQ4PzU6az49MjQwPzQ6az49MjI0PzM6az49MTkyPzI6MTtSWzI1NF09UlsyNTRdPTEsS2Uuc3RyaW5nMmJ1Zj1mdW5jdGlvbihyKXt2YXIgdCxpLGIsXyxzLGg9ci5sZW5ndGgsdj0wO2ZvcihfPTA7XzxoO18rKylpPXIuY2hhckNvZGVBdChfKSwoaSY2NDUxMik9PT01NTI5NiYmXysxPGgmJihiPXIuY2hhckNvZGVBdChfKzEpLChiJjY0NTEyKT09PTU2MzIwJiYoaT02NTUzNisoaS01NTI5Njw8MTApKyhiLTU2MzIwKSxfKyspKSx2Kz1pPDEyOD8xOmk8MjA0OD8yOmk8NjU1MzY/Mzo0O2Zvcih0PW5ldyBtLkJ1Zjgodikscz0wLF89MDtzPHY7XysrKWk9ci5jaGFyQ29kZUF0KF8pLChpJjY0NTEyKT09PTU1Mjk2JiZfKzE8aCYmKGI9ci5jaGFyQ29kZUF0KF8rMSksKGImNjQ1MTIpPT09NTYzMjAmJihpPTY1NTM2KyhpLTU1Mjk2PDwxMCkrKGItNTYzMjApLF8rKykpLGk8MTI4P3RbcysrXT1pOmk8MjA0OD8odFtzKytdPTE5MnxpPj4+Nix0W3MrK109MTI4fGkmNjMpOmk8NjU1MzY/KHRbcysrXT0yMjR8aT4+PjEyLHRbcysrXT0xMjh8aT4+PjYmNjMsdFtzKytdPTEyOHxpJjYzKToodFtzKytdPTI0MHxpPj4+MTgsdFtzKytdPTEyOHxpPj4+MTImNjMsdFtzKytdPTEyOHxpPj4+NiY2Myx0W3MrK109MTI4fGkmNjMpO3JldHVybiB0fTtmdW5jdGlvbiBJKHIsdCl7aWYodDw2NTUzNCYmKHIuc3ViYXJyYXkmJll8fCFyLnN1YmFycmF5JiZHKSlyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG0uc2hyaW5rQnVmKHIsdCkpO2Zvcih2YXIgaT0iIixiPTA7Yjx0O2IrKylpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHJbYl0pO3JldHVybiBpfXJldHVybiBLZS5idWYyYmluc3RyaW5nPWZ1bmN0aW9uKHIpe3JldHVybiBJKHIsci5sZW5ndGgpfSxLZS5iaW5zdHJpbmcyYnVmPWZ1bmN0aW9uKHIpe2Zvcih2YXIgdD1uZXcgbS5CdWY4KHIubGVuZ3RoKSxpPTAsYj10Lmxlbmd0aDtpPGI7aSsrKXRbaV09ci5jaGFyQ29kZUF0KGkpO3JldHVybiB0fSxLZS5idWYyc3RyaW5nPWZ1bmN0aW9uKHIsdCl7dmFyIGksYixfLHMsaD10fHxyLmxlbmd0aCx2PW5ldyBBcnJheShoKjIpO2ZvcihiPTAsaT0wO2k8aDspe2lmKF89cltpKytdLF88MTI4KXt2W2IrK109Xztjb250aW51ZX1pZihzPVJbX10scz40KXt2W2IrK109NjU1MzMsaSs9cy0xO2NvbnRpbnVlfWZvcihfJj1zPT09Mj8zMTpzPT09Mz8xNTo3O3M+MSYmaTxoOylfPV88PDZ8cltpKytdJjYzLHMtLTtpZihzPjEpe3ZbYisrXT02NTUzMztjb250aW51ZX1fPDY1NTM2P3ZbYisrXT1fOihfLT02NTUzNix2W2IrK109NTUyOTZ8Xz4+MTAmMTAyMyx2W2IrK109NTYzMjB8XyYxMDIzKX1yZXR1cm4gSSh2LGIpfSxLZS51dGY4Ym9yZGVyPWZ1bmN0aW9uKHIsdCl7dmFyIGk7Zm9yKHQ9dHx8ci5sZW5ndGgsdD5yLmxlbmd0aCYmKHQ9ci5sZW5ndGgpLGk9dC0xO2k+PTAmJihyW2ldJjE5Mik9PT0xMjg7KWktLTtyZXR1cm4gaTwwfHxpPT09MD90OmkrUltyW2ldXT50P2k6dH0sS2V9dmFyIGEwLGswO2Z1bmN0aW9uIEUwKCl7aWYoazApcmV0dXJuIGEwO2swPTE7ZnVuY3Rpb24gbSgpe3RoaXMuaW5wdXQ9bnVsbCx0aGlzLm5leHRfaW49MCx0aGlzLmF2YWlsX2luPTAsdGhpcy50b3RhbF9pbj0wLHRoaXMub3V0cHV0PW51bGwsdGhpcy5uZXh0X291dD0wLHRoaXMuYXZhaWxfb3V0PTAsdGhpcy50b3RhbF9vdXQ9MCx0aGlzLm1zZz0iIix0aGlzLnN0YXRlPW51bGwsdGhpcy5kYXRhX3R5cGU9Mix0aGlzLmFkbGVyPTB9cmV0dXJuIGEwPW0sYTB9dmFyIFMwO2Z1bmN0aW9uIFAwKCl7aWYoUzApcmV0dXJuIFllO1MwPTE7dmFyIG09STAoKSxHPUhlKCksWT14MCgpLFI9aTAoKSxrPUUwKCksST1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLHI9MCx0PTQsaT0wLGI9MSxfPTIscz0tMSxoPTAsdj04O2Z1bmN0aW9uIEUobyl7aWYoISh0aGlzIGluc3RhbmNlb2YgRSkpcmV0dXJuIG5ldyBFKG8pO3RoaXMub3B0aW9ucz1HLmFzc2lnbih7bGV2ZWw6cyxtZXRob2Q6dixjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5OmgsdG86IiJ9LG98fHt9KTt2YXIgbj10aGlzLm9wdGlvbnM7bi5yYXcmJm4ud2luZG93Qml0cz4wP24ud2luZG93Qml0cz0tbi53aW5kb3dCaXRzOm4uZ3ppcCYmbi53aW5kb3dCaXRzPjAmJm4ud2luZG93Qml0czwxNiYmKG4ud2luZG93Qml0cys9MTYpLHRoaXMuZXJyPTAsdGhpcy5tc2c9IiIsdGhpcy5lbmRlZD0hMSx0aGlzLmNodW5rcz1bXSx0aGlzLnN0cm09bmV3IGssdGhpcy5zdHJtLmF2YWlsX291dD0wO3ZhciB3PW0uZGVmbGF0ZUluaXQyKHRoaXMuc3RybSxuLmxldmVsLG4ubWV0aG9kLG4ud2luZG93Qml0cyxuLm1lbUxldmVsLG4uc3RyYXRlZ3kpO2lmKHchPT1pKXRocm93IG5ldyBFcnJvcihSW3ddKTtpZihuLmhlYWRlciYmbS5kZWZsYXRlU2V0SGVhZGVyKHRoaXMuc3RybSxuLmhlYWRlciksbi5kaWN0aW9uYXJ5KXt2YXIgZztpZih0eXBlb2Ygbi5kaWN0aW9uYXJ5PT0ic3RyaW5nIj9nPVkuc3RyaW5nMmJ1ZihuLmRpY3Rpb25hcnkpOkkuY2FsbChuLmRpY3Rpb25hcnkpPT09IltvYmplY3QgQXJyYXlCdWZmZXJdIj9nPW5ldyBVaW50OEFycmF5KG4uZGljdGlvbmFyeSk6Zz1uLmRpY3Rpb25hcnksdz1tLmRlZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxnKSx3IT09aSl0aHJvdyBuZXcgRXJyb3IoUlt3XSk7dGhpcy5fZGljdF9zZXQ9ITB9fUUucHJvdG90eXBlLnB1c2g9ZnVuY3Rpb24obyxuKXt2YXIgdz10aGlzLnN0cm0sZz10aGlzLm9wdGlvbnMuY2h1bmtTaXplLHAsUztpZih0aGlzLmVuZGVkKXJldHVybiExO1M9bj09PX5+bj9uOm49PT0hMD90OnIsdHlwZW9mIG89PSJzdHJpbmciP3cuaW5wdXQ9WS5zdHJpbmcyYnVmKG8pOkkuY2FsbChvKT09PSJbb2JqZWN0IEFycmF5QnVmZmVyXSI/dy5pbnB1dD1uZXcgVWludDhBcnJheShvKTp3LmlucHV0PW8sdy5uZXh0X2luPTAsdy5hdmFpbF9pbj13LmlucHV0Lmxlbmd0aDtkb3tpZih3LmF2YWlsX291dD09PTAmJih3Lm91dHB1dD1uZXcgRy5CdWY4KGcpLHcubmV4dF9vdXQ9MCx3LmF2YWlsX291dD1nKSxwPW0uZGVmbGF0ZSh3LFMpLHAhPT1iJiZwIT09aSlyZXR1cm4gdGhpcy5vbkVuZChwKSx0aGlzLmVuZGVkPSEwLCExOyh3LmF2YWlsX291dD09PTB8fHcuYXZhaWxfaW49PT0wJiYoUz09PXR8fFM9PT1fKSkmJih0aGlzLm9wdGlvbnMudG89PT0ic3RyaW5nIj90aGlzLm9uRGF0YShZLmJ1ZjJiaW5zdHJpbmcoRy5zaHJpbmtCdWYody5vdXRwdXQsdy5uZXh0X291dCkpKTp0aGlzLm9uRGF0YShHLnNocmlua0J1Zih3Lm91dHB1dCx3Lm5leHRfb3V0KSkpfXdoaWxlKCh3LmF2YWlsX2luPjB8fHcuYXZhaWxfb3V0PT09MCkmJnAhPT1iKTtyZXR1cm4gUz09PXQ/KHA9bS5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChwKSx0aGlzLmVuZGVkPSEwLHA9PT1pKTooUz09PV8mJih0aGlzLm9uRW5kKGkpLHcuYXZhaWxfb3V0PTApLCEwKX0sRS5wcm90b3R5cGUub25EYXRhPWZ1bmN0aW9uKG8pe3RoaXMuY2h1bmtzLnB1c2gobyl9LEUucHJvdG90eXBlLm9uRW5kPWZ1bmN0aW9uKG8pe289PT1pJiYodGhpcy5vcHRpb25zLnRvPT09InN0cmluZyI/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbigiIik6dGhpcy5yZXN1bHQ9Ry5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9byx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfTtmdW5jdGlvbiBkKG8sbil7dmFyIHc9bmV3IEUobik7aWYody5wdXNoKG8sITApLHcuZXJyKXRocm93IHcubXNnfHxSW3cuZXJyXTtyZXR1cm4gdy5yZXN1bHR9ZnVuY3Rpb24gdShvLG4pe3JldHVybiBuPW58fHt9LG4ucmF3PSEwLGQobyxuKX1mdW5jdGlvbiBjKG8sbil7cmV0dXJuIG49bnx8e30sbi5nemlwPSEwLGQobyxuKX1yZXR1cm4gWWUuRGVmbGF0ZT1FLFllLmRlZmxhdGU9ZCxZZS5kZWZsYXRlUmF3PXUsWWUuZ3ppcD1jLFllfXZhciBXZT17fSxMZT17fSxuMCx5MDtmdW5jdGlvbiBHMCgpe2lmKHkwKXJldHVybiBuMDt5MD0xO3ZhciBtPTMwLEc9MTI7cmV0dXJuIG4wPWZ1bmN0aW9uKFIsayl7dmFyIEkscix0LGksYixfLHMsaCx2LEUsZCx1LGMsbyxuLHcsZyxwLFMsQSxMLEQsQixqLEM7ST1SLnN0YXRlLHI9Ui5uZXh0X2luLGo9Ui5pbnB1dCx0PXIrKFIuYXZhaWxfaW4tNSksaT1SLm5leHRfb3V0LEM9Ui5vdXRwdXQsYj1pLShrLVIuYXZhaWxfb3V0KSxfPWkrKFIuYXZhaWxfb3V0LTI1Nykscz1JLmRtYXgsaD1JLndzaXplLHY9SS53aGF2ZSxFPUkud25leHQsZD1JLndpbmRvdyx1PUkuaG9sZCxjPUkuYml0cyxvPUkubGVuY29kZSxuPUkuZGlzdGNvZGUsdz0oMTw8SS5sZW5iaXRzKS0xLGc9KDE8PEkuZGlzdGJpdHMpLTE7ZTpkb3tjPDE1JiYodSs9altyKytdPDxjLGMrPTgsdSs9altyKytdPDxjLGMrPTgpLHA9b1t1JnddO3Q6Zm9yKDs7KXtpZihTPXA+Pj4yNCx1Pj4+PVMsYy09UyxTPXA+Pj4xNiYyNTUsUz09PTApQ1tpKytdPXAmNjU1MzU7ZWxzZSBpZihTJjE2KXtBPXAmNjU1MzUsUyY9MTUsUyYmKGM8UyYmKHUrPWpbcisrXTw8YyxjKz04KSxBKz11JigxPDxTKS0xLHU+Pj49UyxjLT1TKSxjPDE1JiYodSs9altyKytdPDxjLGMrPTgsdSs9altyKytdPDxjLGMrPTgpLHA9blt1JmddO3I6Zm9yKDs7KXtpZihTPXA+Pj4yNCx1Pj4+PVMsYy09UyxTPXA+Pj4xNiYyNTUsUyYxNil7aWYoTD1wJjY1NTM1LFMmPTE1LGM8UyYmKHUrPWpbcisrXTw8YyxjKz04LGM8UyYmKHUrPWpbcisrXTw8YyxjKz04KSksTCs9dSYoMTw8UyktMSxMPnMpe1IubXNnPSJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFjayIsSS5tb2RlPW07YnJlYWsgZX1pZih1Pj4+PVMsYy09UyxTPWktYixMPlMpe2lmKFM9TC1TLFM+diYmSS5zYW5lKXtSLm1zZz0iaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siLEkubW9kZT1tO2JyZWFrIGV9aWYoRD0wLEI9ZCxFPT09MCl7aWYoRCs9aC1TLFM8QSl7QS09UztkbyBDW2krK109ZFtEKytdO3doaWxlKC0tUyk7RD1pLUwsQj1DfX1lbHNlIGlmKEU8Uyl7aWYoRCs9aCtFLVMsUy09RSxTPEEpe0EtPVM7ZG8gQ1tpKytdPWRbRCsrXTt3aGlsZSgtLVMpO2lmKEQ9MCxFPEEpe1M9RSxBLT1TO2RvIENbaSsrXT1kW0QrK107d2hpbGUoLS1TKTtEPWktTCxCPUN9fX1lbHNlIGlmKEQrPUUtUyxTPEEpe0EtPVM7ZG8gQ1tpKytdPWRbRCsrXTt3aGlsZSgtLVMpO0Q9aS1MLEI9Q31mb3IoO0E+MjspQ1tpKytdPUJbRCsrXSxDW2krK109QltEKytdLENbaSsrXT1CW0QrK10sQS09MztBJiYoQ1tpKytdPUJbRCsrXSxBPjEmJihDW2krK109QltEKytdKSl9ZWxzZXtEPWktTDtkbyBDW2krK109Q1tEKytdLENbaSsrXT1DW0QrK10sQ1tpKytdPUNbRCsrXSxBLT0zO3doaWxlKEE+Mik7QSYmKENbaSsrXT1DW0QrK10sQT4xJiYoQ1tpKytdPUNbRCsrXSkpfX1lbHNlIGlmKFMmNjQpe1IubXNnPSJpbnZhbGlkIGRpc3RhbmNlIGNvZGUiLEkubW9kZT1tO2JyZWFrIGV9ZWxzZXtwPW5bKHAmNjU1MzUpKyh1JigxPDxTKS0xKV07Y29udGludWUgcn1icmVha319ZWxzZSBpZihTJjY0KWlmKFMmMzIpe0kubW9kZT1HO2JyZWFrIGV9ZWxzZXtSLm1zZz0iaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlIixJLm1vZGU9bTticmVhayBlfWVsc2V7cD1vWyhwJjY1NTM1KSsodSYoMTw8UyktMSldO2NvbnRpbnVlIHR9YnJlYWt9fXdoaWxlKHI8dCYmaTxfKTtBPWM+PjMsci09QSxjLT1BPDwzLHUmPSgxPDxjKS0xLFIubmV4dF9pbj1yLFIubmV4dF9vdXQ9aSxSLmF2YWlsX2luPXI8dD81Kyh0LXIpOjUtKHItdCksUi5hdmFpbF9vdXQ9aTxfPzI1NysoXy1pKToyNTctKGktXyksSS5ob2xkPXUsSS5iaXRzPWN9LG4wfXZhciBmMCxBMDtmdW5jdGlvbiBaMCgpe2lmKEEwKXJldHVybiBmMDtBMD0xO3ZhciBtPUhlKCksRz0xNSxZPTg1MixSPTU5MixrPTAsST0xLHI9Mix0PVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0saT1bMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTcsMTcsMTcsMTcsMTgsMTgsMTgsMTgsMTksMTksMTksMTksMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMTYsNzIsNzhdLGI9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3NywwLDBdLF89WzE2LDE2LDE2LDE2LDE3LDE3LDE4LDE4LDE5LDE5LDIwLDIwLDIxLDIxLDIyLDIyLDIzLDIzLDI0LDI0LDI1LDI1LDI2LDI2LDI3LDI3LDI4LDI4LDI5LDI5LDY0LDY0XTtyZXR1cm4gZjA9ZnVuY3Rpb24oaCx2LEUsZCx1LGMsbyxuKXt2YXIgdz1uLmJpdHMsZz0wLHA9MCxTPTAsQT0wLEw9MCxEPTAsQj0wLGo9MCxDPTAsSD0wLFUsWCxULFAsWixhZT1udWxsLCQ9MCx0ZSxWPW5ldyBtLkJ1ZjE2KEcrMSksdWU9bmV3IG0uQnVmMTYoRysxKSxmZT1udWxsLGhlPTAsbGUsc2UsZ2U7Zm9yKGc9MDtnPD1HO2crKylWW2ddPTA7Zm9yKHA9MDtwPGQ7cCsrKVZbdltFK3BdXSsrO2ZvcihMPXcsQT1HO0E+PTEmJlZbQV09PT0wO0EtLSk7aWYoTD5BJiYoTD1BKSxBPT09MClyZXR1cm4gdVtjKytdPTE8PDI0fDY0PDwxNnwwLHVbYysrXT0xPDwyNHw2NDw8MTZ8MCxuLmJpdHM9MSwwO2ZvcihTPTE7UzxBJiZWW1NdPT09MDtTKyspO2ZvcihMPFMmJihMPVMpLGo9MSxnPTE7Zzw9RztnKyspaWYoajw8PTEsai09VltnXSxqPDApcmV0dXJuLTE7aWYoaj4wJiYoaD09PWt8fEEhPT0xKSlyZXR1cm4tMTtmb3IodWVbMV09MCxnPTE7ZzxHO2crKyl1ZVtnKzFdPXVlW2ddK1ZbZ107Zm9yKHA9MDtwPGQ7cCsrKXZbRStwXSE9PTAmJihvW3VlW3ZbRStwXV0rK109cCk7aWYoaD09PWs/KGFlPWZlPW8sdGU9MTkpOmg9PT1JPyhhZT10LCQtPTI1NyxmZT1pLGhlLT0yNTcsdGU9MjU2KTooYWU9YixmZT1fLHRlPS0xKSxIPTAscD0wLGc9UyxaPWMsRD1MLEI9MCxUPS0xLEM9MTw8TCxQPUMtMSxoPT09SSYmQz5ZfHxoPT09ciYmQz5SKXJldHVybiAxO2Zvcig7Oyl7bGU9Zy1CLG9bcF08dGU/KHNlPTAsZ2U9b1twXSk6b1twXT50ZT8oc2U9ZmVbaGUrb1twXV0sZ2U9YWVbJCtvW3BdXSk6KHNlPTk2LGdlPTApLFU9MTw8Zy1CLFg9MTw8RCxTPVg7ZG8gWC09VSx1W1orKEg+PkIpK1hdPWxlPDwyNHxzZTw8MTZ8Z2V8MDt3aGlsZShYIT09MCk7Zm9yKFU9MTw8Zy0xO0gmVTspVT4+PTE7aWYoVSE9PTA/KEgmPVUtMSxIKz1VKTpIPTAscCsrLC0tVltnXT09PTApe2lmKGc9PT1BKWJyZWFrO2c9dltFK29bcF1dfWlmKGc+TCYmKEgmUCkhPT1UKXtmb3IoQj09PTAmJihCPUwpLForPVMsRD1nLUIsaj0xPDxEO0QrQjxBJiYoai09VltEK0JdLCEoajw9MCkpOylEKyssajw8PTE7aWYoQys9MTw8RCxoPT09SSYmQz5ZfHxoPT09ciYmQz5SKXJldHVybiAxO1Q9SCZQLHVbVF09TDw8MjR8RDw8MTZ8Wi1jfDB9fXJldHVybiBIIT09MCYmKHVbWitIXT1nLUI8PDI0fDY0PDwxNnwwKSxuLmJpdHM9TCwwfSxmMH12YXIgRDA7ZnVuY3Rpb24gSDAoKXtpZihEMClyZXR1cm4gTGU7RDA9MTt2YXIgbT1IZSgpLEc9djAoKSxZPXcwKCksUj1HMCgpLGs9WjAoKSxJPTAscj0xLHQ9MixpPTQsYj01LF89NixzPTAsaD0xLHY9MixFPS0yLGQ9LTMsdT0tNCxjPS01LG89OCxuPTEsdz0yLGc9MyxwPTQsUz01LEE9NixMPTcsRD04LEI9OSxqPTEwLEM9MTEsSD0xMixVPTEzLFg9MTQsVD0xNSxQPTE2LFo9MTcsYWU9MTgsJD0xOSx0ZT0yMCxWPTIxLHVlPTIyLGZlPTIzLGhlPTI0LGxlPTI1LHNlPTI2LGdlPTI3LHplPTI4LHhlPTI5LGNlPTMwLFNlPTMxLG1lPTMyLFJlPTg1MixvZT01OTIscT0xNSxyZT1xO2Z1bmN0aW9uIGRlKHkpe3JldHVybih5Pj4+MjQmMjU1KSsoeT4+PjgmNjUyODApKygoeSY2NTI4MCk8PDgpKygoeSYyNTUpPDwyNCl9ZnVuY3Rpb24gd2UoKXt0aGlzLm1vZGU9MCx0aGlzLmxhc3Q9ITEsdGhpcy53cmFwPTAsdGhpcy5oYXZlZGljdD0hMSx0aGlzLmZsYWdzPTAsdGhpcy5kbWF4PTAsdGhpcy5jaGVjaz0wLHRoaXMudG90YWw9MCx0aGlzLmhlYWQ9bnVsbCx0aGlzLndiaXRzPTAsdGhpcy53c2l6ZT0wLHRoaXMud2hhdmU9MCx0aGlzLnduZXh0PTAsdGhpcy53aW5kb3c9bnVsbCx0aGlzLmhvbGQ9MCx0aGlzLmJpdHM9MCx0aGlzLmxlbmd0aD0wLHRoaXMub2Zmc2V0PTAsdGhpcy5leHRyYT0wLHRoaXMubGVuY29kZT1udWxsLHRoaXMuZGlzdGNvZGU9bnVsbCx0aGlzLmxlbmJpdHM9MCx0aGlzLmRpc3RiaXRzPTAsdGhpcy5uY29kZT0wLHRoaXMubmxlbj0wLHRoaXMubmRpc3Q9MCx0aGlzLmhhdmU9MCx0aGlzLm5leHQ9bnVsbCx0aGlzLmxlbnM9bmV3IG0uQnVmMTYoMzIwKSx0aGlzLndvcms9bmV3IG0uQnVmMTYoMjg4KSx0aGlzLmxlbmR5bj1udWxsLHRoaXMuZGlzdGR5bj1udWxsLHRoaXMuc2FuZT0wLHRoaXMuYmFjaz0wLHRoaXMud2FzPTB9ZnVuY3Rpb24gYmUoeSl7dmFyIE07cmV0dXJuIXl8fCF5LnN0YXRlP0U6KE09eS5zdGF0ZSx5LnRvdGFsX2luPXkudG90YWxfb3V0PU0udG90YWw9MCx5Lm1zZz0iIixNLndyYXAmJih5LmFkbGVyPU0ud3JhcCYxKSxNLm1vZGU9bixNLmxhc3Q9MCxNLmhhdmVkaWN0PTAsTS5kbWF4PTMyNzY4LE0uaGVhZD1udWxsLE0uaG9sZD0wLE0uYml0cz0wLE0ubGVuY29kZT1NLmxlbmR5bj1uZXcgbS5CdWYzMihSZSksTS5kaXN0Y29kZT1NLmRpc3RkeW49bmV3IG0uQnVmMzIob2UpLE0uc2FuZT0xLE0uYmFjaz0tMSxzKX1mdW5jdGlvbiBBZSh5KXt2YXIgTTtyZXR1cm4heXx8IXkuc3RhdGU/RTooTT15LnN0YXRlLE0ud3NpemU9MCxNLndoYXZlPTAsTS53bmV4dD0wLGJlKHkpKX1mdW5jdGlvbiAkZSh5LE0pe3ZhciBhLEs7cmV0dXJuIXl8fCF5LnN0YXRlfHwoSz15LnN0YXRlLE08MD8oYT0wLE09LU0pOihhPShNPj40KSsxLE08NDgmJihNJj0xNSkpLE0mJihNPDh8fE0+MTUpKT9FOihLLndpbmRvdyE9PW51bGwmJksud2JpdHMhPT1NJiYoSy53aW5kb3c9bnVsbCksSy53cmFwPWEsSy53Yml0cz1NLEFlKHkpKX1mdW5jdGlvbiBqZSh5LE0pe3ZhciBhLEs7cmV0dXJuIHk/KEs9bmV3IHdlLHkuc3RhdGU9SyxLLndpbmRvdz1udWxsLGE9JGUoeSxNKSxhIT09cyYmKHkuc3RhdGU9bnVsbCksYSk6RX1mdW5jdGlvbiBDZSh5KXtyZXR1cm4gamUoeSxyZSl9dmFyIFhlPSEwLFVlLERlO2Z1bmN0aW9uIEllKHkpe2lmKFhlKXt2YXIgTTtmb3IoVWU9bmV3IG0uQnVmMzIoNTEyKSxEZT1uZXcgbS5CdWYzMigzMiksTT0wO008MTQ0Oyl5LmxlbnNbTSsrXT04O2Zvcig7TTwyNTY7KXkubGVuc1tNKytdPTk7Zm9yKDtNPDI4MDspeS5sZW5zW00rK109Nztmb3IoO008Mjg4Oyl5LmxlbnNbTSsrXT04O2ZvcihrKHIseS5sZW5zLDAsMjg4LFVlLDAseS53b3JrLHtiaXRzOjl9KSxNPTA7TTwzMjspeS5sZW5zW00rK109NTtrKHQseS5sZW5zLDAsMzIsRGUsMCx5Lndvcmsse2JpdHM6NX0pLFhlPSExfXkubGVuY29kZT1VZSx5LmxlbmJpdHM9OSx5LmRpc3Rjb2RlPURlLHkuZGlzdGJpdHM9NX1mdW5jdGlvbiBWZSh5LE0sYSxLKXt2YXIgbmUsZT15LnN0YXRlO3JldHVybiBlLndpbmRvdz09PW51bGwmJihlLndzaXplPTE8PGUud2JpdHMsZS53bmV4dD0wLGUud2hhdmU9MCxlLndpbmRvdz1uZXcgbS5CdWY4KGUud3NpemUpKSxLPj1lLndzaXplPyhtLmFycmF5U2V0KGUud2luZG93LE0sYS1lLndzaXplLGUud3NpemUsMCksZS53bmV4dD0wLGUud2hhdmU9ZS53c2l6ZSk6KG5lPWUud3NpemUtZS53bmV4dCxuZT5LJiYobmU9SyksbS5hcnJheVNldChlLndpbmRvdyxNLGEtSyxuZSxlLnduZXh0KSxLLT1uZSxLPyhtLmFycmF5U2V0KGUud2luZG93LE0sYS1LLEssMCksZS53bmV4dD1LLGUud2hhdmU9ZS53c2l6ZSk6KGUud25leHQrPW5lLGUud25leHQ9PT1lLndzaXplJiYoZS53bmV4dD0wKSxlLndoYXZlPGUud3NpemUmJihlLndoYXZlKz1uZSkpKSwwfWZ1bmN0aW9uIGwoeSxNKXt2YXIgYSxLLG5lLGUsTixPLGYseCx6LGllLFEsRixfZSxHZSxwZT0wLHZlLEVlLEJlLE5lLFFlLHFlLGtlLE9lLHllPW5ldyBtLkJ1ZjgoNCksWmUsUGUsTzA9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO2lmKCF5fHwheS5zdGF0ZXx8IXkub3V0cHV0fHwheS5pbnB1dCYmeS5hdmFpbF9pbiE9PTApcmV0dXJuIEU7YT15LnN0YXRlLGEubW9kZT09PUgmJihhLm1vZGU9VSksTj15Lm5leHRfb3V0LG5lPXkub3V0cHV0LGY9eS5hdmFpbF9vdXQsZT15Lm5leHRfaW4sSz15LmlucHV0LE89eS5hdmFpbF9pbix4PWEuaG9sZCx6PWEuYml0cyxpZT1PLFE9ZixPZT1zO2U6Zm9yKDs7KXN3aXRjaChhLm1vZGUpe2Nhc2UgbjppZihhLndyYXA9PT0wKXthLm1vZGU9VTticmVha31mb3IoO3o8MTY7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1pZihhLndyYXAmMiYmeD09PTM1NjE1KXthLmNoZWNrPTAseWVbMF09eCYyNTUseWVbMV09eD4+PjgmMjU1LGEuY2hlY2s9WShhLmNoZWNrLHllLDIsMCkseD0wLHo9MCxhLm1vZGU9dzticmVha31pZihhLmZsYWdzPTAsYS5oZWFkJiYoYS5oZWFkLmRvbmU9ITEpLCEoYS53cmFwJjEpfHwoKCh4JjI1NSk8PDgpKyh4Pj44KSklMzEpe3kubXNnPSJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrIixhLm1vZGU9Y2U7YnJlYWt9aWYoKHgmMTUpIT09byl7eS5tc2c9InVua25vd24gY29tcHJlc3Npb24gbWV0aG9kIixhLm1vZGU9Y2U7YnJlYWt9aWYoeD4+Pj00LHotPTQsa2U9KHgmMTUpKzgsYS53Yml0cz09PTApYS53Yml0cz1rZTtlbHNlIGlmKGtlPmEud2JpdHMpe3kubXNnPSJpbnZhbGlkIHdpbmRvdyBzaXplIixhLm1vZGU9Y2U7YnJlYWt9YS5kbWF4PTE8PGtlLHkuYWRsZXI9YS5jaGVjaz0xLGEubW9kZT14JjUxMj9qOkgseD0wLHo9MDticmVhaztjYXNlIHc6Zm9yKDt6PDE2Oyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9aWYoYS5mbGFncz14LChhLmZsYWdzJjI1NSkhPT1vKXt5Lm1zZz0idW5rbm93biBjb21wcmVzc2lvbiBtZXRob2QiLGEubW9kZT1jZTticmVha31pZihhLmZsYWdzJjU3MzQ0KXt5Lm1zZz0idW5rbm93biBoZWFkZXIgZmxhZ3Mgc2V0IixhLm1vZGU9Y2U7YnJlYWt9YS5oZWFkJiYoYS5oZWFkLnRleHQ9eD4+OCYxKSxhLmZsYWdzJjUxMiYmKHllWzBdPXgmMjU1LHllWzFdPXg+Pj44JjI1NSxhLmNoZWNrPVkoYS5jaGVjayx5ZSwyLDApKSx4PTAsej0wLGEubW9kZT1nO2Nhc2UgZzpmb3IoO3o8MzI7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1hLmhlYWQmJihhLmhlYWQudGltZT14KSxhLmZsYWdzJjUxMiYmKHllWzBdPXgmMjU1LHllWzFdPXg+Pj44JjI1NSx5ZVsyXT14Pj4+MTYmMjU1LHllWzNdPXg+Pj4yNCYyNTUsYS5jaGVjaz1ZKGEuY2hlY2sseWUsNCwwKSkseD0wLHo9MCxhLm1vZGU9cDtjYXNlIHA6Zm9yKDt6PDE2Oyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9YS5oZWFkJiYoYS5oZWFkLnhmbGFncz14JjI1NSxhLmhlYWQub3M9eD4+OCksYS5mbGFncyY1MTImJih5ZVswXT14JjI1NSx5ZVsxXT14Pj4+OCYyNTUsYS5jaGVjaz1ZKGEuY2hlY2sseWUsMiwwKSkseD0wLHo9MCxhLm1vZGU9UztjYXNlIFM6aWYoYS5mbGFncyYxMDI0KXtmb3IoO3o8MTY7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1hLmxlbmd0aD14LGEuaGVhZCYmKGEuaGVhZC5leHRyYV9sZW49eCksYS5mbGFncyY1MTImJih5ZVswXT14JjI1NSx5ZVsxXT14Pj4+OCYyNTUsYS5jaGVjaz1ZKGEuY2hlY2sseWUsMiwwKSkseD0wLHo9MH1lbHNlIGEuaGVhZCYmKGEuaGVhZC5leHRyYT1udWxsKTthLm1vZGU9QTtjYXNlIEE6aWYoYS5mbGFncyYxMDI0JiYoRj1hLmxlbmd0aCxGPk8mJihGPU8pLEYmJihhLmhlYWQmJihrZT1hLmhlYWQuZXh0cmFfbGVuLWEubGVuZ3RoLGEuaGVhZC5leHRyYXx8KGEuaGVhZC5leHRyYT1uZXcgQXJyYXkoYS5oZWFkLmV4dHJhX2xlbikpLG0uYXJyYXlTZXQoYS5oZWFkLmV4dHJhLEssZSxGLGtlKSksYS5mbGFncyY1MTImJihhLmNoZWNrPVkoYS5jaGVjayxLLEYsZSkpLE8tPUYsZSs9RixhLmxlbmd0aC09RiksYS5sZW5ndGgpKWJyZWFrIGU7YS5sZW5ndGg9MCxhLm1vZGU9TDtjYXNlIEw6aWYoYS5mbGFncyYyMDQ4KXtpZihPPT09MClicmVhayBlO0Y9MDtkbyBrZT1LW2UrRisrXSxhLmhlYWQmJmtlJiZhLmxlbmd0aDw2NTUzNiYmKGEuaGVhZC5uYW1lKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGtlKSk7d2hpbGUoa2UmJkY8Tyk7aWYoYS5mbGFncyY1MTImJihhLmNoZWNrPVkoYS5jaGVjayxLLEYsZSkpLE8tPUYsZSs9RixrZSlicmVhayBlfWVsc2UgYS5oZWFkJiYoYS5oZWFkLm5hbWU9bnVsbCk7YS5sZW5ndGg9MCxhLm1vZGU9RDtjYXNlIEQ6aWYoYS5mbGFncyY0MDk2KXtpZihPPT09MClicmVhayBlO0Y9MDtkbyBrZT1LW2UrRisrXSxhLmhlYWQmJmtlJiZhLmxlbmd0aDw2NTUzNiYmKGEuaGVhZC5jb21tZW50Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGtlKSk7d2hpbGUoa2UmJkY8Tyk7aWYoYS5mbGFncyY1MTImJihhLmNoZWNrPVkoYS5jaGVjayxLLEYsZSkpLE8tPUYsZSs9RixrZSlicmVhayBlfWVsc2UgYS5oZWFkJiYoYS5oZWFkLmNvbW1lbnQ9bnVsbCk7YS5tb2RlPUI7Y2FzZSBCOmlmKGEuZmxhZ3MmNTEyKXtmb3IoO3o8MTY7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1pZih4IT09KGEuY2hlY2smNjU1MzUpKXt5Lm1zZz0iaGVhZGVyIGNyYyBtaXNtYXRjaCIsYS5tb2RlPWNlO2JyZWFrfXg9MCx6PTB9YS5oZWFkJiYoYS5oZWFkLmhjcmM9YS5mbGFncz4+OSYxLGEuaGVhZC5kb25lPSEwKSx5LmFkbGVyPWEuY2hlY2s9MCxhLm1vZGU9SDticmVhaztjYXNlIGo6Zm9yKDt6PDMyOyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9eS5hZGxlcj1hLmNoZWNrPWRlKHgpLHg9MCx6PTAsYS5tb2RlPUM7Y2FzZSBDOmlmKGEuaGF2ZWRpY3Q9PT0wKXJldHVybiB5Lm5leHRfb3V0PU4seS5hdmFpbF9vdXQ9Zix5Lm5leHRfaW49ZSx5LmF2YWlsX2luPU8sYS5ob2xkPXgsYS5iaXRzPXosdjt5LmFkbGVyPWEuY2hlY2s9MSxhLm1vZGU9SDtjYXNlIEg6aWYoTT09PWJ8fE09PT1fKWJyZWFrIGU7Y2FzZSBVOmlmKGEubGFzdCl7eD4+Pj16Jjcsei09eiY3LGEubW9kZT1nZTticmVha31mb3IoO3o8Mzspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fXN3aXRjaChhLmxhc3Q9eCYxLHg+Pj49MSx6LT0xLHgmMyl7Y2FzZSAwOmEubW9kZT1YO2JyZWFrO2Nhc2UgMTppZihJZShhKSxhLm1vZGU9dGUsTT09PV8pe3g+Pj49Mix6LT0yO2JyZWFrIGV9YnJlYWs7Y2FzZSAyOmEubW9kZT1aO2JyZWFrO2Nhc2UgMzp5Lm1zZz0iaW52YWxpZCBibG9jayB0eXBlIixhLm1vZGU9Y2V9eD4+Pj0yLHotPTI7YnJlYWs7Y2FzZSBYOmZvcih4Pj4+PXomNyx6LT16Jjc7ejwzMjspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fWlmKCh4JjY1NTM1KSE9PSh4Pj4+MTZeNjU1MzUpKXt5Lm1zZz0iaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3RocyIsYS5tb2RlPWNlO2JyZWFrfWlmKGEubGVuZ3RoPXgmNjU1MzUseD0wLHo9MCxhLm1vZGU9VCxNPT09XylicmVhayBlO2Nhc2UgVDphLm1vZGU9UDtjYXNlIFA6aWYoRj1hLmxlbmd0aCxGKXtpZihGPk8mJihGPU8pLEY+ZiYmKEY9ZiksRj09PTApYnJlYWsgZTttLmFycmF5U2V0KG5lLEssZSxGLE4pLE8tPUYsZSs9RixmLT1GLE4rPUYsYS5sZW5ndGgtPUY7YnJlYWt9YS5tb2RlPUg7YnJlYWs7Y2FzZSBaOmZvcig7ejwxNDspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fWlmKGEubmxlbj0oeCYzMSkrMjU3LHg+Pj49NSx6LT01LGEubmRpc3Q9KHgmMzEpKzEseD4+Pj01LHotPTUsYS5uY29kZT0oeCYxNSkrNCx4Pj4+PTQsei09NCxhLm5sZW4+Mjg2fHxhLm5kaXN0PjMwKXt5Lm1zZz0idG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHMiLGEubW9kZT1jZTticmVha31hLmhhdmU9MCxhLm1vZGU9YWU7Y2FzZSBhZTpmb3IoO2EuaGF2ZTxhLm5jb2RlOyl7Zm9yKDt6PDM7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1hLmxlbnNbTzBbYS5oYXZlKytdXT14JjcseD4+Pj0zLHotPTN9Zm9yKDthLmhhdmU8MTk7KWEubGVuc1tPMFthLmhhdmUrK11dPTA7aWYoYS5sZW5jb2RlPWEubGVuZHluLGEubGVuYml0cz03LFplPXtiaXRzOmEubGVuYml0c30sT2U9ayhJLGEubGVucywwLDE5LGEubGVuY29kZSwwLGEud29yayxaZSksYS5sZW5iaXRzPVplLmJpdHMsT2Upe3kubXNnPSJpbnZhbGlkIGNvZGUgbGVuZ3RocyBzZXQiLGEubW9kZT1jZTticmVha31hLmhhdmU9MCxhLm1vZGU9JDtjYXNlICQ6Zm9yKDthLmhhdmU8YS5ubGVuK2EubmRpc3Q7KXtmb3IoO3BlPWEubGVuY29kZVt4JigxPDxhLmxlbmJpdHMpLTFdLHZlPXBlPj4+MjQsRWU9cGU+Pj4xNiYyNTUsQmU9cGUmNjU1MzUsISh2ZTw9eik7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1pZihCZTwxNil4Pj4+PXZlLHotPXZlLGEubGVuc1thLmhhdmUrK109QmU7ZWxzZXtpZihCZT09PTE2KXtmb3IoUGU9dmUrMjt6PFBlOyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9aWYoeD4+Pj12ZSx6LT12ZSxhLmhhdmU9PT0wKXt5Lm1zZz0iaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdCIsYS5tb2RlPWNlO2JyZWFrfWtlPWEubGVuc1thLmhhdmUtMV0sRj0zKyh4JjMpLHg+Pj49Mix6LT0yfWVsc2UgaWYoQmU9PT0xNyl7Zm9yKFBlPXZlKzM7ejxQZTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fXg+Pj49dmUsei09dmUsa2U9MCxGPTMrKHgmNykseD4+Pj0zLHotPTN9ZWxzZXtmb3IoUGU9dmUrNzt6PFBlOyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9eD4+Pj12ZSx6LT12ZSxrZT0wLEY9MTErKHgmMTI3KSx4Pj4+PTcsei09N31pZihhLmhhdmUrRj5hLm5sZW4rYS5uZGlzdCl7eS5tc2c9ImludmFsaWQgYml0IGxlbmd0aCByZXBlYXQiLGEubW9kZT1jZTticmVha31mb3IoO0YtLTspYS5sZW5zW2EuaGF2ZSsrXT1rZX19aWYoYS5tb2RlPT09Y2UpYnJlYWs7aWYoYS5sZW5zWzI1Nl09PT0wKXt5Lm1zZz0iaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrIixhLm1vZGU9Y2U7YnJlYWt9aWYoYS5sZW5iaXRzPTksWmU9e2JpdHM6YS5sZW5iaXRzfSxPZT1rKHIsYS5sZW5zLDAsYS5ubGVuLGEubGVuY29kZSwwLGEud29yayxaZSksYS5sZW5iaXRzPVplLmJpdHMsT2Upe3kubXNnPSJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQiLGEubW9kZT1jZTticmVha31pZihhLmRpc3RiaXRzPTYsYS5kaXN0Y29kZT1hLmRpc3RkeW4sWmU9e2JpdHM6YS5kaXN0Yml0c30sT2U9ayh0LGEubGVucyxhLm5sZW4sYS5uZGlzdCxhLmRpc3Rjb2RlLDAsYS53b3JrLFplKSxhLmRpc3RiaXRzPVplLmJpdHMsT2Upe3kubXNnPSJpbnZhbGlkIGRpc3RhbmNlcyBzZXQiLGEubW9kZT1jZTticmVha31pZihhLm1vZGU9dGUsTT09PV8pYnJlYWsgZTtjYXNlIHRlOmEubW9kZT1WO2Nhc2UgVjppZihPPj02JiZmPj0yNTgpe3kubmV4dF9vdXQ9Tix5LmF2YWlsX291dD1mLHkubmV4dF9pbj1lLHkuYXZhaWxfaW49TyxhLmhvbGQ9eCxhLmJpdHM9eixSKHksUSksTj15Lm5leHRfb3V0LG5lPXkub3V0cHV0LGY9eS5hdmFpbF9vdXQsZT15Lm5leHRfaW4sSz15LmlucHV0LE89eS5hdmFpbF9pbix4PWEuaG9sZCx6PWEuYml0cyxhLm1vZGU9PT1IJiYoYS5iYWNrPS0xKTticmVha31mb3IoYS5iYWNrPTA7cGU9YS5sZW5jb2RlW3gmKDE8PGEubGVuYml0cyktMV0sdmU9cGU+Pj4yNCxFZT1wZT4+PjE2JjI1NSxCZT1wZSY2NTUzNSwhKHZlPD16KTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fWlmKEVlJiYhKEVlJjI0MCkpe2ZvcihOZT12ZSxRZT1FZSxxZT1CZTtwZT1hLmxlbmNvZGVbcWUrKCh4JigxPDxOZStRZSktMSk+Pk5lKV0sdmU9cGU+Pj4yNCxFZT1wZT4+PjE2JjI1NSxCZT1wZSY2NTUzNSwhKE5lK3ZlPD16KTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fXg+Pj49TmUsei09TmUsYS5iYWNrKz1OZX1pZih4Pj4+PXZlLHotPXZlLGEuYmFjays9dmUsYS5sZW5ndGg9QmUsRWU9PT0wKXthLm1vZGU9c2U7YnJlYWt9aWYoRWUmMzIpe2EuYmFjaz0tMSxhLm1vZGU9SDticmVha31pZihFZSY2NCl7eS5tc2c9ImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZSIsYS5tb2RlPWNlO2JyZWFrfWEuZXh0cmE9RWUmMTUsYS5tb2RlPXVlO2Nhc2UgdWU6aWYoYS5leHRyYSl7Zm9yKFBlPWEuZXh0cmE7ejxQZTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fWEubGVuZ3RoKz14JigxPDxhLmV4dHJhKS0xLHg+Pj49YS5leHRyYSx6LT1hLmV4dHJhLGEuYmFjays9YS5leHRyYX1hLndhcz1hLmxlbmd0aCxhLm1vZGU9ZmU7Y2FzZSBmZTpmb3IoO3BlPWEuZGlzdGNvZGVbeCYoMTw8YS5kaXN0Yml0cyktMV0sdmU9cGU+Pj4yNCxFZT1wZT4+PjE2JjI1NSxCZT1wZSY2NTUzNSwhKHZlPD16KTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fWlmKCEoRWUmMjQwKSl7Zm9yKE5lPXZlLFFlPUVlLHFlPUJlO3BlPWEuZGlzdGNvZGVbcWUrKCh4JigxPDxOZStRZSktMSk+Pk5lKV0sdmU9cGU+Pj4yNCxFZT1wZT4+PjE2JjI1NSxCZT1wZSY2NTUzNSwhKE5lK3ZlPD16KTspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHgrPUtbZSsrXTw8eix6Kz04fXg+Pj49TmUsei09TmUsYS5iYWNrKz1OZX1pZih4Pj4+PXZlLHotPXZlLGEuYmFjays9dmUsRWUmNjQpe3kubXNnPSJpbnZhbGlkIGRpc3RhbmNlIGNvZGUiLGEubW9kZT1jZTticmVha31hLm9mZnNldD1CZSxhLmV4dHJhPUVlJjE1LGEubW9kZT1oZTtjYXNlIGhlOmlmKGEuZXh0cmEpe2ZvcihQZT1hLmV4dHJhO3o8UGU7KXtpZihPPT09MClicmVhayBlO08tLSx4Kz1LW2UrK108PHoseis9OH1hLm9mZnNldCs9eCYoMTw8YS5leHRyYSktMSx4Pj4+PWEuZXh0cmEsei09YS5leHRyYSxhLmJhY2srPWEuZXh0cmF9aWYoYS5vZmZzZXQ+YS5kbWF4KXt5Lm1zZz0iaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2siLGEubW9kZT1jZTticmVha31hLm1vZGU9bGU7Y2FzZSBsZTppZihmPT09MClicmVhayBlO2lmKEY9US1mLGEub2Zmc2V0PkYpe2lmKEY9YS5vZmZzZXQtRixGPmEud2hhdmUmJmEuc2FuZSl7eS5tc2c9ImludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrIixhLm1vZGU9Y2U7YnJlYWt9Rj5hLnduZXh0PyhGLT1hLnduZXh0LF9lPWEud3NpemUtRik6X2U9YS53bmV4dC1GLEY+YS5sZW5ndGgmJihGPWEubGVuZ3RoKSxHZT1hLndpbmRvd31lbHNlIEdlPW5lLF9lPU4tYS5vZmZzZXQsRj1hLmxlbmd0aDtGPmYmJihGPWYpLGYtPUYsYS5sZW5ndGgtPUY7ZG8gbmVbTisrXT1HZVtfZSsrXTt3aGlsZSgtLUYpO2EubGVuZ3RoPT09MCYmKGEubW9kZT1WKTticmVhaztjYXNlIHNlOmlmKGY9PT0wKWJyZWFrIGU7bmVbTisrXT1hLmxlbmd0aCxmLS0sYS5tb2RlPVY7YnJlYWs7Y2FzZSBnZTppZihhLndyYXApe2Zvcig7ejwzMjspe2lmKE89PT0wKWJyZWFrIGU7Ty0tLHh8PUtbZSsrXTw8eix6Kz04fWlmKFEtPWYseS50b3RhbF9vdXQrPVEsYS50b3RhbCs9USxRJiYoeS5hZGxlcj1hLmNoZWNrPWEuZmxhZ3M/WShhLmNoZWNrLG5lLFEsTi1RKTpHKGEuY2hlY2ssbmUsUSxOLVEpKSxRPWYsKGEuZmxhZ3M/eDpkZSh4KSkhPT1hLmNoZWNrKXt5Lm1zZz0iaW5jb3JyZWN0IGRhdGEgY2hlY2siLGEubW9kZT1jZTticmVha314PTAsej0wfWEubW9kZT16ZTtjYXNlIHplOmlmKGEud3JhcCYmYS5mbGFncyl7Zm9yKDt6PDMyOyl7aWYoTz09PTApYnJlYWsgZTtPLS0seCs9S1tlKytdPDx6LHorPTh9aWYoeCE9PShhLnRvdGFsJjQyOTQ5NjcyOTUpKXt5Lm1zZz0iaW5jb3JyZWN0IGxlbmd0aCBjaGVjayIsYS5tb2RlPWNlO2JyZWFrfXg9MCx6PTB9YS5tb2RlPXhlO2Nhc2UgeGU6T2U9aDticmVhayBlO2Nhc2UgY2U6T2U9ZDticmVhayBlO2Nhc2UgU2U6cmV0dXJuIHU7Y2FzZSBtZTpkZWZhdWx0OnJldHVybiBFfXJldHVybiB5Lm5leHRfb3V0PU4seS5hdmFpbF9vdXQ9Zix5Lm5leHRfaW49ZSx5LmF2YWlsX2luPU8sYS5ob2xkPXgsYS5iaXRzPXosKGEud3NpemV8fFEhPT15LmF2YWlsX291dCYmYS5tb2RlPGNlJiYoYS5tb2RlPGdlfHxNIT09aSkpJiZWZSh5LHkub3V0cHV0LHkubmV4dF9vdXQsUS15LmF2YWlsX291dCksaWUtPXkuYXZhaWxfaW4sUS09eS5hdmFpbF9vdXQseS50b3RhbF9pbis9aWUseS50b3RhbF9vdXQrPVEsYS50b3RhbCs9USxhLndyYXAmJlEmJih5LmFkbGVyPWEuY2hlY2s9YS5mbGFncz9ZKGEuY2hlY2ssbmUsUSx5Lm5leHRfb3V0LVEpOkcoYS5jaGVjayxuZSxRLHkubmV4dF9vdXQtUSkpLHkuZGF0YV90eXBlPWEuYml0cysoYS5sYXN0PzY0OjApKyhhLm1vZGU9PT1IPzEyODowKSsoYS5tb2RlPT09dGV8fGEubW9kZT09PVQ/MjU2OjApLChpZT09PTAmJlE9PT0wfHxNPT09aSkmJk9lPT09cyYmKE9lPWMpLE9lfWZ1bmN0aW9uIEooeSl7aWYoIXl8fCF5LnN0YXRlKXJldHVybiBFO3ZhciBNPXkuc3RhdGU7cmV0dXJuIE0ud2luZG93JiYoTS53aW5kb3c9bnVsbCkseS5zdGF0ZT1udWxsLHN9ZnVuY3Rpb24gVyh5LE0pe3ZhciBhO3JldHVybiF5fHwheS5zdGF0ZXx8KGE9eS5zdGF0ZSwhKGEud3JhcCYyKSk/RTooYS5oZWFkPU0sTS5kb25lPSExLHMpfWZ1bmN0aW9uIGVlKHksTSl7dmFyIGE9TS5sZW5ndGgsSyxuZSxlO3JldHVybiF5fHwheS5zdGF0ZXx8KEs9eS5zdGF0ZSxLLndyYXAhPT0wJiZLLm1vZGUhPT1DKT9FOksubW9kZT09PUMmJihuZT0xLG5lPUcobmUsTSxhLDApLG5lIT09Sy5jaGVjayk/ZDooZT1WZSh5LE0sYSxhKSxlPyhLLm1vZGU9U2UsdSk6KEsuaGF2ZWRpY3Q9MSxzKSl9cmV0dXJuIExlLmluZmxhdGVSZXNldD1BZSxMZS5pbmZsYXRlUmVzZXQyPSRlLExlLmluZmxhdGVSZXNldEtlZXA9YmUsTGUuaW5mbGF0ZUluaXQ9Q2UsTGUuaW5mbGF0ZUluaXQyPWplLExlLmluZmxhdGU9bCxMZS5pbmZsYXRlRW5kPUosTGUuaW5mbGF0ZUdldEhlYWRlcj1XLExlLmluZmxhdGVTZXREaWN0aW9uYXJ5PWVlLExlLmluZmxhdGVJbmZvPSJwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpIixMZX12YXIgaDAsQjA7ZnVuY3Rpb24gejAoKXtyZXR1cm4gQjB8fChCMD0xLGgwPXtaX05PX0ZMVVNIOjAsWl9QQVJUSUFMX0ZMVVNIOjEsWl9TWU5DX0ZMVVNIOjIsWl9GVUxMX0ZMVVNIOjMsWl9GSU5JU0g6NCxaX0JMT0NLOjUsWl9UUkVFUzo2LFpfT0s6MCxaX1NUUkVBTV9FTkQ6MSxaX05FRURfRElDVDoyLFpfRVJSTk86LTEsWl9TVFJFQU1fRVJST1I6LTIsWl9EQVRBX0VSUk9SOi0zLFpfQlVGX0VSUk9SOi01LFpfTk9fQ09NUFJFU1NJT046MCxaX0JFU1RfU1BFRUQ6MSxaX0JFU1RfQ09NUFJFU1NJT046OSxaX0RFRkFVTFRfQ09NUFJFU1NJT046LTEsWl9GSUxURVJFRDoxLFpfSFVGRk1BTl9PTkxZOjIsWl9STEU6MyxaX0ZJWEVEOjQsWl9ERUZBVUxUX1NUUkFURUdZOjAsWl9CSU5BUlk6MCxaX1RFWFQ6MSxaX1VOS05PV046MixaX0RFRkxBVEVEOjh9KSxoMH12YXIgbDAsUjA7ZnVuY3Rpb24gajAoKXtpZihSMClyZXR1cm4gbDA7UjA9MTtmdW5jdGlvbiBtKCl7dGhpcy50ZXh0PTAsdGhpcy50aW1lPTAsdGhpcy54ZmxhZ3M9MCx0aGlzLm9zPTAsdGhpcy5leHRyYT1udWxsLHRoaXMuZXh0cmFfbGVuPTAsdGhpcy5uYW1lPSIiLHRoaXMuY29tbWVudD0iIix0aGlzLmhjcmM9MCx0aGlzLmRvbmU9ITF9cmV0dXJuIGwwPW0sbDB9dmFyIE4wO2Z1bmN0aW9uIFUwKCl7aWYoTjApcmV0dXJuIFdlO04wPTE7dmFyIG09SDAoKSxHPUhlKCksWT14MCgpLFI9ejAoKSxrPWkwKCksST1FMCgpLHI9ajAoKSx0PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gaShzKXtpZighKHRoaXMgaW5zdGFuY2VvZiBpKSlyZXR1cm4gbmV3IGkocyk7dGhpcy5vcHRpb25zPUcuYXNzaWduKHtjaHVua1NpemU6MTYzODQsd2luZG93Qml0czowLHRvOiIifSxzfHx7fSk7dmFyIGg9dGhpcy5vcHRpb25zO2gucmF3JiZoLndpbmRvd0JpdHM+PTAmJmgud2luZG93Qml0czwxNiYmKGgud2luZG93Qml0cz0taC53aW5kb3dCaXRzLGgud2luZG93Qml0cz09PTAmJihoLndpbmRvd0JpdHM9LTE1KSksaC53aW5kb3dCaXRzPj0wJiZoLndpbmRvd0JpdHM8MTYmJiEocyYmcy53aW5kb3dCaXRzKSYmKGgud2luZG93Qml0cys9MzIpLGgud2luZG93Qml0cz4xNSYmaC53aW5kb3dCaXRzPDQ4JiYoaC53aW5kb3dCaXRzJjE1fHwoaC53aW5kb3dCaXRzfD0xNSkpLHRoaXMuZXJyPTAsdGhpcy5tc2c9IiIsdGhpcy5lbmRlZD0hMSx0aGlzLmNodW5rcz1bXSx0aGlzLnN0cm09bmV3IEksdGhpcy5zdHJtLmF2YWlsX291dD0wO3ZhciB2PW0uaW5mbGF0ZUluaXQyKHRoaXMuc3RybSxoLndpbmRvd0JpdHMpO2lmKHYhPT1SLlpfT0spdGhyb3cgbmV3IEVycm9yKGtbdl0pO2lmKHRoaXMuaGVhZGVyPW5ldyByLG0uaW5mbGF0ZUdldEhlYWRlcih0aGlzLnN0cm0sdGhpcy5oZWFkZXIpLGguZGljdGlvbmFyeSYmKHR5cGVvZiBoLmRpY3Rpb25hcnk9PSJzdHJpbmciP2guZGljdGlvbmFyeT1ZLnN0cmluZzJidWYoaC5kaWN0aW9uYXJ5KTp0LmNhbGwoaC5kaWN0aW9uYXJ5KT09PSJbb2JqZWN0IEFycmF5QnVmZmVyXSImJihoLmRpY3Rpb25hcnk9bmV3IFVpbnQ4QXJyYXkoaC5kaWN0aW9uYXJ5KSksaC5yYXcmJih2PW0uaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLGguZGljdGlvbmFyeSksdiE9PVIuWl9PSykpKXRocm93IG5ldyBFcnJvcihrW3ZdKX1pLnByb3RvdHlwZS5wdXNoPWZ1bmN0aW9uKHMsaCl7dmFyIHY9dGhpcy5zdHJtLEU9dGhpcy5vcHRpb25zLmNodW5rU2l6ZSxkPXRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5LHUsYyxvLG4sdyxnPSExO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7Yz1oPT09fn5oP2g6aD09PSEwP1IuWl9GSU5JU0g6Ui5aX05PX0ZMVVNILHR5cGVvZiBzPT0ic3RyaW5nIj92LmlucHV0PVkuYmluc3RyaW5nMmJ1ZihzKTp0LmNhbGwocyk9PT0iW29iamVjdCBBcnJheUJ1ZmZlcl0iP3YuaW5wdXQ9bmV3IFVpbnQ4QXJyYXkocyk6di5pbnB1dD1zLHYubmV4dF9pbj0wLHYuYXZhaWxfaW49di5pbnB1dC5sZW5ndGg7ZG97aWYodi5hdmFpbF9vdXQ9PT0wJiYodi5vdXRwdXQ9bmV3IEcuQnVmOChFKSx2Lm5leHRfb3V0PTAsdi5hdmFpbF9vdXQ9RSksdT1tLmluZmxhdGUodixSLlpfTk9fRkxVU0gpLHU9PT1SLlpfTkVFRF9ESUNUJiZkJiYodT1tLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSxkKSksdT09PVIuWl9CVUZfRVJST1ImJmc9PT0hMCYmKHU9Ui5aX09LLGc9ITEpLHUhPT1SLlpfU1RSRUFNX0VORCYmdSE9PVIuWl9PSylyZXR1cm4gdGhpcy5vbkVuZCh1KSx0aGlzLmVuZGVkPSEwLCExO3YubmV4dF9vdXQmJih2LmF2YWlsX291dD09PTB8fHU9PT1SLlpfU1RSRUFNX0VORHx8di5hdmFpbF9pbj09PTAmJihjPT09Ui5aX0ZJTklTSHx8Yz09PVIuWl9TWU5DX0ZMVVNIKSkmJih0aGlzLm9wdGlvbnMudG89PT0ic3RyaW5nIj8obz1ZLnV0Zjhib3JkZXIodi5vdXRwdXQsdi5uZXh0X291dCksbj12Lm5leHRfb3V0LW8sdz1ZLmJ1ZjJzdHJpbmcodi5vdXRwdXQsbyksdi5uZXh0X291dD1uLHYuYXZhaWxfb3V0PUUtbixuJiZHLmFycmF5U2V0KHYub3V0cHV0LHYub3V0cHV0LG8sbiwwKSx0aGlzLm9uRGF0YSh3KSk6dGhpcy5vbkRhdGEoRy5zaHJpbmtCdWYodi5vdXRwdXQsdi5uZXh0X291dCkpKSx2LmF2YWlsX2luPT09MCYmdi5hdmFpbF9vdXQ9PT0wJiYoZz0hMCl9d2hpbGUoKHYuYXZhaWxfaW4+MHx8di5hdmFpbF9vdXQ9PT0wKSYmdSE9PVIuWl9TVFJFQU1fRU5EKTtyZXR1cm4gdT09PVIuWl9TVFJFQU1fRU5EJiYoYz1SLlpfRklOSVNIKSxjPT09Ui5aX0ZJTklTSD8odT1tLmluZmxhdGVFbmQodGhpcy5zdHJtKSx0aGlzLm9uRW5kKHUpLHRoaXMuZW5kZWQ9ITAsdT09PVIuWl9PSyk6KGM9PT1SLlpfU1lOQ19GTFVTSCYmKHRoaXMub25FbmQoUi5aX09LKSx2LmF2YWlsX291dD0wKSwhMCl9LGkucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbihzKXt0aGlzLmNodW5rcy5wdXNoKHMpfSxpLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbihzKXtzPT09Ui5aX09LJiYodGhpcy5vcHRpb25zLnRvPT09InN0cmluZyI/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbigiIik6dGhpcy5yZXN1bHQ9Ry5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKSksdGhpcy5jaHVua3M9W10sdGhpcy5lcnI9cyx0aGlzLm1zZz10aGlzLnN0cm0ubXNnfTtmdW5jdGlvbiBiKHMsaCl7dmFyIHY9bmV3IGkoaCk7aWYodi5wdXNoKHMsITApLHYuZXJyKXRocm93IHYubXNnfHxrW3YuZXJyXTtyZXR1cm4gdi5yZXN1bHR9ZnVuY3Rpb24gXyhzLGgpe3JldHVybiBoPWh8fHt9LGgucmF3PSEwLGIocyxoKX1yZXR1cm4gV2UuSW5mbGF0ZT1pLFdlLmluZmxhdGU9YixXZS5pbmZsYXRlUmF3PV8sV2UudW5nemlwPWIsV2V9dmFyIG8wLEwwO2Z1bmN0aW9uIEowKCl7aWYoTDApcmV0dXJuIG8wO0wwPTE7dmFyIG09SGUoKS5hc3NpZ24sRz1QMCgpLFk9VTAoKSxSPXowKCksaz17fTtyZXR1cm4gbShrLEcsWSxSKSxvMD1rLG8wfShmdW5jdGlvbihtKXsoZnVuY3Rpb24oKXt2YXIgRz17fTttLmV4cG9ydHM9Rzt2YXIgWTt0eXBlb2YgQzA9PSJmdW5jdGlvbiI/WT1KMCgpOlk9c2VsZi5wYWtvO2Z1bmN0aW9uIFIoKXsodHlwZW9mIHByb2Nlc3M+InUifHxwcm9jZXNzLmVudi5OT0RFX0VOVj09ImRldmVsb3BtZW50IikmJmNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX0oZnVuY3Rpb24oayxJKXsoZnVuY3Rpb24oKXt2YXIgcj10eXBlb2YgU3ltYm9sPT0iZnVuY3Rpb24iJiZ0eXBlb2YgU3ltYm9sLml0ZXJhdG9yPT0ic3ltYm9sIj9mdW5jdGlvbihiKXtyZXR1cm4gdHlwZW9mIGJ9OmZ1bmN0aW9uKGIpe3JldHVybiBiJiZ0eXBlb2YgU3ltYm9sPT0iZnVuY3Rpb24iJiZiLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZiIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgYn0sdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoXyl7dGhpcy5tZXNzYWdlPSJKUEVHIGVycm9yOiAiK199cmV0dXJuIGIucHJvdG90eXBlPUVycm9yKCksYi5wcm90b3R5cGUubmFtZT0iSnBlZ0Vycm9yIixiLmNvbnN0cnVjdG9yPWJ9KCksaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoXyxzKXt0aGlzLm1lc3NhZ2U9Xyx0aGlzLmc9c31yZXR1cm4gYi5wcm90b3R5cGU9RXJyb3IoKSxiLnByb3RvdHlwZS5uYW1lPSJETkxNYXJrZXJFcnJvciIsYi5jb25zdHJ1Y3Rvcj1ifSgpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoKXt0aGlzLk09bnVsbCx0aGlzLkI9LTF9ZnVuY3Rpb24gXyhkLHUpe2Zvcih2YXIgYz0wLG89W10sbix3LGc9MTY7MDxnJiYhZFtnLTFdOylnLS07by5wdXNoKHtjaGlsZHJlbjpbXSxpbmRleDowfSk7dmFyIHA9b1swXSxTO2ZvcihuPTA7bjxnO24rKyl7Zm9yKHc9MDt3PGRbbl07dysrKXtmb3IocD1vLnBvcCgpLHAuY2hpbGRyZW5bcC5pbmRleF09dVtjXTswPHAuaW5kZXg7KXA9by5wb3AoKTtmb3IocC5pbmRleCsrLG8ucHVzaChwKTtvLmxlbmd0aDw9bjspby5wdXNoKFM9e2NoaWxkcmVuOltdLGluZGV4OjB9KSxwLmNoaWxkcmVuW3AuaW5kZXhdPVMuY2hpbGRyZW4scD1TO2MrK31uKzE8ZyYmKG8ucHVzaChTPXtjaGlsZHJlbjpbXSxpbmRleDowfSkscC5jaGlsZHJlbltwLmluZGV4XT1TLmNoaWxkcmVuLHA9Uyl9cmV0dXJuIG9bMF0uY2hpbGRyZW59ZnVuY3Rpb24gcyhkLHUsYyxvLG4sdyxnLHAsUyl7ZnVuY3Rpb24gQSgpe2lmKDA8JClyZXR1cm4gJC0tLGFlPj4kJjE7aWYoYWU9ZFt1KytdLGFlPT09MjU1KXt2YXIgcT1kW3UrK107aWYocSl7aWYocT09PTIyMCYmVCl7dSs9Mjt2YXIgcmU9ZFt1KytdPDw4fGRbdSsrXTtpZigwPHJlJiZyZSE9PWMuZyl0aHJvdyBuZXcgaSgiRm91bmQgRE5MIG1hcmtlciAoMHhGRkRDKSB3aGlsZSBwYXJzaW5nIHNjYW4gZGF0YSIscmUpfXRocm93IG5ldyB0KCJ1bmV4cGVjdGVkIG1hcmtlciAiKyhhZTw8OHxxKS50b1N0cmluZygxNikpfX1yZXR1cm4gJD03LGFlPj4+N31mdW5jdGlvbiBMKHEpe2Zvcig7Oyl7aWYocT1xW0EoKV0sdHlwZW9mIHE9PSJudW1iZXIiKXJldHVybiBxO2lmKCh0eXBlb2YgcT4idSI/InVuZGVmaW5lZCI6cihxKSkhPT0ib2JqZWN0Iil0aHJvdyBuZXcgdCgiaW52YWxpZCBodWZmbWFuIHNlcXVlbmNlIil9fWZ1bmN0aW9uIEQocSl7Zm9yKHZhciByZT0wOzA8cTspcmU9cmU8PDF8QSgpLHEtLTtyZXR1cm4gcmV9ZnVuY3Rpb24gQihxKXtpZihxPT09MSlyZXR1cm4gQSgpPT09MT8xOi0xO3ZhciByZT1EKHEpO3JldHVybiByZT49MTw8cS0xP3JlOnJlKygtMTw8cSkrMX1mdW5jdGlvbiBqKHEscmUpe3ZhciBkZT1MKHEuRCk7Zm9yKGRlPWRlPT09MD8wOkIoZGUpLHEuYVtyZV09cS5tKz1kZSxkZT0xOzY0PmRlOyl7dmFyIHdlPUwocS5vKSxiZT13ZSYxNTtpZih3ZT4+PTQsYmU9PT0wKXtpZigxNT53ZSlicmVhaztkZSs9MTZ9ZWxzZSBkZSs9d2UscS5hW3JlK0VbZGVdXT1CKGJlKSxkZSsrfX1mdW5jdGlvbiBDKHEscmUpe3ZhciBkZT1MKHEuRCk7ZGU9ZGU9PT0wPzA6QihkZSk8PFMscS5hW3JlXT1xLm0rPWRlfWZ1bmN0aW9uIEgocSxyZSl7cS5hW3JlXXw9QSgpPDxTfWZ1bmN0aW9uIFUocSxyZSl7aWYoMDx0ZSl0ZS0tO2Vsc2UgZm9yKHZhciBkZT13O2RlPD1nOyl7dmFyIHdlPUwocS5vKSxiZT13ZSYxNTtpZih3ZT4+PTQsYmU9PT0wKXtpZigxNT53ZSl7dGU9RCh3ZSkrKDE8PHdlKS0xO2JyZWFrfWRlKz0xNn1lbHNlIGRlKz13ZSxxLmFbcmUrRVtkZV1dPUIoYmUpKigxPDxTKSxkZSsrfX1mdW5jdGlvbiBYKHEscmUpe2Zvcih2YXIgZGU9dyx3ZT0wLGJlO2RlPD1nOyl7YmU9cmUrRVtkZV07dmFyIEFlPTA+cS5hW2JlXT8tMToxO3N3aXRjaChWKXtjYXNlIDA6aWYod2U9TChxLm8pLGJlPXdlJjE1LHdlPj49NCxiZT09PTApMTU+d2U/KHRlPUQod2UpKygxPDx3ZSksVj00KTood2U9MTYsVj0xKTtlbHNle2lmKGJlIT09MSl0aHJvdyBuZXcgdCgiaW52YWxpZCBBQ24gZW5jb2RpbmciKTt1ZT1CKGJlKSxWPXdlPzI6M31jb250aW51ZTtjYXNlIDE6Y2FzZSAyOnEuYVtiZV0/cS5hW2JlXSs9QWUqKEEoKTw8Uyk6KHdlLS0sd2U9PT0wJiYoVj1WPT09Mj8zOjApKTticmVhaztjYXNlIDM6cS5hW2JlXT9xLmFbYmVdKz1BZSooQSgpPDxTKToocS5hW2JlXT11ZTw8UyxWPTApO2JyZWFrO2Nhc2UgNDpxLmFbYmVdJiYocS5hW2JlXSs9QWUqKEEoKTw8UykpfWRlKyt9Vj09PTQmJih0ZS0tLHRlPT09MCYmKFY9MCkpfWZvcih2YXIgVD05PGFyZ3VtZW50cy5sZW5ndGgmJmFyZ3VtZW50c1s5XSE9PXZvaWQgMD9hcmd1bWVudHNbOV06ITEsUD1jLlAsWj11LGFlPTAsJD0wLHRlPTAsVj0wLHVlLGZlPW8ubGVuZ3RoLGhlLGxlLHNlLGdlLHplPWMuUz93PT09MD9wPT09MD9DOkg6cD09PTA/VTpYOmoseGU9MCxjZT1mZT09PTE/b1swXS5jKm9bMF0ubDpQKmMuTyxTZSxtZTt4ZTxjZTspe3ZhciBSZT1uP01hdGgubWluKGNlLXhlLG4pOmNlO2ZvcihoZT0wO2hlPGZlO2hlKyspb1toZV0ubT0wO2lmKHRlPTAsZmU9PT0xKXt2YXIgb2U9b1swXTtmb3IoZ2U9MDtnZTxSZTtnZSsrKXplKG9lLDY0Kigob2UuYysxKSooeGUvb2UuY3wwKSt4ZSVvZS5jKSkseGUrK31lbHNlIGZvcihnZT0wO2dlPFJlO2dlKyspe2ZvcihoZT0wO2hlPGZlO2hlKyspZm9yKG9lPW9baGVdLFNlPW9lLmgsbWU9b2UuaixsZT0wO2xlPG1lO2xlKyspZm9yKHNlPTA7c2U8U2U7c2UrKyl6ZShvZSw2NCooKG9lLmMrMSkqKCh4ZS9QfDApKm9lLmorbGUpKyh4ZSVQKm9lLmgrc2UpKSk7eGUrK31pZigkPTAsKG9lPXYoZCx1KSkmJm9lLmYmJigoMCxfdXRpbC53YXJuKSgiZGVjb2RlU2NhbiAtIHVuZXhwZWN0ZWQgTUNVIGRhdGEsIGN1cnJlbnQgbWFya2VyIGlzOiAiK29lLmYpLHU9b2Uub2Zmc2V0KSxvZT1vZSYmb2UuRiwhb2V8fDY1MjgwPj1vZSl0aHJvdyBuZXcgdCgibWFya2VyIHdhcyBub3QgZm91bmQiKTtpZig2NTQ4ODw9b2UmJjY1NDk1Pj1vZSl1Kz0yO2Vsc2UgYnJlYWt9cmV0dXJuKG9lPXYoZCx1KSkmJm9lLmYmJigoMCxfdXRpbC53YXJuKSgiZGVjb2RlU2NhbiAtIHVuZXhwZWN0ZWQgU2NhbiBkYXRhLCBjdXJyZW50IG1hcmtlciBpczogIitvZS5mKSx1PW9lLm9mZnNldCksdS1afWZ1bmN0aW9uIGgoZCx1KXtmb3IodmFyIGM9dS5jLG89dS5sLG49bmV3IEludDE2QXJyYXkoNjQpLHc9MDt3PG87dysrKWZvcih2YXIgZz0wO2c8YztnKyspe3ZhciBwPTY0KigodS5jKzEpKncrZyksUz1uLEE9dS5HLEw9dS5hO2lmKCFBKXRocm93IG5ldyB0KCJtaXNzaW5nIHJlcXVpcmVkIFF1YW50aXphdGlvbiBUYWJsZS4iKTtmb3IodmFyIEQ9MDs2ND5EO0QrPTgpe3ZhciBCPUxbcCtEXSxqPUxbcCtEKzFdLEM9TFtwK0QrMl0sSD1MW3ArRCszXSxVPUxbcCtEKzRdLFg9TFtwK0QrNV0sVD1MW3ArRCs2XSxQPUxbcCtEKzddO2lmKEIqPUFbRF0sIShqfEN8SHxVfFh8VHxQKSlCPTU3OTMqQis1MTI+PjEwLFNbRF09QixTW0QrMV09QixTW0QrMl09QixTW0QrM109QixTW0QrNF09QixTW0QrNV09QixTW0QrNl09QixTW0QrN109QjtlbHNle2oqPUFbRCsxXSxDKj1BW0QrMl0sSCo9QVtEKzNdLFUqPUFbRCs0XSxYKj1BW0QrNV0sVCo9QVtEKzZdLFAqPUFbRCs3XTt2YXIgWj01NzkzKkIrMTI4Pj44LGFlPTU3OTMqVSsxMjg+PjgsJD1DLHRlPVQ7VT0yODk2KihqLVApKzEyOD4+OCxQPTI4OTYqKGorUCkrMTI4Pj44LEg8PD00LFg8PD00LFo9WithZSsxPj4xLGFlPVotYWUsQj0zNzg0KiQrMTU2Nyp0ZSsxMjg+PjgsJD0xNTY3KiQtMzc4NCp0ZSsxMjg+PjgsdGU9QixVPVUrWCsxPj4xLFg9VS1YLFA9UCtIKzE+PjEsSD1QLUgsWj1aK3RlKzE+PjEsdGU9Wi10ZSxhZT1hZSskKzE+PjEsJD1hZS0kLEI9MjI3NipVKzM0MDYqUCsyMDQ4Pj4xMixVPTM0MDYqVS0yMjc2KlArMjA0OD4+MTIsUD1CLEI9Nzk5KkgrNDAxNypYKzIwNDg+PjEyLEg9NDAxNypILTc5OSpYKzIwNDg+PjEyLFg9QixTW0RdPVorUCxTW0QrN109Wi1QLFNbRCsxXT1hZStYLFNbRCs2XT1hZS1YLFNbRCsyXT0kK0gsU1tEKzVdPSQtSCxTW0QrM109dGUrVSxTW0QrNF09dGUtVX19Zm9yKEE9MDs4PkE7KytBKUI9U1tBXSxqPVNbQSs4XSxDPVNbQSsxNl0sSD1TW0ErMjRdLFU9U1tBKzMyXSxYPVNbQSs0MF0sVD1TW0ErNDhdLFA9U1tBKzU2XSxqfEN8SHxVfFh8VHxQPyhaPTU3OTMqQisyMDQ4Pj4xMixhZT01NzkzKlUrMjA0OD4+MTIsJD1DLHRlPVQsVT0yODk2KihqLVApKzIwNDg+PjEyLFA9Mjg5NiooaitQKSsyMDQ4Pj4xMixaPShaK2FlKzE+PjEpKzQxMTIsYWU9Wi1hZSxCPTM3ODQqJCsxNTY3KnRlKzIwNDg+PjEyLCQ9MTU2NyokLTM3ODQqdGUrMjA0OD4+MTIsdGU9QixVPVUrWCsxPj4xLFg9VS1YLFA9UCtIKzE+PjEsSD1QLUgsWj1aK3RlKzE+PjEsdGU9Wi10ZSxhZT1hZSskKzE+PjEsJD1hZS0kLEI9MjI3NipVKzM0MDYqUCsyMDQ4Pj4xMixVPTM0MDYqVS0yMjc2KlArMjA0OD4+MTIsUD1CLEI9Nzk5KkgrNDAxNypYKzIwNDg+PjEyLEg9NDAxNypILTc5OSpYKzIwNDg+PjEyLFg9QixCPVorUCxQPVotUCxqPWFlK1gsVD1hZS1YLEM9JCtILFg9JC1ILEg9dGUrVSxVPXRlLVUsQj0xNj5CPzA6NDA4MDw9Qj8yNTU6Qj4+NCxqPTE2Pmo/MDo0MDgwPD1qPzI1NTpqPj40LEM9MTY+Qz8wOjQwODA8PUM/MjU1OkM+PjQsSD0xNj5IPzA6NDA4MDw9SD8yNTU6SD4+NCxVPTE2PlU/MDo0MDgwPD1VPzI1NTpVPj40LFg9MTY+WD8wOjQwODA8PVg/MjU1Olg+PjQsVD0xNj5UPzA6NDA4MDw9VD8yNTU6VD4+NCxQPTE2PlA/MDo0MDgwPD1QPzI1NTpQPj40LExbcCtBXT1CLExbcCtBKzhdPWosTFtwK0ErMTZdPUMsTFtwK0ErMjRdPUgsTFtwK0ErMzJdPVUsTFtwK0ErNDBdPVgsTFtwK0ErNDhdPVQsTFtwK0ErNTZdPVApOihCPTU3OTMqQis4MTkyPj4xNCxCPS0yMDQwPkI/MDoyMDI0PD1CPzI1NTpCKzIwNTY+PjQsTFtwK0FdPUIsTFtwK0ErOF09QixMW3ArQSsxNl09QixMW3ArQSsyNF09QixMW3ArQSszMl09QixMW3ArQSs0MF09QixMW3ArQSs0OF09QixMW3ArQSs1Nl09Qil9cmV0dXJuIHUuYX1mdW5jdGlvbiB2KGQsdSl7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMl0hPT12b2lkIDA/YXJndW1lbnRzWzJdOnUsbz1kLmxlbmd0aC0xO2lmKGM9Yzx1P2M6dSx1Pj1vKXJldHVybiBudWxsO3ZhciBuPWRbdV08PDh8ZFt1KzFdO2lmKDY1NDcyPD1uJiY2NTUzND49bilyZXR1cm57ZjpudWxsLEY6bixvZmZzZXQ6dX07Zm9yKHZhciB3PWRbY108PDh8ZFtjKzFdOyEoNjU0NzI8PXcmJjY1NTM0Pj13KTspe2lmKCsrYz49bylyZXR1cm4gbnVsbDt3PWRbY108PDh8ZFtjKzFdfXJldHVybntmOm4udG9TdHJpbmcoMTYpLEY6dyxvZmZzZXQ6Y319dmFyIEU9bmV3IFVpbnQ4QXJyYXkoWzAsMSw4LDE2LDksMiwzLDEwLDE3LDI0LDMyLDI1LDE4LDExLDQsNSwxMiwxOSwyNiwzMyw0MCw0OCw0MSwzNCwyNywyMCwxMyw2LDcsMTQsMjEsMjgsMzUsNDIsNDksNTYsNTcsNTAsNDMsMzYsMjksMjIsMTUsMjMsMzAsMzcsNDQsNTEsNTgsNTksNTIsNDUsMzgsMzEsMzksNDYsNTMsNjAsNjEsNTQsNDcsNTUsNjIsNjNdKTtiLnByb3RvdHlwZT17cGFyc2U6ZnVuY3Rpb24oZCl7ZnVuY3Rpb24gdSgpe3ZhciAkPWRbZ108PDh8ZFtnKzFdO3JldHVybiBnKz0yLCR9ZnVuY3Rpb24gYygpe3ZhciAkPXUoKTskPWcrJC0yO3ZhciB0ZT12KGQsJCxnKTtyZXR1cm4gdGUmJnRlLmYmJigoMCxfdXRpbC53YXJuKSgicmVhZERhdGFCbG9jayAtIGluY29ycmVjdCBsZW5ndGgsIGN1cnJlbnQgbWFya2VyIGlzOiAiK3RlLmYpLCQ9dGUub2Zmc2V0KSwkPWQuc3ViYXJyYXkoZywkKSxnKz0kLmxlbmd0aCwkfWZ1bmN0aW9uIG8oJCl7Zm9yKHZhciB0ZT1NYXRoLmNlaWwoJC52LzgvJC5zKSxWPU1hdGguY2VpbCgkLmcvOC8kLnUpLHVlPTA7dWU8JC5iLmxlbmd0aDt1ZSsrKXtaPSQuYlt1ZV07dmFyIGZlPU1hdGguY2VpbChNYXRoLmNlaWwoJC52LzgpKlouaC8kLnMpLGhlPU1hdGguY2VpbChNYXRoLmNlaWwoJC5nLzgpKlouai8kLnUpO1ouYT1uZXcgSW50MTZBcnJheSg2NCpWKlouaioodGUqWi5oKzEpKSxaLmM9ZmUsWi5sPWhlfSQuUD10ZSwkLk89Vn12YXIgbj0oMTxhcmd1bWVudHMubGVuZ3RoJiZhcmd1bWVudHNbMV0hPT12b2lkIDA/YXJndW1lbnRzWzFdOnt9KS5OLHc9bj09PXZvaWQgMD9udWxsOm4sZz0wLHA9bnVsbCxTPTA7bj1bXTt2YXIgQT1bXSxMPVtdLEQ9dSgpO2lmKEQhPT02NTQ5Nil0aHJvdyBuZXcgdCgiU09JIG5vdCBmb3VuZCIpO2ZvcihEPXUoKTtEIT09NjU0OTc7KXtzd2l0Y2goRCl7Y2FzZSA2NTUwNDpjYXNlIDY1NTA1OmNhc2UgNjU1MDY6Y2FzZSA2NTUwNzpjYXNlIDY1NTA4OmNhc2UgNjU1MDk6Y2FzZSA2NTUxMDpjYXNlIDY1NTExOmNhc2UgNjU1MTI6Y2FzZSA2NTUxMzpjYXNlIDY1NTE0OmNhc2UgNjU1MTU6Y2FzZSA2NTUxNjpjYXNlIDY1NTE3OmNhc2UgNjU1MTg6Y2FzZSA2NTUxOTpjYXNlIDY1NTM0OnZhciBCPWMoKTtEPT09NjU1MTgmJkJbMF09PT02NSYmQlsxXT09PTEwMCYmQlsyXT09PTExMSYmQlszXT09PTk4JiZCWzRdPT09MTAxJiYocD17dmVyc2lvbjpCWzVdPDw4fEJbNl0sWTpCWzddPDw4fEJbOF0sWjpCWzldPDw4fEJbMTBdLFc6QlsxMV19KTticmVhaztjYXNlIDY1NDk5OkQ9dSgpK2ctMjtmb3IodmFyIGo7ZzxEOyl7dmFyIEM9ZFtnKytdLEg9bmV3IFVpbnQxNkFycmF5KDY0KTtpZihDPj40KWlmKEM+PjQ9PT0xKWZvcihCPTA7NjQ+QjtCKyspaj1FW0JdLEhbal09dSgpO2Vsc2UgdGhyb3cgbmV3IHQoIkRRVCAtIGludmFsaWQgdGFibGUgc3BlYyIpO2Vsc2UgZm9yKEI9MDs2ND5CO0IrKylqPUVbQl0sSFtqXT1kW2crK107bltDJjE1XT1IfWJyZWFrO2Nhc2UgNjU0NzI6Y2FzZSA2NTQ3MzpjYXNlIDY1NDc0OmlmKFUpdGhyb3cgbmV3IHQoIk9ubHkgc2luZ2xlIGZyYW1lIEpQRUdzIHN1cHBvcnRlZCIpO3UoKTt2YXIgVT17fTtmb3IoVS5YPUQ9PT02NTQ3MyxVLlM9RD09PTY1NDc0LFUucHJlY2lzaW9uPWRbZysrXSxEPXUoKSxVLmc9d3x8RCxVLnY9dSgpLFUuYj1bXSxVLkM9e30sQj1kW2crK10sRD1IPUM9MDtEPEI7RCsrKXtqPWRbZ107dmFyIFg9ZFtnKzFdPj40LFQ9ZFtnKzFdJjE1O0M8WCYmKEM9WCksSDxUJiYoSD1UKSxYPVUuYi5wdXNoKHtoOlgsajpULFQ6ZFtnKzJdLEc6bnVsbH0pLFUuQ1tqXT1YLTEsZys9M31VLnM9QyxVLnU9SCxvKFUpO2JyZWFrO2Nhc2UgNjU0NzY6Zm9yKGo9dSgpLEQ9MjtEPGo7KXtmb3IoQz1kW2crK10sSD1uZXcgVWludDhBcnJheSgxNiksQj1YPTA7MTY+QjtCKyssZysrKVgrPUhbQl09ZFtnXTtmb3IoVD1uZXcgVWludDhBcnJheShYKSxCPTA7QjxYO0IrKyxnKyspVFtCXT1kW2ddO0QrPTE3K1gsKEM+PjQ/QTpMKVtDJjE1XT1fKEgsVCl9YnJlYWs7Y2FzZSA2NTUwMTp1KCk7dmFyIFA9dSgpO2JyZWFrO2Nhc2UgNjU0OTg6Zm9yKEI9KytTPT09MSYmIXcsdSgpLEM9ZFtnKytdLGo9W10sRD0wO0Q8QztEKyspe0g9VS5DW2RbZysrXV07dmFyIFo9VS5iW0hdO0g9ZFtnKytdLFouRD1MW0g+PjRdLFoubz1BW0gmMTVdLGoucHVzaChaKX1EPWRbZysrXSxDPWRbZysrXSxIPWRbZysrXTt0cnl7dmFyIGFlPXMoZCxnLFUsaixQLEQsQyxIPj40LEgmMTUsQik7Zys9YWV9Y2F0Y2goJCl7aWYoJCBpbnN0YW5jZW9mIGkpcmV0dXJuKDAsX3V0aWwud2FybikoJ0F0dGVtcHRpbmcgdG8gcmUtcGFyc2UgSlBFRyBpbWFnZSB1c2luZyAic2NhbkxpbmVzIiBwYXJhbWV0ZXIgZm91bmQgaW4gRE5MIG1hcmtlciAoMHhGRkRDKSBzZWdtZW50LicpLHRoaXMucGFyc2UoZCx7TjokLmd9KTt0aHJvdyAkfWJyZWFrO2Nhc2UgNjU1MDA6Zys9NDticmVhaztjYXNlIDY1NTM1OmRbZ10hPT0yNTUmJmctLTticmVhaztkZWZhdWx0OmlmKGRbZy0zXT09PTI1NSYmMTkyPD1kW2ctMl0mJjI1ND49ZFtnLTJdKWctPTM7ZWxzZSBpZigoQj12KGQsZy0yKSkmJkIuZikoMCxfdXRpbC53YXJuKSgiSnBlZ0ltYWdlLnBhcnNlIC0gdW5leHBlY3RlZCBkYXRhLCBjdXJyZW50IG1hcmtlciBpczogIitCLmYpLGc9Qi5vZmZzZXQ7ZWxzZSB0aHJvdyBuZXcgdCgidW5rbm93biBtYXJrZXIgIitELnRvU3RyaW5nKDE2KSl9RD11KCl9Zm9yKHRoaXMud2lkdGg9VS52LHRoaXMuaGVpZ2h0PVUuZyx0aGlzLkE9cCx0aGlzLmI9W10sRD0wO0Q8VS5iLmxlbmd0aDtEKyspWj1VLmJbRF0sKFA9bltaLlRdKSYmKFouRz1QKSx0aGlzLmIucHVzaCh7UjpoKFUsWiksVTpaLmgvVS5zLFY6Wi5qL1UudSxjOlouYyxsOloubH0pO3RoaXMuaT10aGlzLmIubGVuZ3RofSxMOmZ1bmN0aW9uKGQsdSl7dmFyIGM9dGhpcy53aWR0aC9kLG89dGhpcy5oZWlnaHQvdSxuLHcsZz10aGlzLmIubGVuZ3RoLHA9ZCp1KmcsUz1uZXcgVWludDhDbGFtcGVkQXJyYXkocCksQT1uZXcgVWludDMyQXJyYXkoZCk7Zm9yKHc9MDt3PGc7dysrKXt2YXIgTD10aGlzLmJbd10sRD1MLlUqYyxCPUwuVipvLGo9dyxDPUwuUixIPUwuYysxPDwzO2ZvcihuPTA7bjxkO24rKylMPTB8bipELEFbbl09KEwmNDI5NDk2NzI4OCk8PDN8TCY3O2ZvcihEPTA7RDx1O0QrKylmb3IoTD0wfEQqQixMPUgqKEwmNDI5NDk2NzI4OCl8KEwmNyk8PDMsbj0wO248ZDtuKyspU1tqXT1DW0wrQVtuXV0sais9Z31pZihvPXRoaXMuTSlmb3Iodz0wO3c8cDspZm9yKGM9TD0wO0w8ZztMKyssdysrLGMrPTIpU1t3XT0oU1t3XSpvW2NdPj44KStvW2MrMV07cmV0dXJuIFN9LHc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5BPyEhdGhpcy5BLlc6dGhpcy5pPT09Mz90aGlzLkIhPT0wOnRoaXMuQj09PTF9LEk6ZnVuY3Rpb24oZCl7Zm9yKHZhciB1LGMsbyxuPTAsdz1kLmxlbmd0aDtuPHc7bis9Myl1PWRbbl0sYz1kW24rMV0sbz1kW24rMl0sZFtuXT11LTE3OS40NTYrMS40MDIqbyxkW24rMV09dSsxMzUuNDU5LS4zNDQqYy0uNzE0Km8sZFtuKzJdPXUtMjI2LjgxNisxLjc3MipjO3JldHVybiBkfSxLOmZ1bmN0aW9uKGQpe2Zvcih2YXIgdSxjLG8sbix3PTAsZz0wLHA9ZC5sZW5ndGg7ZzxwO2crPTQpdT1kW2ddLGM9ZFtnKzFdLG89ZFtnKzJdLG49ZFtnKzNdLGRbdysrXT0tMTIyLjY3MTk1NDA2ODk0K2MqKC02NjA2MzU2Njk0MjAzNjRlLTE5KmMrLjAwMDQzNzEzMDQ3NTkyNjIzMipvLTU0MDgwNjEwMDY0NTk5ZS0xOCp1Ky4wMDA0ODQ0OTc5NzEyMDI4MSpuLS4xNTQzNjIxNTE4NzExMjYpK28qKC0uMDAwOTU3OTY0Mzc4NDQ1NzczKm8rLjAwMDgxNzA3NjkxMTM0NjYyNSp1LS4wMDQ3NzI3MTQwNTQwODc0NypuKzEuNTMzODAyNTMyMjE3MzQpK3UqKC4wMDA5NjEyNTAxODQxMzA2ODgqdS0uMDAyNjYyNTczMzIyODM5MzMqbisuNDgzNTcwODg0NTEyNjUpK24qKC0uMDAwMzM2MTk3MTc3NjE4Mzk0Km4rLjQ4NDc5MTU2MTQ5MDc3NiksZFt3KytdPTEwNy4yNjgwMzkzOTc3MjQrYyooMjE5OTI3MTA0NTI1NzQxZS0xOSpjLS4wMDA2NDA5OTIwMTgyOTc5NDUqbysuMDAwNjU5Mzk3MDAxMjQ1NTc3KnUrLjAwMDQyNjEwNTY1MjkzODgzNypuLS4xNzY0OTE3OTI0NjI4NzUpK28qKC0uMDAwNzc4MjY5OTQxNTEzNjgzKm8rLjAwMTMwODcyMjYxNDA4Mjc1KnUrLjAwMDc3MDQ4MjYzMTgwMTEzMipuLS4xNTEwNTE0OTI3NzU1NjIpK3UqKC4wMDEyNjkzNTM2ODExNDg0Myp1LS4wMDI2NTA5MDE4OTAxMDg5OCpuKy4yNTgwMjkxMDIwNjg0NSkrbiooLS4wMDAzMTg5MTMxMTc1ODgzMjgqbi0uMjEzNzQyNDAwMzIzNjY1KSxkW3crK109LTIwLjgxMDAxMjU0Njk0NytjKigtLjAwMDU3MDExNTE5Njk3MzY3NypjLTI2MzQwOTA1MTAwNDU4OWUtMTkqbysuMDAyMDc0MTA4ODExNTAxMip1LS4wMDI4ODI2MDIzNjg1MzQ0MipuKy44MTQyNzI5NjgzNTkyOTUpK28qKC0xNTM0OTYwNTc0NDA5NzVlLTE5Km8tLjAwMDEzMjY4OTA0Mzk2MTQ0Nip1Ky4wMDA1NjA4MzM2OTEyNDI4MTIqbi0uMTk1MTUyMDI3NTM0MDQ5KSt1KiguMDAxNzQ0MTgxMzI5Mjc1ODIqdS0uMDAyNTUyNDMzMjE0MzkzNDcqbisuMTE2OTM1MDIwNDY1MTQ1KStuKigtLjAwMDM0MzUzMTk5NjUxMDU1NSpuKy4yNDE2NTI2MDIzMjQwNyk7cmV0dXJuIGQuc3ViYXJyYXkoMCx3KX0sSjpmdW5jdGlvbihkKXtmb3IodmFyIHUsYyxvLG49MCx3PWQubGVuZ3RoO248dztuKz00KXU9ZFtuXSxjPWRbbisxXSxvPWRbbisyXSxkW25dPTQzNC40NTYtdS0xLjQwMipvLGRbbisxXT0xMTkuNTQxLXUrLjM0NCpjKy43MTQqbyxkW24rMl09NDgxLjgxNi11LTEuNzcyKmM7cmV0dXJuIGR9LEg6ZnVuY3Rpb24oZCl7Zm9yKHZhciB1LGMsbyxuLHc9MCxnPTEvMjU1LHA9MCxTPWQubGVuZ3RoO3A8UztwKz00KXU9ZFtwXSpnLGM9ZFtwKzFdKmcsbz1kW3ArMl0qZyxuPWRbcCszXSpnLGRbdysrXT0yNTUrdSooLTQuMzg3MzMyMzg0NjA5OTg4KnUrNTQuNDg2MTUxOTQxODkxNzYqYysxOC44MjI5MDUwMjE2NTMwMipvKzIxMi4yNTY2MjQ1MTYzOTU4NSpuLTI4NS4yMzMxMDI2MTM3MDA0KStjKigxLjcxNDk3NjM0NzczNjIxMzQqYy01LjYwOTY3MzY5MDQwNDczMTUqby0xNy44NzM4NzA4NjE0MTU0NDQqbi01LjQ5NzAwNjQyNzE5NjM2NikrbyooLTIuNTIxNzM0MDEzMTY4MzAzMypvLTIxLjI0ODkyMzMzNzM1MzA3MypuKzE3LjUxMTkyNzA4NDE4MTMpLW4qKDIxLjg2MTIyMTQ3NDYzNjA1Km4rMTg5LjQ4MTgwODM1OTIyNzQ3KSxkW3crK109MjU1K3UqKDguODQxMDQxNDIyMDM2MTQ5KnUrNjAuMTE4MDI3MDQ1NTk3MzY2KmMrNi44NzE0MjU1OTIwNDkwMDcqbyszMS4xNTkxMDAxMzAwNTU5MjIqbi03OS4yOTcwODQ0ODE2NTQ4KStjKigtMTUuMzEwMzYxMzA2OTY3ODE3KmMrMTcuNTc1MjUxMjYxMTA5NDgyKm8rMTMxLjM1MjUwOTEyNDkzOTc2Km4tMTkwLjk0NTMzMDI1ODg5NTEpK28qKDQuNDQ0MzM5MTAyODUyNzM5Km8rOS44NjMyODYxNDkzNDA1Km4tMjQuODY3NDE1ODI1NTU4NzgpLW4qKDIwLjczNzMyNTQ3MTE4MTAzNCpuKzE4Ny44MDQ1MzcwOTcxOTU3OCksZFt3KytdPTI1NSt1KiguODg0MjUyMjQzMDAwMzI5Nip1KzguMDc4Njc3NTAzMTEyOTI4KmMrMzAuODk5NzgzMDk3MDM3Mjkqby0uMjM4ODMyMzg2ODkxNzg5MzQqbi0xNC4xODM1NzY3OTk2NzMyODYpK2MqKDEwLjQ5NTkzMjczNDMyMDcyKmMrNjMuMDIzNzg0OTQ3NTQwNTIqbys1MC42MDY5NTc2NTYzNjA3MzQqbi0xMTIuMjM4ODQyNTM3MTkyNDgpK28qKC4wMzI5NjA0MTExNDg3MzIxNypvKzExNS42MDM4NDQ0OTY0NjY0MSpuLTE5My41ODIwOTM1Njg2MTUwNSktbiooMjIuMzM4MTY4MDczMDk4ODYqbisxODAuMTI2MTM5NzQ3MDgzNjcpO3JldHVybiBkLnN1YmFycmF5KDAsdyl9LGdldERhdGE6ZnVuY3Rpb24oZCx1LGMpe2lmKDQ8dGhpcy5pKXRocm93IG5ldyB0KCJVbnN1cHBvcnRlZCBjb2xvciBtb2RlIik7aWYoZD10aGlzLkwoZCx1KSx0aGlzLmk9PT0xJiZjKXtjPWQubGVuZ3RoLHU9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMqYyk7Zm9yKHZhciBvPTAsbj0wO248YztuKyspe3ZhciB3PWRbbl07dVtvKytdPXcsdVtvKytdPXcsdVtvKytdPXd9cmV0dXJuIHV9aWYodGhpcy5pPT09MyYmdGhpcy53KCkpcmV0dXJuIHRoaXMuSShkKTtpZih0aGlzLmk9PT00KXtpZih0aGlzLncoKSlyZXR1cm4gYz90aGlzLksoZCk6dGhpcy5KKGQpO2lmKGMpcmV0dXJuIHRoaXMuSChkKX1yZXR1cm4gZH19LGsuSnBlZ0RlY29kZXI9Yn0pKCl9KSgpLGsuZW5jb2RlSW1hZ2U9ZnVuY3Rpb24ocix0LGksYil7dmFyIF89e3QyNTY6W3RdLHQyNTc6W2ldLHQyNTg6WzgsOCw4LDhdLHQyNTk6WzFdLHQyNjI6WzJdLHQyNzM6WzFlM10sdDI3NzpbNF0sdDI3ODpbaV0sdDI3OTpbdCppKjRdLHQyODI6WzFdLHQyODM6WzFdLHQyODQ6WzFdLHQyODY6WzBdLHQyODc6WzBdLHQyOTY6WzFdLHQzMDU6WyJQaG90b3BlYSAoVVRJRi5qcykiXSx0MzM4OlsxXX07aWYoYilmb3IodmFyIHMgaW4gYilfW3NdPWJbc107Zm9yKHZhciBoPW5ldyBVaW50OEFycmF5KGsuZW5jb2RlKFtfXSkpLHY9bmV3IFVpbnQ4QXJyYXkociksRT1uZXcgVWludDhBcnJheSgxZTMrdCppKjQpLHM9MDtzPGgubGVuZ3RoO3MrKylFW3NdPWhbc107Zm9yKHZhciBzPTA7czx2Lmxlbmd0aDtzKyspRVsxZTMrc109dltzXTtyZXR1cm4gRS5idWZmZXJ9LGsuZW5jb2RlPWZ1bmN0aW9uKHIpe3ZhciB0PW5ldyBVaW50OEFycmF5KDJlNCksaT00LGI9ay5fYmluQkU7dFswXT03Nyx0WzFdPTc3LHRbM109NDI7dmFyIF89ODtiLndyaXRlVWludCh0LGksXyksaSs9NDtmb3IodmFyIHM9MDtzPHIubGVuZ3RoO3MrKyl7dmFyIGg9ay5fd3JpdGVJRkQoYix0LF8scltzXSk7Xz1oWzFdLHM8ci5sZW5ndGgtMSYmYi53cml0ZVVpbnQodCxoWzBdLF8pfXJldHVybiB0LnNsaWNlKDAsXykuYnVmZmVyfSxrLmRlY29kZT1mdW5jdGlvbihyKXtrLmRlY29kZS5fZGVjb2RlRzMuYWxsb3cyRD1udWxsO3ZhciB0PW5ldyBVaW50OEFycmF5KHIpLGk9MCxiPWsuX2JpbkJFLnJlYWRBU0NJSSh0LGksMik7aSs9Mjt2YXIgXz1iPT0iSUkiP2suX2JpbkxFOmsuX2JpbkJFO18ucmVhZFVzaG9ydCh0LGkpLGkrPTI7dmFyIHM9Xy5yZWFkVWludCh0LGkpO2krPTQ7Zm9yKHZhciBoPVtdOzspe3ZhciB2PWsuX3JlYWRJRkQoXyx0LHMsaCwwLCExKTtpZihzPV8ucmVhZFVpbnQodCx2KSxzPT0wKWJyZWFrfXJldHVybiBofSxrLmRlY29kZUltYWdlPWZ1bmN0aW9uKHIsdCxpKXt2YXIgYj1uZXcgVWludDhBcnJheShyKSxfPWsuX2JpbkJFLnJlYWRBU0NJSShiLDAsMik7aWYodC50MjU2IT1udWxsKXt0LmlzTEU9Xz09IklJIix0LndpZHRoPXQudDI1NlswXSx0LmhlaWdodD10LnQyNTdbMF07dmFyIHM9dC50MjU5P3QudDI1OVswXToxLGg9dC50MjY2P3QudDI2NlswXToxO3QudDI4NCYmdC50Mjg0WzBdPT0yJiZSKCJQbGFuYXJDb25maWd1cmF0aW9uIDIgc2hvdWxkIG5vdCBiZSB1c2VkISIpO3ZhciB2O3QudDI1OD92PU1hdGgubWluKDMyLHQudDI1OFswXSkqdC50MjU4Lmxlbmd0aDp2PXQudDI3Nz90LnQyNzdbMF06MSxzPT0xJiZ0LnQyNzkhPW51bGwmJnQudDI3OCYmdC50MjYyWzBdPT0zMjgwMyYmKHY9TWF0aC5yb3VuZCh0LnQyNzlbMF0qOC8odC53aWR0aCp0LnQyNzhbMF0pKSk7dmFyIEU9TWF0aC5jZWlsKHQud2lkdGgqdi84KSo4LGQ9dC50MjczO2Q9PW51bGwmJihkPXQudDMyNCk7dmFyIHU9dC50Mjc5O3M9PTEmJmQubGVuZ3RoPT0xJiYodT1bdC5oZWlnaHQqKEU+Pj4zKV0pLHU9PW51bGwmJih1PXQudDMyNSk7dmFyIGM9bmV3IFVpbnQ4QXJyYXkodC5oZWlnaHQqKEU+Pj4zKSksbz0wO2lmKHQudDMyMiE9bnVsbCl7Zm9yKHZhciBuPXQudDMyMlswXSx3PXQudDMyM1swXSxnPU1hdGguZmxvb3IoKHQud2lkdGgrbi0xKS9uKSxwPU1hdGguZmxvb3IoKHQuaGVpZ2h0K3ctMSkvdyksUz1uZXcgVWludDhBcnJheShNYXRoLmNlaWwobip3KnYvOCl8MCksQT0wO0E8cDtBKyspZm9yKHZhciBMPTA7TDxnO0wrKyl7Zm9yKHZhciBEPUEqZytMLEI9MDtCPFMubGVuZ3RoO0IrKylTW0JdPTA7ay5kZWNvZGUuX2RlY29tcHJlc3ModCxpLGIsZFtEXSx1W0RdLHMsUywwLGgpLHM9PTY/Yz1TOmsuX2NvcHlUaWxlKFMsTWF0aC5jZWlsKG4qdi84KXwwLHcsYyxNYXRoLmNlaWwodC53aWR0aCp2LzgpfDAsdC5oZWlnaHQsTWF0aC5jZWlsKEwqbip2LzgpfDAsQSp3KX1vPWMubGVuZ3RoKjh9ZWxzZXt2YXIgaj10LnQyNzg/dC50Mjc4WzBdOnQuaGVpZ2h0O2o9TWF0aC5taW4oaix0LmhlaWdodCk7Zm9yKHZhciBEPTA7RDxkLmxlbmd0aDtEKyspay5kZWNvZGUuX2RlY29tcHJlc3ModCxpLGIsZFtEXSx1W0RdLHMsYyxNYXRoLmNlaWwoby84KXwwLGgpLG8rPUUqajtvPU1hdGgubWluKG8sYy5sZW5ndGgqOCl9dC5kYXRhPW5ldyBVaW50OEFycmF5KGMuYnVmZmVyLDAsTWF0aC5jZWlsKG8vOCl8MCl9fSxrLmRlY29kZS5fZGVjb21wcmVzcz1mdW5jdGlvbihyLHQsaSxiLF8scyxoLHYsRSl7aWYocz09MXx8Xz09aC5sZW5ndGgmJnMhPTMyNzY3KWZvcih2YXIgZD0wO2Q8XztkKyspaFt2K2RdPWlbYitkXTtlbHNlIGlmKHM9PTMpay5kZWNvZGUuX2RlY29kZUczKGksYixfLGgsdixyLndpZHRoLEUpO2Vsc2UgaWYocz09NClrLmRlY29kZS5fZGVjb2RlRzQoaSxiLF8saCx2LHIud2lkdGgsRSk7ZWxzZSBpZihzPT01KWsuZGVjb2RlLl9kZWNvZGVMWlcoaSxiLGgsdik7ZWxzZSBpZihzPT02KWsuZGVjb2RlLl9kZWNvZGVPbGRKUEVHKHIsaSxiLF8saCx2KTtlbHNlIGlmKHM9PTcpay5kZWNvZGUuX2RlY29kZU5ld0pQRUcocixpLGIsXyxoLHYpO2Vsc2UgaWYocz09OClmb3IodmFyIHU9bmV3IFVpbnQ4QXJyYXkoaS5idWZmZXIsYixfKSxjPUkuaW5mbGF0ZSh1KSxvPTA7bzxjLmxlbmd0aDtvKyspaFt2K29dPWNbb107ZWxzZSBzPT0zMjc2Nz9rLmRlY29kZS5fZGVjb2RlQVJXKHIsaSxiLF8saCx2KTpzPT0zMjc3Mz9rLmRlY29kZS5fZGVjb2RlUGFja0JpdHMoaSxiLF8saCx2KTpzPT0zMjgwOT9rLmRlY29kZS5fZGVjb2RlVGh1bmRlcihpLGIsXyxoLHYpOnM9PTM0NzEzP2suZGVjb2RlLl9kZWNvZGVOaWtvbihyLHQsaSxiLF8saCx2KTpSKCJVbmtub3duIGNvbXByZXNzaW9uIixzKTt2YXIgbj1yLnQyNTg/TWF0aC5taW4oMzIsci50MjU4WzBdKToxLHc9ci50Mjc3P3IudDI3N1swXToxLGc9bip3Pj4+MyxwPXIudDI3OD9yLnQyNzhbMF06ci5oZWlnaHQsUz1NYXRoLmNlaWwobip3KnIud2lkdGgvOCk7aWYobj09MTYmJiFyLmlzTEUmJnIudDMzNDIyPT1udWxsKWZvcih2YXIgQT0wO0E8cDtBKyspZm9yKHZhciBMPXYrQSpTLEQ9MTtEPFM7RCs9Mil7dmFyIEI9aFtMK0RdO2hbTCtEXT1oW0wrRC0xXSxoW0wrRC0xXT1CfWlmKHIudDMxNyYmci50MzE3WzBdPT0yKWZvcih2YXIgQT0wO0E8cDtBKyspe3ZhciBqPXYrQSpTO2lmKG49PTE2KWZvcih2YXIgZD1nO2Q8UztkKz0yKXt2YXIgQz0oaFtqK2QrMV08PDh8aFtqK2RdKSsoaFtqK2QtZysxXTw8OHxoW2orZC1nXSk7aFtqK2RdPUMmMjU1LGhbaitkKzFdPUM+Pj44JjI1NX1lbHNlIGlmKHc9PTMpZm9yKHZhciBkPTM7ZDxTO2QrPTMpaFtqK2RdPWhbaitkXStoW2orZC0zXSYyNTUsaFtqK2QrMV09aFtqK2QrMV0raFtqK2QtMl0mMjU1LGhbaitkKzJdPWhbaitkKzJdK2hbaitkLTFdJjI1NTtlbHNlIGZvcih2YXIgZD1nO2Q8UztkKyspaFtqK2RdPWhbaitkXStoW2orZC1nXSYyNTV9fSxrLmRlY29kZS5fbGpwZWdfZGlmZj1mdW5jdGlvbihyLHQsaSl7dmFyIGI9ay5kZWNvZGUuX2dldGJpdGh1ZmYsXyxzO3JldHVybiBfPWIocix0LGlbMF0saSkscz1iKHIsdCxfLDApLHMmMTw8Xy0xfHwocy09KDE8PF8pLTEpLHN9LGsuZGVjb2RlLl9kZWNvZGVBUlc9ZnVuY3Rpb24ocix0LGksYixfLHMpe3ZhciBoPXIudDI1NlswXSx2PXIudDI1N1swXSxFPXIudDI1OFswXSxkPXIuaXNMRT9rLl9iaW5MRTprLl9iaW5CRSx1PWgqdj09Ynx8aCp2KjEuNT09YjtpZighdSl7dis9ODt2YXIgYz1baSwwLDAsMF0sbz1uZXcgVWludDE2QXJyYXkoMzI3NzApLG49WzM4NTcsMzg1NiwzNTk5LDMzNDIsMzA4NSwyODI4LDI1NzEsMjMxNCwyMDU3LDE4MDAsMTU0MywxMjg2LDEwMjksNzcyLDc3MSw3NjgsNTE0LDUxM10sVix3LGcsVSxILHA9MCxTPWsuZGVjb2RlLl9sanBlZ19kaWZmO2ZvcihvWzBdPTE1LGc9Vj0wO1Y8MTg7VisrKWZvcih2YXIgQT0zMjc2OD4+PihuW1ZdPj4+OCksdz0wO3c8QTt3Kyspb1srK2ddPW5bVl07Zm9yKFU9aDtVLS07KWZvcihIPTA7SDx2KzE7SCs9MilpZihIPT12JiYoSD0xKSxwKz1TKHQsYyxvKSxIPHYpe3ZhciBMPXAmNDA5NTtrLmRlY29kZS5fcHV0c0YoXywoSCpoK1UpKkUsTDw8MTYtRSl9cmV0dXJufWlmKGgqdioxLjU9PWIpe2Zvcih2YXIgVj0wO1Y8YjtWKz0zKXt2YXIgRD10W2krViswXSxCPXRbaStWKzFdLGo9dFtpK1YrMl07X1tzK1ZdPUI8PDR8RD4+PjQsX1tzK1YrMV09RDw8NHxqPj4+NCxfW3MrVisyXT1qPDw0fEI+Pj40fXJldHVybn12YXIgQz1uZXcgVWludDE2QXJyYXkoMTYpLEgsVSxYLFQsUCxaLGFlLCQsdGUsVix1ZSxmZT1uZXcgVWludDhBcnJheShoKzEpO2ZvcihIPTA7SDx2O0grKyl7Zm9yKHZhciBoZT0wO2hlPGg7aGUrKylmZVtoZV09dFtpKytdO2Zvcih1ZT0wLFU9MDtVPGgtMzA7dWUrPTE2KXtmb3IoVD0yMDQ3JihYPWQucmVhZFVpbnQoZmUsdWUpKSxQPTIwNDcmWD4+PjExLFo9MTUmWD4+PjIyLGFlPTE1Jlg+Pj4yNiwkPTA7JDw0JiYxMjg8PCQ8PVQtUDskKyspO2Zvcih0ZT0zMCxWPTA7VjwxNjtWKyspVj09Wj9DW1ZdPVQ6Vj09YWU/Q1tWXT1QOihDW1ZdPSgoZC5yZWFkVXNob3J0KGZlLHVlKyh0ZT4+MykpPj4+KHRlJjcpJjEyNyk8PCQpK1AsQ1tWXT4yMDQ3JiYoQ1tWXT0yMDQ3KSx0ZSs9Nyk7Zm9yKFY9MDtWPDE2O1YrKyxVKz0yKXt2YXIgTD1DW1ZdPDwxO2suZGVjb2RlLl9wdXRzRihfLChIKmgrVSkqRSxMPDwxNi1FKX1VLT1VJjE/MTozMX19fSxrLmRlY29kZS5fZGVjb2RlTmlrb249ZnVuY3Rpb24ocix0LGksYixfLHMsaCl7dmFyIHY9W1swLDAsMSw1LDEsMSwxLDEsMSwxLDIsMCwwLDAsMCwwLDAsNSw0LDMsNiwyLDcsMSwwLDgsOSwxMSwxMCwxMl0sWzAsMCwxLDUsMSwxLDEsMSwxLDEsMiwwLDAsMCwwLDAsMCw1Nyw5MCw1NiwzOSwyMiw1LDQsMywyLDEsMCwxMSwxMiwxMl0sWzAsMCwxLDQsMiwzLDEsMiwwLDAsMCwwLDAsMCwwLDAsMCw1LDQsNiwzLDcsMiw4LDEsOSwwLDEwLDExLDEyXSxbMCwwLDEsNCwzLDEsMSwxLDEsMSwyLDAsMCwwLDAsMCwwLDUsNiw0LDcsOCwzLDksMiwxLDAsMTAsMTEsMTIsMTMsMTRdLFswLDAsMSw1LDEsMSwxLDEsMSwxLDEsMiwwLDAsMCwwLDAsOCw5Miw3NSw1OCw0MSw3LDYsNSw0LDMsMiwxLDAsMTMsMTRdLFswLDAsMSw0LDIsMiwzLDEsMiwwLDAsMCwwLDAsMCwwLDAsNyw2LDgsNSw5LDQsMTAsMywxMSwxMiwyLDAsMSwxMywxNF1dLEU9ci50MjU2WzBdLGQ9ci50MjU3WzBdLHU9ci50MjU4WzBdLGM9MCxvPTAsbj1rLmRlY29kZS5fbWFrZV9kZWNvZGVyLHc9ay5kZWNvZGUuX2dldGJpdGh1ZmYsZz10WzBdLmV4aWZJRkQubWFrZXJOb3RlLHA9Zy50MTUwP2cudDE1MDpnLnQxNDAsUz0wLEE9cFtTKytdLEw9cFtTKytdOyhBPT03M3x8TD09ODgpJiYoUys9MjExMCksQT09NzAmJihjPTIpLHU9PTE0JiYoYys9Myk7Zm9yKHZhciBEPVtbMCwwXSxbMCwwXV0sQj1yLmlzTEU/ay5fYmluTEU6ay5fYmluQkUsWD0wO1g8MjtYKyspZm9yKHZhciBqPTA7ajwyO2orKylEW1hdW2pdPUIucmVhZFNob3J0KHAsUyksUys9Mjt2YXIgQz0xPDx1JjMyNzY3LEg9MCxVPUIucmVhZFNob3J0KHAsUyk7Uys9MixVPjEmJihIPU1hdGguZmxvb3IoQy8oVS0xKSkpLEE9PTY4JiZMPT0zMiYmSD4wJiYobz1CLnJlYWRTaG9ydChwLDU2MikpO3ZhciBYLFQsUCxaLGFlLCQsdGU9WzAsMF0sVj1uKHZbY10pLHVlPVtiLDAsMCwwXTtmb3IoVD0wO1Q8ZDtUKyspZm9yKG8mJlQ9PW8mJihWPW4odltjKzFdKSksUD0wO1A8RTtQKyspe1g9dyhpLHVlLFZbMF0sViksWj1YJjE1LGFlPVg+Pj40LCQ9KHcoaSx1ZSxaLWFlLDApPDwxKSsxPDxhZT4+PjEsJCYxPDxaLTF8fCgkLT0oMTw8WiktKGFlPT0wPzE6MCkpLFA8Mj90ZVtQXT1EW1QmMV1bUF0rPSQ6dGVbUCYxXSs9JDt2YXIgZmU9TWF0aC5taW4oTWF0aC5tYXgodGVbUCYxXSwwKSwoMTw8dSktMSksaGU9KFQqRStQKSp1O2suZGVjb2RlLl9wdXRzRihzLGhlLGZlPDwxNi11KX19LGsuZGVjb2RlLl9wdXRzRj1mdW5jdGlvbihyLHQsaSl7aT1pPDw4LSh0JjcpO3ZhciBiPXQ+Pj4zO3JbYl18PWk+Pj4xNixyW2IrMV18PWk+Pj44LHJbYisyXXw9aX0say5kZWNvZGUuX2dldGJpdGh1ZmY9ZnVuY3Rpb24ocix0LGksYil7dmFyIF89MDtrLmRlY29kZS5fZ2V0X2J5dGU7dmFyIHMsaD10WzBdLHY9dFsxXSxFPXRbMl0sZD10WzNdO2lmKGk9PTB8fEU8MClyZXR1cm4gMDtmb3IoOyFkJiZFPGkmJihzPXJbaCsrXSkhPS0xJiYhKGQ9Xyk7KXY9KHY8PDgpK3MsRSs9ODtpZihzPXY8PDMyLUU+Pj4zMi1pLGI/KEUtPWJbcysxXT4+Pjgscz1iW3MrMV0mMjU1KTpFLT1pLEU8MCl0aHJvdyJlIjtyZXR1cm4gdFswXT1oLHRbMV09dix0WzJdPUUsdFszXT1kLHN9LGsuZGVjb2RlLl9tYWtlX2RlY29kZXI9ZnVuY3Rpb24ocil7dmFyIHQsaSxiLF8scyxoPVtdO2Zvcih0PTE2O3QhPTAmJiFyW3RdO3QtLSk7dmFyIHY9MTc7Zm9yKGhbMF09dCxiPWk9MTtpPD10O2krKylmb3IoXz0wO188cltpXTtfKyssKyt2KWZvcihzPTA7czwxPDx0LWk7cysrKWI8PTE8PHQmJihoW2IrK109aTw8OHxyW3ZdKTtyZXR1cm4gaH0say5kZWNvZGUuX2RlY29kZU5ld0pQRUc9ZnVuY3Rpb24ocix0LGksYixfLHMpe3ZhciBoPXIudDM0Nyx2PWg/aC5sZW5ndGg6MCxFPW5ldyBVaW50OEFycmF5KHYrYik7aWYoaCl7Zm9yKHZhciBkPTIxNix1PTIxNyxjPTAsbz0wO288di0xJiYhKGhbb109PTI1NSYmaFtvKzFdPT11KTtvKyspRVtjKytdPWhbb107dmFyIG49dFtpXSx3PXRbaSsxXTsobiE9MjU1fHx3IT1kKSYmKEVbYysrXT1uLEVbYysrXT13KTtmb3IodmFyIG89MjtvPGI7bysrKUVbYysrXT10W2krb119ZWxzZSBmb3IodmFyIG89MDtvPGI7bysrKUVbb109dFtpK29dO2lmKHIudDI2MlswXT09MzI4MDN8fHIudDI2MlswXT09MzQ4OTIpe3ZhciBnPXIudDI1OFswXSxwPWsuTG9zc2xlc3NKcGVnRGVjb2RlKEUpLFM9cC5sZW5ndGg7aWYoZz09MTYpaWYoci5pc0xFKWZvcih2YXIgbz0wO288UztvKyspX1tzKyhvPDwxKV09cFtvXSYyNTUsX1tzKyhvPDwxKSsxXT1wW29dPj4+ODtlbHNlIGZvcih2YXIgbz0wO288UztvKyspX1tzKyhvPDwxKV09cFtvXT4+PjgsX1tzKyhvPDwxKSsxXT1wW29dJjI1NTtlbHNlIGlmKGc9PTE0fHxnPT0xMilmb3IodmFyIEE9MTYtZyxvPTA7bzxTO28rKylrLmRlY29kZS5fcHV0c0YoXyxvKmcscFtvXTw8QSk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoInVuc3VwcG9ydGVkIGJpdCBkZXB0aCAiK2cpfWVsc2V7dmFyIEw9bmV3IGsuSnBlZ0RlY29kZXI7TC5wYXJzZShFKTtmb3IodmFyIEQ9TC5nZXREYXRhKEwud2lkdGgsTC5oZWlnaHQpLG89MDtvPEQubGVuZ3RoO28rKylfW3Mrb109RFtvXX1yLnQyNjJbMF09PTYmJihyLnQyNjJbMF09Mil9LGsuZGVjb2RlLl9kZWNvZGVPbGRKUEVHSW5pdD1mdW5jdGlvbihyLHQsaSxiKXt2YXIgXz0yMTYscz0yMTksaD0xOTYsdj0yMjEsRT0xOTIsZD0yMTgsdT0wLGM9MCxvLG4sdz0hMSxnLHAsUyxBPXIudDUxMyxMPUE/QVswXTowLEQ9ci50NTE0LEI9RD9EWzBdOjAsaj1yLnQzMjR8fHIudDI3M3x8QSxDPXIudDUzMCxIPTAsVT0wLFg9ci50Mjc3P3IudDI3N1swXToxLFQ9ci50NTE1O2lmKGomJihjPWpbMF0sdz1qLmxlbmd0aD4xKSwhdyl7aWYodFtpXT09MjU1JiZ0W2krMV09PV8pcmV0dXJue2pwZWdPZmZzZXQ6aX07aWYoQSE9bnVsbCYmKHRbaStMXT09MjU1JiZ0W2krTCsxXT09Xz91PWkrTDpSKCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXQgZG9lcyBub3QgcG9pbnQgdG8gU09JIiksRD09bnVsbD9SKCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGggZmllbGQgaXMgbWlzc2luZyIpOihMPj1jfHxMK0I8PWMpJiZSKCJKUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGggZmllbGQgdmFsdWUgaXMgaW52YWxpZCIpLHUhPW51bGwpKXJldHVybntqcGVnT2Zmc2V0OnV9fWlmKEMhPW51bGwmJihIPUNbMF0sVT1DWzFdKSxBIT1udWxsJiZEIT1udWxsKWlmKEI+PTImJkwrQjw9Yyl7Zm9yKHRbaStMK0ItMl09PTI1NSYmdFtpK0wrQi0xXT09Xz9vPW5ldyBVaW50OEFycmF5KEItMik6bz1uZXcgVWludDhBcnJheShCKSxnPTA7ZzxvLmxlbmd0aDtnKyspb1tnXT10W2krTCtnXTtSKCJJbmNvcnJlY3QgSlBFRyBpbnRlcmNoYW5nZSBmb3JtYXQ6IHVzaW5nIEpQRUdJbnRlcmNoYW5nZUZvcm1hdCBvZmZzZXQgdG8gZGVyaXZlIHRhYmxlcyIpfWVsc2UgUigiSlBFR0ludGVyY2hhbmdlRm9ybWF0K0pQRUdJbnRlcmNoYW5nZUZvcm1hdExlbmd0aCA+IG9mZnNldCB0byBmaXJzdCBzdHJpcCBvciB0aWxlIik7aWYobz09bnVsbCl7dmFyIFA9MCxaPVtdO1pbUCsrXT0yNTUsWltQKytdPV87dmFyIGFlPXIudDUxOTtpZihhZT09bnVsbCl0aHJvdyBuZXcgRXJyb3IoIkpQRUdRVGFibGVzIHRhZyBpcyBtaXNzaW5nIik7Zm9yKGc9MDtnPGFlLmxlbmd0aDtnKyspZm9yKFpbUCsrXT0yNTUsWltQKytdPXMsWltQKytdPTAsWltQKytdPTY3LFpbUCsrXT1nLHA9MDtwPDY0O3ArKylaW1ArK109dFtpK2FlW2ddK3BdO2ZvcihTPTA7UzwyO1MrKyl7dmFyICQ9cltTPT0wPyJ0NTIwIjoidDUyMSJdO2lmKCQ9PW51bGwpdGhyb3cgbmV3IEVycm9yKChTPT0wPyJKUEVHRENUYWJsZXMiOiJKUEVHQUNUYWJsZXMiKSsiIHRhZyBpcyBtaXNzaW5nIik7Zm9yKGc9MDtnPCQubGVuZ3RoO2crKyl7WltQKytdPTI1NSxaW1ArK109aDt2YXIgdGU9MTk7Zm9yKHA9MDtwPDE2O3ArKyl0ZSs9dFtpKyRbZ10rcF07Zm9yKFpbUCsrXT10ZT4+PjgsWltQKytdPXRlJjI1NSxaW1ArK109Z3xTPDw0LHA9MDtwPDE2O3ArKylaW1ArK109dFtpKyRbZ10rcF07Zm9yKHA9MDtwPHRlO3ArKylaW1ArK109dFtpKyRbZ10rMTYrcF19fWlmKFpbUCsrXT0yNTUsWltQKytdPUUsWltQKytdPTAsWltQKytdPTgrMypYLFpbUCsrXT04LFpbUCsrXT1yLmhlaWdodD4+PjgmMjU1LFpbUCsrXT1yLmhlaWdodCYyNTUsWltQKytdPXIud2lkdGg+Pj44JjI1NSxaW1ArK109ci53aWR0aCYyNTUsWltQKytdPVgsWD09MSlaW1ArK109MSxaW1ArK109MTcsWltQKytdPTA7ZWxzZSBmb3IoZz0wO2c8MztnKyspWltQKytdPWcrMSxaW1ArK109ZyE9MD8xNzooSCYxNSk8PDR8VSYxNSxaW1ArK109ZztUIT1udWxsJiZUWzBdIT0wJiYoWltQKytdPTI1NSxaW1ArK109dixaW1ArK109MCxaW1ArK109NCxaW1ArK109VFswXT4+PjgmMjU1LFpbUCsrXT1UWzBdJjI1NSksbz1uZXcgVWludDhBcnJheShaKX12YXIgVj0tMTtmb3IoZz0wO2c8by5sZW5ndGgtMTspe2lmKG9bZ109PTI1NSYmb1tnKzFdPT1FKXtWPWc7YnJlYWt9ZysrfWlmKFY9PS0xKXt2YXIgdWU9bmV3IFVpbnQ4QXJyYXkoby5sZW5ndGgrMTArMypYKTt1ZS5zZXQobyk7dmFyIGZlPW8ubGVuZ3RoO2lmKFY9by5sZW5ndGgsbz11ZSxvW2ZlKytdPTI1NSxvW2ZlKytdPUUsb1tmZSsrXT0wLG9bZmUrK109OCszKlgsb1tmZSsrXT04LG9bZmUrK109ci5oZWlnaHQ+Pj44JjI1NSxvW2ZlKytdPXIuaGVpZ2h0JjI1NSxvW2ZlKytdPXIud2lkdGg+Pj44JjI1NSxvW2ZlKytdPXIud2lkdGgmMjU1LG9bZmUrK109WCxYPT0xKW9bZmUrK109MSxvW2ZlKytdPTE3LG9bZmUrK109MDtlbHNlIGZvcihnPTA7ZzwzO2crKylvW2ZlKytdPWcrMSxvW2ZlKytdPWchPTA/MTc6KEgmMTUpPDw0fFUmMTUsb1tmZSsrXT1nfWlmKHRbY109PTI1NSYmdFtjKzFdPT1kKXt2YXIgaGU9dFtjKzJdPDw4fHRbYyszXTtmb3Iobj1uZXcgVWludDhBcnJheShoZSsyKSxuWzBdPXRbY10sblsxXT10W2MrMV0sblsyXT10W2MrMl0sblszXT10W2MrM10sZz0wO2c8aGUtMjtnKyspbltnKzRdPXRbYytnKzRdfWVsc2V7bj1uZXcgVWludDhBcnJheSg4KzIqWCk7dmFyIGxlPTA7aWYobltsZSsrXT0yNTUsbltsZSsrXT1kLG5bbGUrK109MCxuW2xlKytdPTYrMipYLG5bbGUrK109WCxYPT0xKW5bbGUrK109MSxuW2xlKytdPTA7ZWxzZSBmb3IoZz0wO2c8MztnKyspbltsZSsrXT1nKzEsbltsZSsrXT1nPDw0fGc7bltsZSsrXT0wLG5bbGUrK109NjMsbltsZSsrXT0wfXJldHVybntqcGVnT2Zmc2V0OmksdGFibGVzOm8sc29zTWFya2VyOm4sc29mUG9zaXRpb246Vn19LGsuZGVjb2RlLl9kZWNvZGVPbGRKUEVHPWZ1bmN0aW9uKHIsdCxpLGIsXyxzKXt2YXIgaCx2LEUsZCx1LGM9ay5kZWNvZGUuX2RlY29kZU9sZEpQRUdJbml0KHIsdCxpLGIpO2lmKGMuanBlZ09mZnNldCE9bnVsbClmb3Iodj1pK2ItYy5qcGVnT2Zmc2V0LGQ9bmV3IFVpbnQ4QXJyYXkodiksaD0wO2g8djtoKyspZFtoXT10W2MuanBlZ09mZnNldCtoXTtlbHNle2ZvcihFPWMudGFibGVzLmxlbmd0aCxkPW5ldyBVaW50OEFycmF5KEUrYy5zb3NNYXJrZXIubGVuZ3RoK2IrMiksZC5zZXQoYy50YWJsZXMpLHU9RSxkW2Muc29mUG9zaXRpb24rNV09ci5oZWlnaHQ+Pj44JjI1NSxkW2Muc29mUG9zaXRpb24rNl09ci5oZWlnaHQmMjU1LGRbYy5zb2ZQb3NpdGlvbis3XT1yLndpZHRoPj4+OCYyNTUsZFtjLnNvZlBvc2l0aW9uKzhdPXIud2lkdGgmMjU1LCh0W2ldIT0yNTV8fHRbaSsxXSE9U09TKSYmKGQuc2V0KGMuc29zTWFya2VyLHUpLHUrPXNvc01hcmtlci5sZW5ndGgpLGg9MDtoPGI7aCsrKWRbdSsrXT10W2kraF07ZFt1KytdPTI1NSxkW3UrK109RU9JfXZhciBvPW5ldyBrLkpwZWdEZWNvZGVyO28ucGFyc2UoZCk7Zm9yKHZhciBuPW8uZ2V0RGF0YShvLndpZHRoLG8uaGVpZ2h0KSxoPTA7aDxuLmxlbmd0aDtoKyspX1tzK2hdPW5baF07ci50MjYyJiZyLnQyNjJbMF09PTYmJihyLnQyNjJbMF09Mil9LGsuZGVjb2RlLl9kZWNvZGVQYWNrQml0cz1mdW5jdGlvbihyLHQsaSxiLF8pe2Zvcih2YXIgcz1uZXcgSW50OEFycmF5KHIuYnVmZmVyKSxoPW5ldyBJbnQ4QXJyYXkoYi5idWZmZXIpLHY9dCtpO3Q8djspe3ZhciBFPXNbdF07aWYodCsrLEU+PTAmJkU8MTI4KWZvcih2YXIgZD0wO2Q8RSsxO2QrKyloW19dPXNbdF0sXysrLHQrKztpZihFPj0tMTI3JiZFPDApe2Zvcih2YXIgZD0wO2Q8LUUrMTtkKyspaFtfXT1zW3RdLF8rKzt0Kyt9fX0say5kZWNvZGUuX2RlY29kZVRodW5kZXI9ZnVuY3Rpb24ocix0LGksYixfKXtmb3IodmFyIHM9WzAsMSwwLC0xXSxoPVswLDEsMiwzLDAsLTMsLTIsLTFdLHY9dCtpLEU9XyoyLGQ9MDt0PHY7KXt2YXIgdT1yW3RdLGM9dT4+PjYsbz11JjYzO2lmKHQrKyxjPT0zJiYoZD1vJjE1LGJbRT4+PjFdfD1kPDw0KigxLUUmMSksRSsrKSxjPT0wKWZvcih2YXIgbj0wO248bztuKyspYltFPj4+MV18PWQ8PDQqKDEtRSYxKSxFKys7aWYoYz09Milmb3IodmFyIG49MDtuPDI7bisrKXt2YXIgdz1vPj4+MyooMS1uKSY3O3chPTQmJihkKz1oW3ddLGJbRT4+PjFdfD1kPDw0KigxLUUmMSksRSsrKX1pZihjPT0xKWZvcih2YXIgbj0wO248MztuKyspe3ZhciB3PW8+Pj4yKigyLW4pJjM7dyE9MiYmKGQrPXNbd10sYltFPj4+MV18PWQ8PDQqKDEtRSYxKSxFKyspfX19LGsuZGVjb2RlLl9kbWFwPXsxOjAsIjAxMSI6MSwiMDAwMDExIjoyLCIwMDAwMDExIjozLCIwMTAiOi0xLCIwMDAwMTAiOi0yLCIwMDAwMDEwIjotM30say5kZWNvZGUuX2xlbnM9ZnVuY3Rpb24oKXt2YXIgcj1mdW5jdGlvbihFLGQsdSxjKXtmb3IodmFyIG89MDtvPGQubGVuZ3RoO28rKylFW2Rbb11dPXUrbypjfSx0PSIwMDExMDEwMSwwMDAxMTEsMDExMSwxMDAwLDEwMTEsMTEwMCwxMTEwLDExMTEsMTAwMTEsMTAxMDAsMDAxMTEsMDEwMDAsMDAxMDAwLDAwMDAxMSwxMTAxMDAsMTEwMTAxLDEwMTAxMCwxMDEwMTEsMDEwMDExMSwwMDAxMTAwLDAwMDEwMDAsMDAxMDExMSwwMDAwMDExLDAwMDAxMDAsMDEwMTAwMCwwMTAxMDExLDAwMTAwMTEsMDEwMDEwMCwwMDExMDAwLDAwMDAwMDEwLDAwMDAwMDExLDAwMDExMDEwLDAwMDExMDExLDAwMDEwMDEwLDAwMDEwMDExLDAwMDEwMTAwLDAwMDEwMTAxLDAwMDEwMTEwLDAwMDEwMTExLDAwMTAxMDAwLDAwMTAxMDAxLDAwMTAxMDEwLDAwMTAxMDExLDAwMTAxMTAwLDAwMTAxMTAxLDAwMDAwMTAwLDAwMDAwMTAxLDAwMDAxMDEwLDAwMDAxMDExLDAxMDEwMDEwLDAxMDEwMDExLDAxMDEwMTAwLDAxMDEwMTAxLDAwMTAwMTAwLDAwMTAwMTAxLDAxMDExMDAwLDAxMDExMDAxLDAxMDExMDEwLDAxMDExMDExLDAxMDAxMDEwLDAxMDAxMDExLDAwMTEwMDEwLDAwMTEwMDExLDAwMTEwMTAwIixpPSIwMDAwMTEwMTExLDAxMCwxMSwxMCwwMTEsMDAxMSwwMDEwLDAwMDExLDAwMDEwMSwwMDAxMDAsMDAwMDEwMCwwMDAwMTAxLDAwMDAxMTEsMDAwMDAxMDAsMDAwMDAxMTEsMDAwMDExMDAwLDAwMDAwMTAxMTEsMDAwMDAxMTAwMCwwMDAwMDAxMDAwLDAwMDAxMTAwMTExLDAwMDAxMTAxMDAwLDAwMDAxMTAxMTAwLDAwMDAwMTEwMTExLDAwMDAwMTAxMDAwLDAwMDAwMDEwMTExLDAwMDAwMDExMDAwLDAwMDAxMTAwMTAxMCwwMDAwMTEwMDEwMTEsMDAwMDExMDAxMTAwLDAwMDAxMTAwMTEwMSwwMDAwMDExMDEwMDAsMDAwMDAxMTAxMDAxLDAwMDAwMTEwMTAxMCwwMDAwMDExMDEwMTEsMDAwMDExMDEwMDEwLDAwMDAxMTAxMDAxMSwwMDAwMTEwMTAxMDAsMDAwMDExMDEwMTAxLDAwMDAxMTAxMDExMCwwMDAwMTEwMTAxMTEsMDAwMDAxMTAxMTAwLDAwMDAwMTEwMTEwMSwwMDAwMTEwMTEwMTAsMDAwMDExMDExMDExLDAwMDAwMTAxMDEwMCwwMDAwMDEwMTAxMDEsMDAwMDAxMDEwMTEwLDAwMDAwMTAxMDExMSwwMDAwMDExMDAxMDAsMDAwMDAxMTAwMTAxLDAwMDAwMTAxMDAxMCwwMDAwMDEwMTAwMTEsMDAwMDAwMTAwMTAwLDAwMDAwMDExMDExMSwwMDAwMDAxMTEwMDAsMDAwMDAwMTAwMTExLDAwMDAwMDEwMTAwMCwwMDAwMDEwMTEwMDAsMDAwMDAxMDExMDAxLDAwMDAwMDEwMTAxMSwwMDAwMDAxMDExMDAsMDAwMDAxMDExMDEwLDAwMDAwMTEwMDExMCwwMDAwMDExMDAxMTEiLGI9IjExMDExLDEwMDEwLDAxMDExMSwwMTEwMTExLDAwMTEwMTEwLDAwMTEwMTExLDAxMTAwMTAwLDAxMTAwMTAxLDAxMTAxMDAwLDAxMTAwMTExLDAxMTAwMTEwMCwwMTEwMDExMDEsMDExMDEwMDEwLDAxMTAxMDAxMSwwMTEwMTAxMDAsMDExMDEwMTAxLDAxMTAxMDExMCwwMTEwMTAxMTEsMDExMDExMDAwLDAxMTAxMTAwMSwwMTEwMTEwMTAsMDExMDExMDExLDAxMDAxMTAwMCwwMTAwMTEwMDEsMDEwMDExMDEwLDAxMTAwMCwwMTAwMTEwMTEiLF89IjAwMDAwMDExMTEsMDAwMDExMDAxMDAwLDAwMDAxMTAwMTAwMSwwMDAwMDEwMTEwMTEsMDAwMDAwMTEwMDExLDAwMDAwMDExMDEwMCwwMDAwMDAxMTAxMDEsMDAwMDAwMTEwMTEwMCwwMDAwMDAxMTAxMTAxLDAwMDAwMDEwMDEwMTAsMDAwMDAwMTAwMTAxMSwwMDAwMDAxMDAxMTAwLDAwMDAwMDEwMDExMDEsMDAwMDAwMTExMDAxMCwwMDAwMDAxMTEwMDExLDAwMDAwMDExMTAxMDAsMDAwMDAwMTExMDEwMSwwMDAwMDAxMTEwMTEwLDAwMDAwMDExMTAxMTEsMDAwMDAwMTAxMDAxMCwwMDAwMDAxMDEwMDExLDAwMDAwMDEwMTAxMDAsMDAwMDAwMTAxMDEwMSwwMDAwMDAxMDExMDEwLDAwMDAwMDEwMTEwMTEsMDAwMDAwMTEwMDEwMCwwMDAwMDAxMTAwMTAxIixzPSIwMDAwMDAwMTAwMCwwMDAwMDAwMTEwMCwwMDAwMDAwMTEwMSwwMDAwMDAwMTAwMTAsMDAwMDAwMDEwMDExLDAwMDAwMDAxMDEwMCwwMDAwMDAwMTAxMDEsMDAwMDAwMDEwMTEwLDAwMDAwMDAxMDExMSwwMDAwMDAwMTExMDAsMDAwMDAwMDExMTAxLDAwMDAwMDAxMTExMCwwMDAwMDAwMTExMTEiO3Q9dC5zcGxpdCgiLCIpLGk9aS5zcGxpdCgiLCIpLGI9Yi5zcGxpdCgiLCIpLF89Xy5zcGxpdCgiLCIpLHM9cy5zcGxpdCgiLCIpO3ZhciBoPXt9LHY9e307cmV0dXJuIHIoaCx0LDAsMSkscihoLGIsNjQsNjQpLHIoaCxzLDE3OTIsNjQpLHIodixpLDAsMSkscih2LF8sNjQsNjQpLHIodixzLDE3OTIsNjQpLFtoLHZdfSgpLGsuZGVjb2RlLl9kZWNvZGVHND1mdW5jdGlvbihyLHQsaSxiLF8scyxoKXtmb3IodmFyIHY9ay5kZWNvZGUsRT10PDwzLGQ9MCx1PSIiLGM9W10sbz1bXSxuPTA7bjxzO24rKylvLnB1c2goMCk7bz12Ll9tYWtlRGlmZihvKTtmb3IodmFyIHc9MCxnPTAscD0wLFM9MCxBPTAsTD0wLEQ9IiIsQj0wLGo9TWF0aC5jZWlsKHMvOCkqODtFPj4+Mzx0K2k7KXtwPXYuX2ZpbmREaWZmKG8sdysodz09MD8wOjEpLDEtQSksUz12Ll9maW5kRGlmZihvLHAsQSk7dmFyIEM9MDtpZihoPT0xJiYoQz1yW0U+Pj4zXT4+PjctKEUmNykmMSksaD09MiYmKEM9cltFPj4+M10+Pj4oRSY3KSYxKSxFKyssdSs9QyxEPT0iSCIpe2lmKHYuX2xlbnNbQV1bdV0hPW51bGwpe3ZhciBIPXYuX2xlbnNbQV1bdV07dT0iIixkKz1ILEg8NjQmJih2Ll9hZGROdGltZXMoYyxkLEEpLHcrPWQsQT0xLUEsZD0wLEItLSxCPT0wJiYoRD0iIikpfX1lbHNlIHU9PSIwMDAxIiYmKHU9IiIsdi5fYWRkTnRpbWVzKGMsUy13LEEpLHc9UyksdT09IjAwMSImJih1PSIiLEQ9IkgiLEI9Miksdi5fZG1hcFt1XSE9bnVsbCYmKGc9cCt2Ll9kbWFwW3VdLHYuX2FkZE50aW1lcyhjLGctdyxBKSx3PWcsdT0iIixBPTEtQSk7Yy5sZW5ndGg9PXMmJkQ9PSIiJiYodi5fd3JpdGVCaXRzKGMsYixfKjgrTCpqKSxBPTAsTCsrLHc9MCxvPXYuX21ha2VEaWZmKGMpLGM9W10pfX0say5kZWNvZGUuX2ZpbmREaWZmPWZ1bmN0aW9uKHIsdCxpKXtmb3IodmFyIGI9MDtiPHIubGVuZ3RoO2IrPTIpaWYocltiXT49dCYmcltiKzFdPT1pKXJldHVybiByW2JdfSxrLmRlY29kZS5fbWFrZURpZmY9ZnVuY3Rpb24ocil7dmFyIHQ9W107clswXT09MSYmdC5wdXNoKDAsMSk7Zm9yKHZhciBpPTE7aTxyLmxlbmd0aDtpKyspcltpLTFdIT1yW2ldJiZ0LnB1c2goaSxyW2ldKTtyZXR1cm4gdC5wdXNoKHIubGVuZ3RoLDAsci5sZW5ndGgsMSksdH0say5kZWNvZGUuX2RlY29kZUczPWZ1bmN0aW9uKHIsdCxpLGIsXyxzLGgpe2Zvcih2YXIgdj1rLmRlY29kZSxFPXQ8PDMsZD0wLHU9IiIsYz1bXSxvPVtdLG49MDtuPHM7bisrKWMucHVzaCgwKTtmb3IodmFyIHc9MCxnPTAscD0wLFM9MCxBPTAsTD0tMSxEPSIiLEI9MCxqPSExLEM9TWF0aC5jZWlsKHMvOCkqODtFPj4+Mzx0K2k7KXtwPXYuX2ZpbmREaWZmKG8sdysodz09MD8wOjEpLDEtQSksUz12Ll9maW5kRGlmZihvLHAsQSk7dmFyIEg9MDtpZihoPT0xJiYoSD1yW0U+Pj4zXT4+PjctKEUmNykmMSksaD09MiYmKEg9cltFPj4+M10+Pj4oRSY3KSYxKSxFKyssdSs9SCxqKXtpZih2Ll9sZW5zW0FdW3VdIT1udWxsKXt2YXIgVT12Ll9sZW5zW0FdW3VdO3U9IiIsZCs9VSxVPDY0JiYodi5fYWRkTnRpbWVzKGMsZCxBKSxBPTEtQSxkPTApfX1lbHNlIGlmKEQ9PSJIIil7aWYodi5fbGVuc1tBXVt1XSE9bnVsbCl7dmFyIFU9di5fbGVuc1tBXVt1XTt1PSIiLGQrPVUsVTw2NCYmKHYuX2FkZE50aW1lcyhjLGQsQSksdys9ZCxBPTEtQSxkPTAsQi0tLEI9PTAmJihEPSIiKSl9fWVsc2UgdT09IjAwMDEiJiYodT0iIix2Ll9hZGROdGltZXMoYyxTLXcsQSksdz1TKSx1PT0iMDAxIiYmKHU9IiIsRD0iSCIsQj0yKSx2Ll9kbWFwW3VdIT1udWxsJiYoZz1wK3YuX2RtYXBbdV0sdi5fYWRkTnRpbWVzKGMsZy13LEEpLHc9Zyx1PSIiLEE9MS1BKTt1LmVuZHNXaXRoKCIwMDAwMDAwMDAwMDEiKSYmKEw+PTAmJnYuX3dyaXRlQml0cyhjLGIsXyo4K0wqQyksaD09MSYmKGo9KHJbRT4+PjNdPj4+Ny0oRSY3KSYxKT09MSksaD09MiYmKGo9KHJbRT4+PjNdPj4+KEUmNykmMSk9PTEpLEUrKyx2Ll9kZWNvZGVHMy5hbGxvdzJEPT1udWxsJiYodi5fZGVjb2RlRzMuYWxsb3cyRD1qKSx2Ll9kZWNvZGVHMy5hbGxvdzJEfHwoaj0hMCxFLS0pLHU9IiIsQT0wLEwrKyx3PTAsbz12Ll9tYWtlRGlmZihjKSxjPVtdKX1jLmxlbmd0aD09cyYmdi5fd3JpdGVCaXRzKGMsYixfKjgrTCpDKX0say5kZWNvZGUuX2FkZE50aW1lcz1mdW5jdGlvbihyLHQsaSl7Zm9yKHZhciBiPTA7Yjx0O2IrKylyLnB1c2goaSl9LGsuZGVjb2RlLl93cml0ZUJpdHM9ZnVuY3Rpb24ocix0LGkpe2Zvcih2YXIgYj0wO2I8ci5sZW5ndGg7YisrKXRbaStiPj4+M118PXJbYl08PDctKGkrYiY3KX0say5kZWNvZGUuX2RlY29kZUxaVz1mdW5jdGlvbihyLHQsaSxiKXtpZihrLmRlY29kZS5fbHp3VGFiPT1udWxsKXtmb3IodmFyIF89bmV3IFVpbnQzMkFycmF5KDY1NTM1KSxzPW5ldyBVaW50MTZBcnJheSg2NTUzNSksdT1uZXcgVWludDhBcnJheSgyZTYpLGg9MDtoPDI1NjtoKyspdVtoPDwyXT1oLF9baF09aDw8MixzW2hdPTE7ay5kZWNvZGUuX2x6d1RhYj1bXyxzLHVdfWZvcih2YXIgdj1rLmRlY29kZS5fY29weURhdGEsRT1rLmRlY29kZS5fbHp3VGFiWzBdLGQ9ay5kZWNvZGUuX2x6d1RhYlsxXSx1PWsuZGVjb2RlLl9sendUYWJbMl0sYz0yNTgsbz0xMDMyLG49OSx3PXQ8PDMsZz0yNTYscD0yNTcsUz0wLEE9MCxMPTA7Uz1yW3c+Pj4zXTw8MTZ8clt3Kzg+Pj4zXTw8OHxyW3crMTY+Pj4zXSxBPVM+PjI0LSh3JjcpLW4mKDE8PG4pLTEsdys9bixBIT1wOyl7aWYoQT09Zyl7aWYobj05LGM9MjU4LG89MTAzMixTPXJbdz4+PjNdPDwxNnxyW3crOD4+PjNdPDw4fHJbdysxNj4+PjNdLEE9Uz4+MjQtKHcmNyktbiYoMTw8biktMSx3Kz1uLEE9PXApYnJlYWs7aVtiXT1BLGIrK31lbHNlIGlmKEE8Yyl7dmFyIEQ9RVtBXSxCPWRbQV07aWYodih1LEQsaSxiLEIpLGIrPUIsTD49YylFW2NdPW8sdVtFW2NdXT1EWzBdLGRbY109MSxvPW8rMSszJi00LGMrKztlbHNle0VbY109bzt2YXIgaj1FW0xdLEM9ZFtMXTt2KHUsaix1LG8sQyksdVtvK0NdPXVbRF0sQysrLGRbY109QyxjKyssbz1vK0MrMyYtNH1jKzE9PTE8PG4mJm4rK31lbHNle2lmKEw+PWMpRVtjXT1vLGRbY109MCxjKys7ZWxzZXtFW2NdPW87dmFyIGo9RVtMXSxDPWRbTF07dih1LGosdSxvLEMpLHVbbytDXT11W29dLEMrKyxkW2NdPUMsYysrLHYodSxvLGksYixDKSxiKz1DLG89bytDKzMmLTR9YysxPT0xPDxuJiZuKyt9TD1BfX0say5kZWNvZGUuX2NvcHlEYXRhPWZ1bmN0aW9uKHIsdCxpLGIsXyl7Zm9yKHZhciBzPTA7czxfO3MrPTQpaVtiK3NdPXJbdCtzXSxpW2IrcysxXT1yW3QrcysxXSxpW2IrcysyXT1yW3QrcysyXSxpW2IrcyszXT1yW3QrcyszXX0say50YWdzPXt9LGsudHR5cGVzPXsyNTY6MywyNTc6MywyNTg6MywyNTk6MywyNjI6MywyNzM6NCwyNzQ6MywyNzc6MywyNzg6NCwyNzk6NCwyODI6NSwyODM6NSwyODQ6MywyODY6NSwyODc6NSwyOTY6MywzMDU6MiwzMDY6MiwzMzg6Myw1MTM6NCw1MTQ6NCwzNDY2NTo0fSxrLl9yZWFkSUZEPWZ1bmN0aW9uKHIsdCxpLGIsXyxzKXt2YXIgaD1yLnJlYWRVc2hvcnQodCxpKTtpKz0yO3ZhciB2PXt9O2IucHVzaCh2KSxzJiZSKCIgICAiLnJlcGVhdChfKSxiLmxlbmd0aC0xLCI+Pj4tLS0tLS0tLS0tLS0tLS0tIik7Zm9yKHZhciBFPTA7RTxoO0UrKyl7dmFyIGQ9ci5yZWFkVXNob3J0KHQsaSk7aSs9Mjt2YXIgdT1yLnJlYWRVc2hvcnQodCxpKTtpKz0yO3ZhciBjPXIucmVhZFVpbnQodCxpKTtpKz00O3ZhciBvPXIucmVhZFVpbnQodCxpKTtpKz00O3ZhciBuPVtdO2lmKCh1PT0xfHx1PT03KSYmKG49bmV3IFVpbnQ4QXJyYXkodC5idWZmZXIsYzw1P2ktNDpvLGMpKSx1PT0yKXt2YXIgdz1jPDU/aS00Om8sZz10W3ddO2c8MTI4P24ucHVzaChyLnJlYWRBU0NJSSh0LHcsYy0xKSk6bj1uZXcgVWludDhBcnJheSh0LmJ1ZmZlcix3LGMtMSl9aWYodT09Mylmb3IodmFyIHA9MDtwPGM7cCsrKW4ucHVzaChyLnJlYWRVc2hvcnQodCwoYzwzP2ktNDpvKSsyKnApKTtpZih1PT00KWZvcih2YXIgcD0wO3A8YztwKyspbi5wdXNoKHIucmVhZFVpbnQodCwoYzwyP2ktNDpvKSs0KnApKTtpZih1PT01KWZvcih2YXIgcD0wO3A8YztwKyspbi5wdXNoKHIucmVhZFVpbnQodCxvK3AqOCkvci5yZWFkVWludCh0LG8rcCo4KzQpKTtpZih1PT04KWZvcih2YXIgcD0wO3A8YztwKyspbi5wdXNoKHIucmVhZFNob3J0KHQsKGM8Mz9pLTQ6bykrMipwKSk7aWYodT09OSlmb3IodmFyIHA9MDtwPGM7cCsrKW4ucHVzaChyLnJlYWRJbnQodCwoYzwyP2ktNDpvKSs0KnApKTtpZih1PT0xMClmb3IodmFyIHA9MDtwPGM7cCsrKW4ucHVzaChyLnJlYWRJbnQodCxvK3AqOCkvci5yZWFkSW50KHQsbytwKjgrNCkpO2lmKHU9PTExKWZvcih2YXIgcD0wO3A8YztwKyspbi5wdXNoKHIucmVhZEZsb2F0KHQsbytwKjQpKTtpZih1PT0xMilmb3IodmFyIHA9MDtwPGM7cCsrKW4ucHVzaChyLnJlYWREb3VibGUodCxvK3AqOCkpO2lmKHZbInQiK2RdPW4sYyE9MCYmbi5sZW5ndGg9PTAmJlIoInVua25vd24gVElGRiB0YWcgdHlwZTogIix1LCJudW06IixjKSxzJiZSKCIgICAiLnJlcGVhdChfKSxkLHUsay50YWdzW2RdLG4pLCEoZD09MzMwJiZ2LnQyNzImJnYudDI3MlswXT09IkRTTFItQTEwMCIpKXtpZihkPT0zMzB8fGQ9PTM0NjY1fHxkPT01MDc0MCYmci5yZWFkVXNob3J0KHQsci5yZWFkVWludChuLDApKTwzMDApe2Zvcih2YXIgUz1kPT01MDc0MD9bci5yZWFkVWludChuLDApXTpuLEE9W10scD0wO3A8Uy5sZW5ndGg7cCsrKWsuX3JlYWRJRkQocix0LFNbcF0sQSxfKzEscyk7ZD09MzMwJiYodi5zdWJJRkQ9QSksZD09MzQ2NjUmJih2LmV4aWZJRkQ9QVswXSksZD09NTA3NDAmJih2LmRuZ1BydnQ9QVswXSl9fWlmKGQ9PTM3NTAwKXt2YXIgTD1uO2lmKHIucmVhZEFTQ0lJKEwsMCw1KT09Ik5pa29uIil2Lm1ha2VyTm90ZT1rLmRlY29kZShMLnNsaWNlKDEwKS5idWZmZXIpWzBdO2Vsc2UgaWYoci5yZWFkVXNob3J0KHQsbyk8MzAwKXt2YXIgRD1bXTtrLl9yZWFkSUZEKHIsdCxvLEQsXysxLHMpLHYubWFrZXJOb3RlPURbMF19fX1yZXR1cm4gcyYmUigiICAgIi5yZXBlYXQoXyksIjw8PC0tLS0tLS0tLS0tLS0tLSIpLGl9LGsuX3dyaXRlSUZEPWZ1bmN0aW9uKHIsdCxpLGIpe3ZhciBfPU9iamVjdC5rZXlzKGIpO3Iud3JpdGVVc2hvcnQodCxpLF8ubGVuZ3RoKSxpKz0yO2Zvcih2YXIgcz1pK18ubGVuZ3RoKjEyKzQsaD0wO2g8Xy5sZW5ndGg7aCsrKXt2YXIgdj1fW2hdLEU9cGFyc2VJbnQodi5zbGljZSgxKSksZD1rLnR0eXBlc1tFXTtpZihkPT1udWxsKXRocm93IG5ldyBFcnJvcigidW5rbm93biB0eXBlIG9mIHRhZzogIitFKTt2YXIgdT1iW3ZdO2Q9PTImJih1PXVbMF0rIlwwIik7dmFyIGM9dS5sZW5ndGg7ci53cml0ZVVzaG9ydCh0LGksRSksaSs9MixyLndyaXRlVXNob3J0KHQsaSxkKSxpKz0yLHIud3JpdGVVaW50KHQsaSxjKSxpKz00O3ZhciBvPVstMSwxLDEsMiw0LDgsMCwwLDAsMCwwLDAsOF1bZF0qYyxuPWk7aWYobz40JiYoci53cml0ZVVpbnQodCxpLHMpLG49cyksZD09MiYmci53cml0ZUFTQ0lJKHQsbix1KSxkPT0zKWZvcih2YXIgdz0wO3c8Yzt3Kyspci53cml0ZVVzaG9ydCh0LG4rMip3LHVbd10pO2lmKGQ9PTQpZm9yKHZhciB3PTA7dzxjO3crKylyLndyaXRlVWludCh0LG4rNCp3LHVbd10pO2lmKGQ9PTUpZm9yKHZhciB3PTA7dzxjO3crKylyLndyaXRlVWludCh0LG4rOCp3LE1hdGgucm91bmQodVt3XSoxZTQpKSxyLndyaXRlVWludCh0LG4rOCp3KzQsMWU0KTtpZihkPT0xMilmb3IodmFyIHc9MDt3PGM7dysrKXIud3JpdGVEb3VibGUodCxuKzgqdyx1W3ddKTtvPjQmJihvKz1vJjEscys9byksaSs9NH1yZXR1cm5baSxzXX0say50b1JHQkE4PWZ1bmN0aW9uKHIpe3ZhciB0PXIud2lkdGgsaT1yLmhlaWdodCxiPXQqaSxfPWIqNCxzPXIuZGF0YSxoPW5ldyBVaW50OEFycmF5KGIqNCksdj1yLnQyNjI/ci50MjYyWzBdOjIsRT1yLnQyNTg/TWF0aC5taW4oMzIsci50MjU4WzBdKToxO2lmKHY9PTApZm9yKHZhciBkPU1hdGguY2VpbChFKnQvOCksdT0wO3U8aTt1Kyspe3ZhciBjPXUqZCxvPXUqdDtpZihFPT0xKWZvcih2YXIgbj0wO248dDtuKyspe3ZhciB3PW8rbjw8MixnPXNbYysobj4+MyldPj43LShuJjcpJjE7aFt3XT1oW3crMV09aFt3KzJdPSgxLWcpKjI1NSxoW3crM109MjU1fWlmKEU9PTQpZm9yKHZhciBuPTA7bjx0O24rKyl7dmFyIHc9bytuPDwyLGc9c1tjKyhuPj4xKV0+PjQtNCoobiYxKSYxNTtoW3ddPWhbdysxXT1oW3crMl09KDE1LWcpKjE3LGhbdyszXT0yNTV9aWYoRT09OClmb3IodmFyIG49MDtuPHQ7bisrKXt2YXIgdz1vK248PDIsZz1zW2Mrbl07aFt3XT1oW3crMV09aFt3KzJdPTI1NS1nLGhbdyszXT0yNTV9fWVsc2UgaWYodj09MSlmb3IodmFyIGQ9TWF0aC5jZWlsKEUqdC84KSx1PTA7dTxpO3UrKyl7dmFyIGM9dSpkLG89dSp0O2lmKEU9PTEpZm9yKHZhciBuPTA7bjx0O24rKyl7dmFyIHc9bytuPDwyLGc9c1tjKyhuPj4zKV0+PjctKG4mNykmMTtoW3ddPWhbdysxXT1oW3crMl09ZyoyNTUsaFt3KzNdPTI1NX1pZihFPT0yKWZvcih2YXIgbj0wO248dDtuKyspe3ZhciB3PW8rbjw8MixnPXNbYysobj4+MildPj42LTIqKG4mMykmMztoW3ddPWhbdysxXT1oW3crMl09Zyo4NSxoW3crM109MjU1fWlmKEU9PTgpZm9yKHZhciBuPTA7bjx0O24rKyl7dmFyIHc9bytuPDwyLGc9c1tjK25dO2hbd109aFt3KzFdPWhbdysyXT1nLGhbdyszXT0yNTV9aWYoRT09MTYpZm9yKHZhciBuPTA7bjx0O24rKyl7dmFyIHc9bytuPDwyLGc9c1tjKygyKm4rMSldO2hbd109aFt3KzFdPWhbdysyXT1NYXRoLm1pbigyNTUsZyksaFt3KzNdPTI1NX19ZWxzZSBpZih2PT0yKXt2YXIgcD1yLnQyNTg/ci50MjU4Lmxlbmd0aDozO2lmKEU9PTgpe2lmKHA9PTQpZm9yKHZhciBuPTA7bjxfO24rKyloW25dPXNbbl07aWYocD09Mylmb3IodmFyIG49MDtuPGI7bisrKXt2YXIgdz1uPDwyLFM9biozO2hbd109c1tTXSxoW3crMV09c1tTKzFdLGhbdysyXT1zW1MrMl0saFt3KzNdPTI1NX19ZWxzZXtpZihwPT00KWZvcih2YXIgbj0wO248YjtuKyspe3ZhciB3PW48PDIsUz1uKjgrMTtoW3ddPXNbU10saFt3KzFdPXNbUysyXSxoW3crMl09c1tTKzRdLGhbdyszXT1zW1MrNl19aWYocD09Mylmb3IodmFyIG49MDtuPGI7bisrKXt2YXIgdz1uPDwyLFM9bio2KzE7aFt3XT1zW1NdLGhbdysxXT1zW1MrMl0saFt3KzJdPXNbUys0XSxoW3crM109MjU1fX19ZWxzZSBpZih2PT0zKWZvcih2YXIgQT1yLnQzMjAsbj0wO248YjtuKyspe3ZhciB3PW48PDIsTD1zW25dO2hbd109QVtMXT4+OCxoW3crMV09QVsyNTYrTF0+PjgsaFt3KzJdPUFbNTEyK0xdPj44LGhbdyszXT0yNTV9ZWxzZSBpZih2PT01KWZvcih2YXIgcD1yLnQyNTg/ci50MjU4Lmxlbmd0aDo0LEQ9cD40PzE6MCxuPTA7bjxiO24rKyl7dmFyIHc9bjw8MixCPW4qcCxqPTI1NS1zW0JdLEM9MjU1LXNbQisxXSxIPTI1NS1zW0IrMl0sVT0oMjU1LXNbQiszXSkqKDEvMjU1KTtoW3ddPX5+KGoqVSsuNSksaFt3KzFdPX5+KEMqVSsuNSksaFt3KzJdPX5+KEgqVSsuNSksaFt3KzNdPTI1NSooMS1EKStzW0IrNF0qRH1lbHNlIFIoIlVua25vd24gUGhvdG9tZXRyaWMgaW50ZXJwcmV0YXRpb246ICIrdik7cmV0dXJuIGh9LGsucmVwbGFjZUlNRz1mdW5jdGlvbihyKXtyPT1udWxsJiYocj1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW1nIikpO2Zvcih2YXIgdD1bInRpZiIsInRpZmYiLCJkbmciLCJjcjIiLCJuZWYiXSxpPTA7aTxyLmxlbmd0aDtpKyspe3ZhciBiPXJbaV0sXz1iLmdldEF0dHJpYnV0ZSgic3JjIik7aWYoXyE9bnVsbCl7dmFyIHM9Xy5zcGxpdCgiLiIpLnBvcCgpLnRvTG93ZXJDYXNlKCk7aWYodC5pbmRleE9mKHMpIT0tMSl7dmFyIGg9bmV3IFhNTEh0dHBSZXF1ZXN0O2suX3hocnMucHVzaChoKSxrLl9pbWdzLnB1c2goYiksaC5vcGVuKCJHRVQiLF8pLGgucmVzcG9uc2VUeXBlPSJhcnJheWJ1ZmZlciIsaC5vbmxvYWQ9ay5faW1nTG9hZGVkLGguc2VuZCgpfX19fSxrLl94aHJzPVtdLGsuX2ltZ3M9W10say5faW1nTG9hZGVkPWZ1bmN0aW9uKHIpe3ZhciB0PXIudGFyZ2V0LnJlc3BvbnNlLGk9ay5kZWNvZGUodCksYj1pLF89MCxzPWJbMF07aVswXS5zdWJJRkQmJihiPWIuY29uY2F0KGlbMF0uc3ViSUZEKSk7Zm9yKHZhciBoPTA7aDxiLmxlbmd0aDtoKyspe3ZhciBvPWJbaF07aWYoIShvLnQyNTg9PW51bGx8fG8udDI1OC5sZW5ndGg8Mykpe3ZhciB2PW8udDI1NipvLnQyNTc7dj5fJiYoXz12LHM9byl9fWsuZGVjb2RlSW1hZ2UodCxzLGkpO3ZhciBFPWsudG9SR0JBOChzKSxkPXMud2lkdGgsdT1zLmhlaWdodCxjPWsuX3hocnMuaW5kZXhPZihyLnRhcmdldCksbz1rLl9pbWdzW2NdO2suX3hocnMuc3BsaWNlKGMsMSksay5faW1ncy5zcGxpY2UoYywxKTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTtuLndpZHRoPWQsbi5oZWlnaHQ9dTtmb3IodmFyIHc9bi5nZXRDb250ZXh0KCIyZCIpLGc9dy5jcmVhdGVJbWFnZURhdGEoZCx1KSxoPTA7aDxFLmxlbmd0aDtoKyspZy5kYXRhW2hdPUVbaF07dy5wdXRJbWFnZURhdGEoZywwLDApLG8uc2V0QXR0cmlidXRlKCJzcmMiLG4udG9EYXRhVVJMKCkpfSxrLl9iaW5CRT17bmV4dFplcm86ZnVuY3Rpb24ocix0KXtmb3IoO3JbdF0hPTA7KXQrKztyZXR1cm4gdH0scmVhZFVzaG9ydDpmdW5jdGlvbihyLHQpe3JldHVybiByW3RdPDw4fHJbdCsxXX0scmVhZFNob3J0OmZ1bmN0aW9uKHIsdCl7dmFyIGk9ay5fYmluQkUudWk4O3JldHVybiBpWzBdPXJbdCsxXSxpWzFdPXJbdCswXSxrLl9iaW5CRS5pMTZbMF19LHJlYWRJbnQ6ZnVuY3Rpb24ocix0KXt2YXIgaT1rLl9iaW5CRS51aTg7cmV0dXJuIGlbMF09clt0KzNdLGlbMV09clt0KzJdLGlbMl09clt0KzFdLGlbM109clt0KzBdLGsuX2JpbkJFLmkzMlswXX0scmVhZFVpbnQ6ZnVuY3Rpb24ocix0KXt2YXIgaT1rLl9iaW5CRS51aTg7cmV0dXJuIGlbMF09clt0KzNdLGlbMV09clt0KzJdLGlbMl09clt0KzFdLGlbM109clt0KzBdLGsuX2JpbkJFLnVpMzJbMF19LHJlYWRBU0NJSTpmdW5jdGlvbihyLHQsaSl7Zm9yKHZhciBiPSIiLF89MDtfPGk7XysrKWIrPVN0cmluZy5mcm9tQ2hhckNvZGUoclt0K19dKTtyZXR1cm4gYn0scmVhZEZsb2F0OmZ1bmN0aW9uKHIsdCl7Zm9yKHZhciBpPWsuX2JpbkJFLnVpOCxiPTA7Yjw0O2IrKylpW2JdPXJbdCszLWJdO3JldHVybiBrLl9iaW5CRS5mbDMyWzBdfSxyZWFkRG91YmxlOmZ1bmN0aW9uKHIsdCl7Zm9yKHZhciBpPWsuX2JpbkJFLnVpOCxiPTA7Yjw4O2IrKylpW2JdPXJbdCs3LWJdO3JldHVybiBrLl9iaW5CRS5mbDY0WzBdfSx3cml0ZVVzaG9ydDpmdW5jdGlvbihyLHQsaSl7clt0XT1pPj44JjI1NSxyW3QrMV09aSYyNTV9LHdyaXRlVWludDpmdW5jdGlvbihyLHQsaSl7clt0XT1pPj4yNCYyNTUsclt0KzFdPWk+PjE2JjI1NSxyW3QrMl09aT4+OCYyNTUsclt0KzNdPWk+PjAmMjU1fSx3cml0ZUFTQ0lJOmZ1bmN0aW9uKHIsdCxpKXtmb3IodmFyIGI9MDtiPGkubGVuZ3RoO2IrKylyW3QrYl09aS5jaGFyQ29kZUF0KGIpfSx3cml0ZURvdWJsZTpmdW5jdGlvbihyLHQsaSl7ay5fYmluQkUuZmw2NFswXT1pO2Zvcih2YXIgYj0wO2I8ODtiKyspclt0K2JdPWsuX2JpbkJFLnVpOFs3LWJdfX0say5fYmluQkUudWk4PW5ldyBVaW50OEFycmF5KDgpLGsuX2JpbkJFLmkxNj1uZXcgSW50MTZBcnJheShrLl9iaW5CRS51aTguYnVmZmVyKSxrLl9iaW5CRS5pMzI9bmV3IEludDMyQXJyYXkoay5fYmluQkUudWk4LmJ1ZmZlciksay5fYmluQkUudWkzMj1uZXcgVWludDMyQXJyYXkoay5fYmluQkUudWk4LmJ1ZmZlciksay5fYmluQkUuZmwzMj1uZXcgRmxvYXQzMkFycmF5KGsuX2JpbkJFLnVpOC5idWZmZXIpLGsuX2JpbkJFLmZsNjQ9bmV3IEZsb2F0NjRBcnJheShrLl9iaW5CRS51aTguYnVmZmVyKSxrLl9iaW5MRT17bmV4dFplcm86ay5fYmluQkUubmV4dFplcm8scmVhZFVzaG9ydDpmdW5jdGlvbihyLHQpe3JldHVybiByW3QrMV08PDh8clt0XX0scmVhZFNob3J0OmZ1bmN0aW9uKHIsdCl7dmFyIGk9ay5fYmluQkUudWk4O3JldHVybiBpWzBdPXJbdCswXSxpWzFdPXJbdCsxXSxrLl9iaW5CRS5pMTZbMF19LHJlYWRJbnQ6ZnVuY3Rpb24ocix0KXt2YXIgaT1rLl9iaW5CRS51aTg7cmV0dXJuIGlbMF09clt0KzBdLGlbMV09clt0KzFdLGlbMl09clt0KzJdLGlbM109clt0KzNdLGsuX2JpbkJFLmkzMlswXX0scmVhZFVpbnQ6ZnVuY3Rpb24ocix0KXt2YXIgaT1rLl9iaW5CRS51aTg7cmV0dXJuIGlbMF09clt0KzBdLGlbMV09clt0KzFdLGlbMl09clt0KzJdLGlbM109clt0KzNdLGsuX2JpbkJFLnVpMzJbMF19LHJlYWRBU0NJSTprLl9iaW5CRS5yZWFkQVNDSUkscmVhZEZsb2F0OmZ1bmN0aW9uKHIsdCl7Zm9yKHZhciBpPWsuX2JpbkJFLnVpOCxiPTA7Yjw0O2IrKylpW2JdPXJbdCtiXTtyZXR1cm4gay5fYmluQkUuZmwzMlswXX0scmVhZERvdWJsZTpmdW5jdGlvbihyLHQpe2Zvcih2YXIgaT1rLl9iaW5CRS51aTgsYj0wO2I8ODtiKyspaVtiXT1yW3QrYl07cmV0dXJuIGsuX2JpbkJFLmZsNjRbMF19fSxrLl9jb3B5VGlsZT1mdW5jdGlvbihyLHQsaSxiLF8scyxoLHYpe2Zvcih2YXIgRT1NYXRoLm1pbih0LF8taCksZD1NYXRoLm1pbihpLHMtdiksdT0wO3U8ZDt1KyspZm9yKHZhciBjPSh2K3UpKl8raCxvPXUqdCxuPTA7bjxFO24rKyliW2Mrbl09cltvK25dfSxrLkxvc3NsZXNzSnBlZ0RlY29kZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHIoXyl7dGhpcy53PV8sdGhpcy5OPTAsdGhpcy5fPTAsdGhpcy5HPTB9ci5wcm90b3R5cGU9e3Q6ZnVuY3Rpb24oXyl7dGhpcy5OPU1hdGgubWF4KDAsTWF0aC5taW4odGhpcy53Lmxlbmd0aCxfKSl9LGk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53W3RoaXMuTisrXX0sbDpmdW5jdGlvbigpe3ZhciBfPXRoaXMuTjtyZXR1cm4gdGhpcy5OKz0yLHRoaXMud1tfXTw8OHx0aGlzLndbXysxXX0sSjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl89PTAmJih0aGlzLkc9dGhpcy53W3RoaXMuTl0sdGhpcy5OKz0xKyh0aGlzLkcrMT4+PjgpLHRoaXMuXz04KSx0aGlzLkc+Pj4tLXRoaXMuXyYxfSxaOmZ1bmN0aW9uKF8pe3ZhciBzPXRoaXMuXyxoPXRoaXMuRyx2PU1hdGgubWluKHMsXyk7Xy09dixzLT12O2Zvcih2YXIgRT1oPj4+cyYoMTw8diktMTtfPjA7KWg9dGhpcy53W3RoaXMuTl0sdGhpcy5OKz0xKyhoKzE+Pj44KSx2PU1hdGgubWluKDgsXyksXy09dixzPTgtdixFPDw9dixFfD1oPj4+cyYoMTw8diktMTtyZXR1cm4gdGhpcy5fPXMsdGhpcy5HPWgsRX19O3ZhciB0PXt9O3QuWD1mdW5jdGlvbigpe3JldHVyblswLDAsLTFdfSx0LnM9ZnVuY3Rpb24oXyxzLGgpe19bdC5ZKF8sMCxoKSsyXT1zfSx0Llk9ZnVuY3Rpb24oXyxzLGgpe2lmKF9bcysyXSE9LTEpcmV0dXJuIDA7aWYoaD09MClyZXR1cm4gcztmb3IodmFyIHY9MDt2PDI7disrKXtfW3Mrdl09PTAmJihfW3Mrdl09Xy5sZW5ndGgsXy5wdXNoKDApLF8ucHVzaCgwKSxfLnB1c2goLTEpKTt2YXIgRT10LlkoXyxfW3Mrdl0saC0xKTtpZihFIT0wKXJldHVybiBFfXJldHVybiAwfSx0LkI9ZnVuY3Rpb24oXyxzKXtmb3IodmFyIGg9MCx2PTAsRT0wLGQ9cy5fLHU9cy5HLGM9cy5OOzspaWYoZD09MCYmKHU9cy53W2NdLGMrPTErKHUrMT4+PjgpLGQ9OCksRT11Pj4+LS1kJjEsaD1fW2grRV0sdj1fW2grMl0sdiE9LTEpcmV0dXJuIHMuXz1kLHMuRz11LHMuTj1jLHY7cmV0dXJuLTF9O2Z1bmN0aW9uIGkoXyl7dGhpcy56PW5ldyByKF8pLHRoaXMuRCh0aGlzLnopfWkucHJvdG90eXBlPXskOmZ1bmN0aW9uKF8scyl7dGhpcy5RPV8uaSgpLHRoaXMuRj1fLmwoKSx0aGlzLm89Xy5sKCk7dmFyIGg9dGhpcy5PPV8uaSgpO3RoaXMuTD1bXTtmb3IodmFyIHY9MDt2PGg7disrKXt2YXIgRT1fLmkoKTtfLmkoKSxfLmkoKSx0aGlzLkxbRV09dn1fLnQoXy5OK3MtKDYraCozKSl9LGU6ZnVuY3Rpb24oKXt2YXIgXz0wLHM9dGhpcy56LmkoKTt0aGlzLkg9PW51bGwmJih0aGlzLkg9e30pO2Zvcih2YXIgaD10aGlzLkhbc109dC5YKCksdj1bXSxFPTA7RTwxNjtFKyspdltFXT10aGlzLnouaSgpLF8rPXZbRV07Zm9yKHZhciBFPTA7RTwxNjtFKyspZm9yKHZhciBkPTA7ZDx2W0VdO2QrKyl0LnMoaCx0aGlzLnouaSgpLEUrMSk7cmV0dXJuIF8rMTd9LFc6ZnVuY3Rpb24oXyl7Zm9yKDtfPjA7KV8tPXRoaXMuZSgpfSxwOmZ1bmN0aW9uKF8scyl7dmFyIGg9Xy5pKCk7dGhpcy5VfHwodGhpcy5VPVtdKTtmb3IodmFyIHY9MDt2PGg7disrKXt2YXIgRT1fLmkoKSxkPV8uaSgpO3RoaXMuVVt0aGlzLkxbRV1dPXRoaXMuSFtkPj4+NF19dGhpcy5nPV8uaSgpLF8udChfLk4rcy0oMitoKjIpKX0sRDpmdW5jdGlvbihfKXt2YXIgcz0hMSxoPV8ubCgpO2lmKGg9PT1pLnEpZG97dmFyIGg9Xy5sKCksdj1fLmwoKS0yO3N3aXRjaChoKXtjYXNlIGkubTp0aGlzLiQoXyx2KTticmVhaztjYXNlIGkuSzp0aGlzLlcodik7YnJlYWs7Y2FzZSBpLlY6dGhpcy5wKF8sdikscz0hMDticmVhaztkZWZhdWx0Ol8udChfLk4rdik7YnJlYWt9fXdoaWxlKCFzKX0sSTpmdW5jdGlvbihfLHMpe3ZhciBoPXQuQihzLF8pO2lmKGg9PTE2KXJldHVybi0zMjc2ODt2YXIgdj1fLlooaCk7cmV0dXJuIHYmMTw8aC0xfHwodi09KDE8PGgpLTEpLHZ9LEI6ZnVuY3Rpb24oXyxzKXtmb3IodmFyIGg9dGhpcy56LHY9dGhpcy5PLEU9dGhpcy5GLGQ9dGhpcy5JLHU9dGhpcy5nLGM9dGhpcy5vKnYsbz10aGlzLlUsbj0wO248djtuKyspX1tuXT1kKGgsb1tuXSkrKDE8PHRoaXMuUS0xKTtmb3IodmFyIHc9djt3PGM7dys9dilmb3IodmFyIG49MDtuPHY7bisrKV9bdytuXT1kKGgsb1tuXSkrX1t3K24tdl07Zm9yKHZhciBnPXMscD0xO3A8RTtwKyspe2Zvcih2YXIgbj0wO248djtuKyspX1tnK25dPWQoaCxvW25dKStfW2crbi1zXTtmb3IodmFyIHc9djt3PGM7dys9dilmb3IodmFyIG49MDtuPHY7bisrKXt2YXIgUz1nK3crbixBPV9bUy12XTt1PT02JiYoQT1fW1Mtc10rKEEtX1tTLXYtc10+Pj4xKSksX1tTXT1BK2QoaCxvW25dKX1nKz1zfX19LGkubT02NTQ3NSxpLks9NjU0NzYsaS5xPTY1NDk2LGkuVj02NTQ5ODtmdW5jdGlvbiBiKF8pe3ZhciBzPW5ldyBpKF8pLGg9cy5RPjg/VWludDE2QXJyYXk6VWludDhBcnJheSx2PW5ldyBoKHMubypzLkYqcy5PKSxFPXMubypzLk87cmV0dXJuIHMuQih2LEUpLHZ9cmV0dXJuIGJ9KCl9KShHLFkpfSkoKX0pKGQwKTt2YXIgSzA9ZDAuZXhwb3J0cyxZMD1NMChLMCk7Y2xhc3MgVzB7Y29uc3RydWN0b3IoRyxZKXtpZih0aGlzLnBvcz0wLHRoaXMuYnVmZmVyPW5ldyBEYXRhVmlldyhHKSx0aGlzLmlzX3dpdGhfYWxwaGE9ISFZLHRoaXMuYm90dG9tX3VwPSEwLHRoaXMuZmxhZz10aGlzLnJlYWRTdHJpbmcoMiksdGhpcy5mbGFnIT09IkJNIil0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgQk1QIEZpbGUiKTt0aGlzLnBhcnNlSGVhZGVyKCksdGhpcy5wYXJzZVJHQkEoKX1yZWFkVUludDgoKXtjb25zdCBHPXRoaXMuYnVmZmVyLmdldFVpbnQ4KHRoaXMucG9zKTtyZXR1cm4gdGhpcy5wb3MrPTEsR31yZWFkVUludDE2TEUoKXtjb25zdCBHPXRoaXMuYnVmZmVyLmdldFVpbnQxNih0aGlzLnBvcywhMCk7cmV0dXJuIHRoaXMucG9zKz0yLEd9cmVhZFVJbnQzMkxFKCl7Y29uc3QgRz10aGlzLmJ1ZmZlci5nZXRVaW50MzIodGhpcy5wb3MsITApO3JldHVybiB0aGlzLnBvcys9NCxHfXJlYWRJbnQzMkxFKCl7Y29uc3QgRz10aGlzLmJ1ZmZlci5nZXRJbnQzMih0aGlzLnBvcywhMCk7cmV0dXJuIHRoaXMucG9zKz00LEd9cmVhZFN0cmluZyhHKXtsZXQgWT0iIjtmb3IobGV0IFI9MDtSPEc7UisrKVkrPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkVUludDgoKSk7cmV0dXJuIFl9cGFyc2VIZWFkZXIoKXtpZih0aGlzLmZpbGVTaXplPXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy5yZXNlcnZlZD10aGlzLnJlYWRVSW50MzJMRSgpLHRoaXMub2Zmc2V0PXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy5oZWFkZXJTaXplPXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy53aWR0aD10aGlzLnJlYWRVSW50MzJMRSgpLHRoaXMuaGVpZ2h0PXRoaXMucmVhZEludDMyTEUoKSx0aGlzLnBsYW5lcz10aGlzLnJlYWRVSW50MTZMRSgpLHRoaXMuYml0UFA9dGhpcy5yZWFkVUludDE2TEUoKSx0aGlzLmNvbXByZXNzPXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy5yYXdTaXplPXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy5ocj10aGlzLnJlYWRVSW50MzJMRSgpLHRoaXMudnI9dGhpcy5yZWFkVUludDMyTEUoKSx0aGlzLmNvbG9ycz10aGlzLnJlYWRVSW50MzJMRSgpLHRoaXMuaW1wb3J0YW50Q29sb3JzPXRoaXMucmVhZFVJbnQzMkxFKCksdGhpcy5iaXRQUD09PTE2JiZ0aGlzLmlzX3dpdGhfYWxwaGEmJih0aGlzLmJpdFBQPTE1KSx0aGlzLmJpdFBQPDE1KXtjb25zdCBHPXRoaXMuY29sb3JzPT09MD8xPDx0aGlzLmJpdFBQOnRoaXMuY29sb3JzO3RoaXMucGFsZXR0ZT1uZXcgQXJyYXkoRyk7Zm9yKGxldCBZPTA7WTxHO1krKyl7Y29uc3QgUj10aGlzLnJlYWRVSW50OCgpLGs9dGhpcy5yZWFkVUludDgoKSxJPXRoaXMucmVhZFVJbnQ4KCkscj10aGlzLnJlYWRVSW50OCgpO3RoaXMucGFsZXR0ZVtZXT17cmVkOkksZ3JlZW46ayxibHVlOlIscXVhZDpyfX19dGhpcy5oZWlnaHQ8MCYmKHRoaXMuaGVpZ2h0Kj0tMSx0aGlzLmJvdHRvbV91cD0hMSl9cGFyc2VSR0JBKCl7Y29uc3QgRz0iYml0Iit0aGlzLmJpdFBQLFk9dGhpcy53aWR0aCp0aGlzLmhlaWdodCo0O3RoaXMuZGF0YT1uZXcgVWludDhDbGFtcGVkQXJyYXkoWSksdGhpc1tHXSgpfXNldFBpeGVsRGF0YShHLFkpe2NvbnN0IFI9dGhpcy5wYWxldHRlW0ddO3RoaXMuZGF0YVtZXT0wLHRoaXMuZGF0YVtZKzFdPVIuYmx1ZSx0aGlzLmRhdGFbWSsyXT1SLmdyZWVuLHRoaXMuZGF0YVtZKzNdPVIucmVkfWJpdDEoKXtjb25zdCBHPU1hdGguY2VpbCh0aGlzLndpZHRoLzgpLFk9RyU0O2ZvcihsZXQgUj10aGlzLmhlaWdodC0xO1I+PTA7Ui0tKXtjb25zdCBrPXRoaXMuYm90dG9tX3VwP1I6dGhpcy5oZWlnaHQtMS1SO2ZvcihsZXQgST0wO0k8RztJKyspe2NvbnN0IHI9dGhpcy5yZWFkVUludDgoKSx0PWsqdGhpcy53aWR0aCo0K0kqOCo0O2ZvcihsZXQgaT0wO2k8OCYmSSo4K2k8dGhpcy53aWR0aDtpKyspe2NvbnN0IGI9dGhpcy5wYWxldHRlW3I+PjctaSYxXTt0aGlzLmRhdGFbdCtpKjRdPTAsdGhpcy5kYXRhW3QraSo0KzFdPWIuYmx1ZSx0aGlzLmRhdGFbdCtpKjQrMl09Yi5ncmVlbix0aGlzLmRhdGFbdCtpKjQrM109Yi5yZWR9fVkhPT0wJiYodGhpcy5wb3MrPTQtWSl9fWJpdDQoKXtjb25zdCBHPU1hdGguY2VpbCh0aGlzLndpZHRoLzIpLFk9RyU0O2ZvcihsZXQgUj10aGlzLmhlaWdodC0xO1I+PTA7Ui0tKXtjb25zdCBrPXRoaXMuYm90dG9tX3VwP1I6dGhpcy5oZWlnaHQtMS1SO2ZvcihsZXQgST0wO0k8RztJKyspe2NvbnN0IHI9dGhpcy5yZWFkVUludDgoKSx0PWsqdGhpcy53aWR0aCo0K0kqMio0LGk9cj4+NCxiPXImMTU7bGV0IF89dGhpcy5wYWxldHRlW2ldO2lmKHRoaXMuZGF0YVt0XT0wLHRoaXMuZGF0YVt0KzFdPV8uYmx1ZSx0aGlzLmRhdGFbdCsyXT1fLmdyZWVuLHRoaXMuZGF0YVt0KzNdPV8ucmVkLEkqMisxPj10aGlzLndpZHRoKWJyZWFrO189dGhpcy5wYWxldHRlW2JdLHRoaXMuZGF0YVt0KzRdPTAsdGhpcy5kYXRhW3QrNCsxXT1fLmJsdWUsdGhpcy5kYXRhW3QrNCsyXT1fLmdyZWVuLHRoaXMuZGF0YVt0KzQrM109Xy5yZWR9WSE9PTAmJih0aGlzLnBvcys9NC1ZKX19Yml0OCgpe2NvbnN0IEc9dGhpcy53aWR0aCU0O2ZvcihsZXQgWT10aGlzLmhlaWdodC0xO1k+PTA7WS0tKXtjb25zdCBSPXRoaXMuYm90dG9tX3VwP1k6dGhpcy5oZWlnaHQtMS1ZO2ZvcihsZXQgaz0wO2s8dGhpcy53aWR0aDtrKyspe2NvbnN0IEk9dGhpcy5yZWFkVUludDgoKSxyPVIqdGhpcy53aWR0aCo0K2sqNCx0PXRoaXMucGFsZXR0ZVtJXXx8e3JlZDoyNTUsZ3JlZW46MjU1LGJsdWU6MjU1fTt0aGlzLmRhdGFbcl09MCx0aGlzLmRhdGFbcisxXT10LmJsdWUsdGhpcy5kYXRhW3IrMl09dC5ncmVlbix0aGlzLmRhdGFbciszXT10LnJlZH1HIT09MCYmKHRoaXMucG9zKz00LUcpfX1iaXQyNCgpe2ZvcihsZXQgRz10aGlzLmhlaWdodC0xO0c+PTA7Ry0tKXtjb25zdCBZPXRoaXMuYm90dG9tX3VwP0c6dGhpcy5oZWlnaHQtMS1HO2ZvcihsZXQgUj0wO1I8dGhpcy53aWR0aDtSKyspe2NvbnN0IGs9dGhpcy5yZWFkVUludDgoKSxJPXRoaXMucmVhZFVJbnQ4KCkscj10aGlzLnJlYWRVSW50OCgpLHQ9WSp0aGlzLndpZHRoKjQrUio0O3RoaXMuZGF0YVt0XT1yLHRoaXMuZGF0YVt0KzFdPUksdGhpcy5kYXRhW3QrMl09ayx0aGlzLmRhdGFbdCszXT0yNTV9dGhpcy5wb3MrPXRoaXMud2lkdGglNH19Yml0MzIoKXtmb3IobGV0IEc9dGhpcy5oZWlnaHQtMTtHPj0wO0ctLSl7Y29uc3QgWT10aGlzLmJvdHRvbV91cD9HOnRoaXMuaGVpZ2h0LTEtRztmb3IobGV0IFI9MDtSPHRoaXMud2lkdGg7UisrKXtjb25zdCBrPXRoaXMucmVhZFVJbnQ4KCksST10aGlzLnJlYWRVSW50OCgpLHI9dGhpcy5yZWFkVUludDgoKSx0PXRoaXMucmVhZFVJbnQ4KCksaT1ZKnRoaXMud2lkdGgqNCtSKjQ7dGhpcy5kYXRhW2ldPXIsdGhpcy5kYXRhW2krMV09SSx0aGlzLmRhdGFbaSsyXT1rLHRoaXMuZGF0YVtpKzNdPXR9fX1nZXREYXRhKCl7cmV0dXJuIHRoaXMuZGF0YX19ZnVuY3Rpb24gVDAobSxHKXtjb25zdCBSPW5ldyBXMChtKS5nZXREYXRhKCk7Ry5idWZmZXI9Un1mdW5jdGlvbiAkMChtKXtyZXR1cm4gbS5idWZmZXJ9ZnVuY3Rpb24gWDAobSl7Y29uc3QgRz1uZXcgRGF0YVZpZXcobSksWT1HLmdldEludDMyKDE4LCEwKSxSPU1hdGguYWJzKEcuZ2V0SW50MzIoMjIsITApKTtyZXR1cm5be3dpZHRoOlksaGVpZ2h0OlJ9XX12YXIgVjA9e2RlY29kZTpYMCx0b1JHQkE4OiQwLGRlY29kZUltYWdlOlQwfTtmdW5jdGlvbiBRMChtKXtyZXR1cm4gbVswXT09PTI1NSYmbVsxXT09PTIxNj8iaW1hZ2UvanBlZyI6bVswXT09PTEzNyYmbVsxXT09PTgwJiZtWzJdPT09NzgmJm1bM109PT03MT8iaW1hZ2UvcG5nIjpudWxsfWZ1bmN0aW9uIHEwKG0sRyl7fWZ1bmN0aW9uIEYwKG0pe3JldHVybiBudWxsfWFzeW5jIGZ1bmN0aW9uIGV0KG0pe2NvbnN0IEc9bmV3IFVpbnQ4QXJyYXkobSksWT1uZXcgQmxvYihbR10se3R5cGU6UTAoRyl9KSxSPWF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKFkpLGs9Ui53aWR0aCxJPVIuaGVpZ2h0O3JldHVyblt7Yml0bWFwOlIsd2lkdGg6ayxoZWlnaHQ6SX1dfXZhciB0dD17ZGVjb2RlOmV0LHRvUkdCQTg6RjAsZGVjb2RlSW1hZ2U6cTB9O2NvbnN0IFRlPXt9LHJ0PXtkZWNvZGU6YXN5bmMoe2ZpbGVUeXBlOm0sYXJyYXlCdWZmZXI6Ryx1aWQ6WX0sUik9PntUZVtZXXx8KFRlW1ldPXtmaWxlVHlwZTptLHBhZ2VzOmF3YWl0IFIuZGVjb2RlKEcpLGFycmF5QnVmZmVyOkd9KTtjb25zdCBrPVRlW1ldLnBhZ2VzLmxlbmd0aDtpZighayl0aHJvdyBuZXcgRXJyb3IoIuino+eggeWksei0pSIpO3JldHVybnt1aWQ6WSxudW1QYWdlczprfX0sZ2V0UGFnZTooe3BhZ2VJbmRleDptLHVpZDpHfSxZKT0+e2NvbnN0IFI9VGVbR107aWYoIVIpdGhyb3cgbmV3IEVycm9yKCLor7flhYjop6PnoIHmlofku7YiKTtjb25zdHtwYWdlczprLGFycmF5QnVmZmVyOkl9PVIscj1rW21dO3JldHVybiBZLmRlY29kZUltYWdlKEkscikse3VpZDpHLHBhZ2VJbmRleDptLGJ1ZmZlcjpZLnRvUkdCQTgociksbmF0dXJhbFdpZHRoOnIud2lkdGgsbmF0dXJhbEhlaWdodDpyLmhlaWdodCxiaXRtYXA6ci5iaXRtYXB9fX0saXQ9KHt1aWQ6bX0pPT57ZGVsZXRlIFRlW21dfSxhdD17dGlmZjpZMCxibXA6VjAsaW1nOnR0fTtvbm1lc3NhZ2U9YXN5bmMgZnVuY3Rpb24obSl7Y29uc3R7ZXZlbnROYW1lOkcscHJvcHM6WX09bS5kYXRhO2lmKCFHfHwhWSlyZXR1cm4gcG9zdE1lc3NhZ2UoIue8uuWwkeW/heimgeWPguaVsCIpO2lmKEc9PT0iZGVzdHJveSIpcmV0dXJuIGl0KFkpLHBvc3RNZXNzYWdlKHtfZXZlbnROYW1lOkcsX3Byb3BzOll9KTtsZXQgUj1udWxsLGs9IiI7dHJ5e2NvbnN0e3VpZDpJLGZpbGVUeXBlOnJ9PVksdD1ydFtHXTtSPWF3YWl0IHQoWSxhdFtyfHxUZVtJXS5maWxlVHlwZV0pfWNhdGNoKEkpe2s9KEk9PW51bGw/dm9pZCAwOkkubWVzc2FnZSl8fGAke2ZpbGVUeXBlfS53b3JrZXIuanPlh7rplJnkuoZgfXBvc3RNZXNzYWdlKHtfZXZlbnROYW1lOkcsX3Byb3BzOlIsX2Vycm9yTWVzc2FnZTprfSl9fSkoKTsK",_m=d=>Uint8Array.from(atob(d),I=>I.charCodeAt(0)),nV=typeof self<"u"&&self.Blob&&new Blob([_m(wV)],{type:"text/javascript;charset=utf-8"});function $m(d){let I;try{if(I=nV&&(self.URL||self.webkitURL).createObjectURL(nV),!I)throw"";const g=new Worker(I,{name:d==null?void 0:d.name});return g.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(I)}),g}catch{return new Worker("data:text/javascript;base64,"+wV,{name:d==null?void 0:d.name})}finally{I&&(self.URL||self.webkitURL).revokeObjectURL(I)}}const SV="KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO29ubWVzc2FnZT1uPT57dHJ5e2NvbnN0e2NhbnZhczp0LHBhZ2U6YSx2aWV3cG9ydDpzfT1uLmRhdGEse2J1ZmZlcjpvLG5hdHVyYWxXaWR0aDppLG5hdHVyYWxIZWlnaHQ6cn09YSx7d2lkdGg6cCxoZWlnaHQ6dX09cztsZXQgZT1hLmJpdG1hcDtjb25zdCBnPXQuZ2V0Q29udGV4dCgiMmQiKTtpZighZSl7Y29uc3QgbT1uZXcgVWludDhDbGFtcGVkQXJyYXkoby5idWZmZXIpLGM9bmV3IEltYWdlRGF0YShtLGkscik7Zy5wdXRJbWFnZURhdGEoYywwLDApLGU9dC50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKX1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCk9Pntwb3N0TWVzc2FnZShhLmJpdG1hcD8hMDplKX0pfWNhdGNoKHQpe2NvbnNvbGUubG9nKCJlcnJvciIsdCx0Lm1lc3NhZ2UpLHBvc3RNZXNzYWdlKG51bGwpfX19KSgpOwo=",IQ=d=>Uint8Array.from(atob(d),I=>I.charCodeAt(0)),JV=typeof self<"u"&&self.Blob&&new Blob([IQ(SV)],{type:"text/javascript;charset=utf-8"});function gQ(d){let I;try{if(I=JV&&(self.URL||self.webkitURL).createObjectURL(JV),!I)throw"";const g=new Worker(I,{name:d==null?void 0:d.name});return g.addEventListener("error",()=>{(self.URL||self.webkitURL).revokeObjectURL(I)}),g}catch{return new Worker("data:text/javascript;base64,"+SV,{name:d==null?void 0:d.name})}finally{I&&(self.URL||self.webkitURL).revokeObjectURL(I)}}var CQ={exports:{}};(function(d){var I=function(g){var C=Object.prototype,A=C.hasOwnProperty,l=Object.defineProperty||function(t,D,H){t[D]=H.value},Z,B=typeof Symbol=="function"?Symbol:{},i=B.iterator||"@@iterator",c=B.asyncIterator||"@@asyncIterator",G=B.toStringTag||"@@toStringTag";function W(t,D,H){return Object.defineProperty(t,D,{value:H,enumerable:!0,configurable:!0,writable:!0}),t[D]}try{W({},"")}catch{W=function(D,H,j){return D[H]=j}}function V(t,D,H,j){var M=D&&D.prototype instanceof Y?D:Y,p=Object.create(M.prototype),ZI=new RI(j||[]);return l(p,"_invoke",{value:II(t,H,ZI)}),p}g.wrap=V;function R(t,D,H){try{return{type:"normal",arg:t.call(D,H)}}catch(j){return{type:"throw",arg:j}}}var s="suspendedStart",Q="suspendedYield",h="executing",N="completed",o={};function Y(){}function n(){}function a(){}var w={};W(w,i,function(){return this});var X=Object.getPrototypeOf,J=X&&X(X(O([])));J&&J!==C&&A.call(J,i)&&(w=J);var y=a.prototype=Y.prototype=Object.create(w);n.prototype=a,l(y,"constructor",{value:a,configurable:!0}),l(a,"constructor",{value:n,configurable:!0}),n.displayName=W(a,G,"GeneratorFunction");function z(t){["next","throw","return"].forEach(function(D){W(t,D,function(H){return this._invoke(D,H)})})}g.isGeneratorFunction=function(t){var D=typeof t=="function"&&t.constructor;return D?D===n||(D.displayName||D.name)==="GeneratorFunction":!1},g.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,a):(t.__proto__=a,W(t,G,"GeneratorFunction")),t.prototype=Object.create(y),t},g.awrap=function(t){return{__await:t}};function u(t,D){function H(p,ZI,CI,P){var WI=R(t[p],t,ZI);if(WI.type==="throw")P(WI.arg);else{var Og=WI.arg,oC=Og.value;return oC&&typeof oC=="object"&&A.call(oC,"__await")?D.resolve(oC.__await).then(function(AC){H("next",AC,CI,P)},function(AC){H("throw",AC,CI,P)}):D.resolve(oC).then(function(AC){Og.value=AC,CI(Og)},function(AC){return H("throw",AC,CI,P)})}}var j;function M(p,ZI){function CI(){return new D(function(P,WI){H(p,ZI,P,WI)})}return j=j?j.then(CI,CI):CI()}l(this,"_invoke",{value:M})}z(u.prototype),W(u.prototype,c,function(){return this}),g.AsyncIterator=u,g.async=function(t,D,H,j,M){M===void 0&&(M=Promise);var p=new u(V(t,D,H,j),M);return g.isGeneratorFunction(D)?p:p.next().then(function(ZI){return ZI.done?ZI.value:p.next()})};function II(t,D,H){var j=s;return function(p,ZI){if(j===h)throw new Error("Generator is already running");if(j===N){if(p==="throw")throw ZI;return L()}for(H.method=p,H.arg=ZI;;){var CI=H.delegate;if(CI){var P=_(CI,H);if(P){if(P===o)continue;return P}}if(H.method==="next")H.sent=H._sent=H.arg;else if(H.method==="throw"){if(j===s)throw j=N,H.arg;H.dispatchException(H.arg)}else H.method==="return"&&H.abrupt("return",H.arg);j=h;var WI=R(t,D,H);if(WI.type==="normal"){if(j=H.done?N:Q,WI.arg===o)continue;return{value:WI.arg,done:H.done}}else WI.type==="throw"&&(j=N,H.method="throw",H.arg=WI.arg)}}}function _(t,D){var H=D.method,j=t.iterator[H];if(j===Z)return D.delegate=null,H==="throw"&&t.iterator.return&&(D.method="return",D.arg=Z,_(t,D),D.method==="throw")||H!=="return"&&(D.method="throw",D.arg=new TypeError("The iterator does not provide a '"+H+"' method")),o;var M=R(j,t.iterator,D.arg);if(M.type==="throw")return D.method="throw",D.arg=M.arg,D.delegate=null,o;var p=M.arg;if(!p)return D.method="throw",D.arg=new TypeError("iterator result is not an object"),D.delegate=null,o;if(p.done)D[t.resultName]=p.value,D.next=t.nextLoc,D.method!=="return"&&(D.method="next",D.arg=Z);else return p;return D.delegate=null,o}z(y),W(y,G,"Generator"),W(y,i,function(){return this}),W(y,"toString",function(){return"[object Generator]"});function BI(t){var D={tryLoc:t[0]};1 in t&&(D.catchLoc=t[1]),2 in t&&(D.finallyLoc=t[2],D.afterLoc=t[3]),this.tryEntries.push(D)}function FI(t){var D=t.completion||{};D.type="normal",delete D.arg,t.completion=D}function RI(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(BI,this),this.reset(!0)}g.keys=function(t){var D=Object(t),H=[];for(var j in D)H.push(j);return H.reverse(),function M(){for(;H.length;){var p=H.pop();if(p in D)return M.value=p,M.done=!1,M}return M.done=!0,M}};function O(t){if(t){var D=t[i];if(D)return D.call(t);if(typeof t.next=="function")return t;if(!isNaN(t.length)){var H=-1,j=function M(){for(;++H<t.length;)if(A.call(t,H))return M.value=t[H],M.done=!1,M;return M.value=Z,M.done=!0,M};return j.next=j}}return{next:L}}g.values=O;function L(){return{value:Z,done:!0}}return RI.prototype={constructor:RI,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=Z,this.done=!1,this.delegate=null,this.method="next",this.arg=Z,this.tryEntries.forEach(FI),!t)for(var D in this)D.charAt(0)==="t"&&A.call(this,D)&&!isNaN(+D.slice(1))&&(this[D]=Z)},stop:function(){this.done=!0;var t=this.tryEntries[0],D=t.completion;if(D.type==="throw")throw D.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var D=this;function H(P,WI){return p.type="throw",p.arg=t,D.next=P,WI&&(D.method="next",D.arg=Z),!!WI}for(var j=this.tryEntries.length-1;j>=0;--j){var M=this.tryEntries[j],p=M.completion;if(M.tryLoc==="root")return H("end");if(M.tryLoc<=this.prev){var ZI=A.call(M,"catchLoc"),CI=A.call(M,"finallyLoc");if(ZI&&CI){if(this.prev<M.catchLoc)return H(M.catchLoc,!0);if(this.prev<M.finallyLoc)return H(M.finallyLoc)}else if(ZI){if(this.prev<M.catchLoc)return H(M.catchLoc,!0)}else if(CI){if(this.prev<M.finallyLoc)return H(M.finallyLoc)}else throw new Error("try statement without catch or finally")}}},abrupt:function(t,D){for(var H=this.tryEntries.length-1;H>=0;--H){var j=this.tryEntries[H];if(j.tryLoc<=this.prev&&A.call(j,"finallyLoc")&&this.prev<j.finallyLoc){var M=j;break}}M&&(t==="break"||t==="continue")&&M.tryLoc<=D&&D<=M.finallyLoc&&(M=null);var p=M?M.completion:{};return p.type=t,p.arg=D,M?(this.method="next",this.next=M.finallyLoc,o):this.complete(p)},complete:function(t,D){if(t.type==="throw")throw t.arg;return t.type==="break"||t.type==="continue"?this.next=t.arg:t.type==="return"?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):t.type==="normal"&&D&&(this.next=D),o},finish:function(t){for(var D=this.tryEntries.length-1;D>=0;--D){var H=this.tryEntries[D];if(H.finallyLoc===t)return this.complete(H.completion,H.afterLoc),FI(H),o}},catch:function(t){for(var D=this.tryEntries.length-1;D>=0;--D){var H=this.tryEntries[D];if(H.tryLoc===t){var j=H.completion;if(j.type==="throw"){var M=j.arg;FI(H)}return M}}throw new Error("illegal catch attempt")},delegateYield:function(t,D,H){return this.delegate={iterator:O(t),resultName:D,nextLoc:H},this.method==="next"&&(this.arg=Z),o}},g}(d.exports);try{regeneratorRuntime=I}catch{typeof globalThis=="object"?globalThis.regeneratorRuntime=I:Function("r","regeneratorRuntime = r")(I)}})(CQ);var pc=(d,I)=>`${d}-${I}-${Math.random().toString(16).slice(3,8)}`;const AQ=pc;let MV=0;var DV=({id:d,action:I,payload:g={}})=>{let C=d;return typeof C>"u"&&(C=AQ("Job",MV),MV+=1),{id:C,action:I,payload:g}},XZ={};let kc=!1;XZ.logging=kc,XZ.setLogging=d=>{kc=d},XZ.log=(...d)=>kc?console.log.apply(void 0,d):null;const lQ=DV,{log:kF}=XZ,ZQ=pc;let XV=0;var dQ=()=>{const d=ZQ("Scheduler",XV),I={},g={};let C=[];XV+=1;const A=()=>C.length,l=()=>Object.keys(I).length,Z=()=>{if(C.length!==0){const W=Object.keys(I);for(let V=0;V<W.length;V+=1)if(typeof g[W[V]]>"u"){C[0](I[W[V]]);break}}},B=(W,V)=>new Promise((R,s)=>{const Q=lQ({action:W,payload:V});C.push(async h=>{C.shift(),g[h.id]=Q;try{R(await h[W].apply(void 0,[...V,Q.id]))}catch(N){s(N)}finally{delete g[h.id],Z()}}),kF(`[${d}]: Add ${Q.id} to JobQueue`),kF(`[${d}]: JobQueue length=${C.length}`),Z()});return{addWorker:W=>(I[W.id]=W,kF(`[${d}]: Add ${W.id}`),kF(`[${d}]: Number of workers=${l()}`),Z(),W.id),addJob:async(W,...V)=>{if(l()===0)throw Error(`[${d}]: You need to have at least one worker before adding jobs`);return B(W,V)},terminate:async()=>{Object.keys(I).forEach(async W=>{await I[W].terminate()}),C=[]},getQueueLen:A,getNumWorkers:l}};function BQ(d){throw new Error('Could not dynamically require "'+d+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}function FQ(){return!!(typeof window<"u"&&typeof window.process=="object"&&window.process.type==="renderer"||typeof process<"u"&&typeof process.versions=="object"&&process.versions.electron||typeof navigator=="object"&&typeof navigator.userAgent=="string"&&navigator.userAgent.indexOf("Electron")>=0)}var iQ=FQ;const cQ=iQ;var GQ=d=>{const I={};return typeof WorkerGlobalScope<"u"?I.type="webworker":cQ()?I.type="electron":typeof document=="object"?I.type="browser":typeof process=="object"&&typeof BQ=="function"&&(I.type="node"),typeof d>"u"?I:I[d]};const WQ=GQ("type")==="browser"?d=>new URL(d,window.location.href).href:d=>d;var VQ=d=>{const I={...d};return["corePath","workerPath","langPath"].forEach(g=>{d[g]&&(I[g]=WQ(I[g]))}),I},RQ=d=>{const I=[],g=[],C=[],A=[],l=[];return d.blocks&&d.blocks.forEach(Z=>{Z.paragraphs.forEach(B=>{B.lines.forEach(i=>{i.words.forEach(c=>{c.symbols.forEach(G=>{l.push({...G,page:d,block:Z,paragraph:B,line:i,word:c})}),A.push({...c,page:d,block:Z,paragraph:B,line:i})}),C.push({...i,page:d,block:Z,paragraph:B})}),g.push({...B,page:d,block:Z})}),I.push({...Z,page:d})}),{...d,blocks:I,paragraphs:g,lines:C,words:A,symbols:l}},tV={TESSERACT_ONLY:0,LSTM_ONLY:1,TESSERACT_LSTM_COMBINED:2,DEFAULT:3};const sQ={name:"tesseract.js",version:"5.1.1",description:"Pure Javascript Multilingual OCR",main:"src/index.js",types:"src/index.d.ts",unpkg:"dist/tesseract.min.js",jsdelivr:"dist/tesseract.min.js",scripts:{start:"node scripts/server.js",build:"rimraf dist && webpack --config scripts/webpack.config.prod.js && rollup -c scripts/rollup.esm.mjs","profile:tesseract":"webpack-bundle-analyzer dist/tesseract-stats.json","profile:worker":"webpack-bundle-analyzer dist/worker-stats.json",prepublishOnly:"npm run build",wait:"rimraf dist && wait-on http://localhost:3000/dist/tesseract.min.js",test:"npm-run-all -p -r start test:all","test:all":"npm-run-all wait test:browser:* test:node:all","test:node":"nyc mocha --exit --bail --require ./scripts/test-helper.js","test:node:all":"npm run test:node -- ./tests/*.test.js","test:browser-tpl":"mocha-headless-chrome -a incognito -a no-sandbox -a disable-setuid-sandbox -a disable-logging -t 300000","test:browser:detect":"npm run test:browser-tpl -- -f ./tests/detect.test.html","test:browser:recognize":"npm run test:browser-tpl -- -f ./tests/recognize.test.html","test:browser:scheduler":"npm run test:browser-tpl -- -f ./tests/scheduler.test.html","test:browser:FS":"npm run test:browser-tpl -- -f ./tests/FS.test.html",lint:"eslint src","lint:fix":"eslint --fix src",postinstall:"opencollective-postinstall || true"},browser:{"./src/worker/node/index.js":"./src/worker/browser/index.js"},author:"",contributors:["jeromewu"],license:"Apache-2.0",devDependencies:{"@babel/core":"^7.21.4","@babel/eslint-parser":"^7.21.3","@babel/preset-env":"^7.21.4","@rollup/plugin-commonjs":"^24.1.0",acorn:"^8.8.2","babel-loader":"^9.1.2",buffer:"^6.0.3",cors:"^2.8.5",eslint:"^7.32.0","eslint-config-airbnb-base":"^14.2.1","eslint-plugin-import":"^2.27.5","expect.js":"^0.3.1",express:"^4.18.2",mocha:"^10.2.0","mocha-headless-chrome":"^4.0.0","npm-run-all":"^4.1.5",nyc:"^15.1.0",rimraf:"^5.0.0",rollup:"^3.20.7","wait-on":"^7.0.1",webpack:"^5.79.0","webpack-bundle-analyzer":"^4.8.0","webpack-cli":"^5.0.1","webpack-dev-middleware":"^6.0.2","rollup-plugin-sourcemaps":"^0.6.3"},dependencies:{"bmp-js":"^0.1.0","idb-keyval":"^6.2.0","is-electron":"^2.2.2","is-url":"^1.2.4","node-fetch":"^2.6.9","opencollective-postinstall":"^2.0.3","regenerator-runtime":"^0.13.3","tesseract.js-core":"^5.1.1","wasm-feature-detect":"^1.2.11",zlibjs:"^0.3.1"},overrides:{"@rollup/pluginutils":"^5.0.2"},repository:{type:"git",url:"https://github.com/naptha/tesseract.js.git"},bugs:{url:"https://github.com/naptha/tesseract.js/issues"},homepage:"https://github.com/naptha/tesseract.js",collective:{type:"opencollective",url:"https://opencollective.com/tesseractjs"}};var UQ={workerBlobURL:!0,logger:()=>{}};const bQ=sQ.version;var mQ={...UQ,workerPath:`https://cdn.jsdelivr.net/npm/tesseract.js@v${bQ}/dist/worker.min.js`},QQ=({workerPath:d,workerBlobURL:I})=>{let g;if(Blob&&URL&&I){const C=new Blob([`importScripts("${d}");`],{type:"application/javascript"});g=new Worker(URL.createObjectURL(C))}else g=new Worker(d);return g},NQ=d=>{d.terminate()},hQ=(d,I)=>{d.onmessage=({data:g})=>{I(g)}},oQ=async(d,I)=>{d.postMessage(I)};const Kc=d=>new Promise((I,g)=>{const C=new FileReader;C.onload=()=>{I(C.result)},C.onerror=({target:{error:{code:A}}})=>{g(Error(`File could not be read! Code=${A}`))},C.readAsArrayBuffer(d)}),Tc=async d=>{let I=d;if(typeof d>"u")return"undefined";if(typeof d=="string")/data:image\/([a-zA-Z]*);base64,([^"]*)/.test(d)?I=atob(d.split(",")[1]).split("").map(g=>g.charCodeAt(0)):I=await(await fetch(d)).arrayBuffer();else if(typeof HTMLElement<"u"&&d instanceof HTMLElement)d.tagName==="IMG"&&(I=await Tc(d.src)),d.tagName==="VIDEO"&&(I=await Tc(d.poster)),d.tagName==="CANVAS"&&await new Promise(g=>{d.toBlob(async C=>{I=await Kc(C),g()})});else if(typeof OffscreenCanvas<"u"&&d instanceof OffscreenCanvas){const g=await d.convertToBlob();I=await Kc(g)}else(d instanceof File||d instanceof Blob)&&(I=await Kc(d));return new Uint8Array(I)};var aQ=Tc,YQ={defaultOptions:mQ,spawnWorker:QQ,terminateWorker:NQ,onMessage:hQ,send:oQ,loadImage:aQ};const wQ=VQ,nQ=RQ,BC=DV,{log:yV}=XZ,SQ=pc,ml=tV,{defaultOptions:JQ,spawnWorker:MQ,terminateWorker:DQ,onMessage:XQ,loadImage:HV,send:tQ}=YQ;let eV=0;var uV=async(d="eng",I=ml.LSTM_ONLY,g={},C={})=>{const A=SQ("Worker",eV),{logger:l,errorHandler:Z,...B}=wQ({...JQ,...g}),i={},c={},G=typeof d=="string"?d.split("+"):d;let W=I,V=C;const R=[ml.DEFAULT,ml.LSTM_ONLY].includes(I)&&!B.legacyCore;let s,Q;const h=new Promise((M,p)=>{Q=M,s=p}),N=M=>{s(M.message)};let o=MQ(B);o.onerror=N,eV+=1;const Y=(M,p)=>{i[M]=p},n=(M,p)=>{c[M]=p},a=({id:M,action:p,payload:ZI})=>new Promise((CI,P)=>{yV(`[${A}]: Start ${M}, action=${p}`);const WI=`${p}-${M}`;Y(WI,CI),n(WI,P),tQ(o,{workerId:A,jobId:M,action:p,payload:ZI})}),w=()=>console.warn("`load` is depreciated and should be removed from code (workers now come pre-loaded)"),X=M=>a(BC({id:M,action:"load",payload:{options:{lstmOnly:R,corePath:B.corePath,logging:B.logging}}})),J=(M,p,ZI)=>a(BC({id:ZI,action:"FS",payload:{method:"writeFile",args:[M,p]}})),y=(M,p)=>a(BC({id:p,action:"FS",payload:{method:"readFile",args:[M,{encoding:"utf8"}]}})),z=(M,p)=>a(BC({id:p,action:"FS",payload:{method:"unlink",args:[M]}})),u=(M,p,ZI)=>a(BC({id:ZI,action:"FS",payload:{method:M,args:p}})),II=()=>console.warn("`loadLanguage` is depreciated and should be removed from code (workers now come with language pre-loaded)"),_=(M,p)=>a(BC({id:p,action:"loadLanguage",payload:{langs:M,options:{langPath:B.langPath,dataPath:B.dataPath,cachePath:B.cachePath,cacheMethod:B.cacheMethod,gzip:B.gzip,lstmOnly:[ml.DEFAULT,ml.LSTM_ONLY].includes(W)&&!B.legacyLang}}})),BI=()=>console.warn("`initialize` is depreciated and should be removed from code (workers now come pre-initialized)"),FI=(M,p,ZI,CI)=>a(BC({id:CI,action:"initialize",payload:{langs:M,oem:p,config:ZI}})),RI=(M="eng",p,ZI,CI)=>{if(R&&[ml.TESSERACT_ONLY,ml.TESSERACT_LSTM_COMBINED].includes(p))throw Error("Legacy model requested but code missing.");const P=p||W;W=P;const WI=ZI||V;V=WI;const oC=(typeof M=="string"?M.split("+"):M).filter(AC=>!G.includes(AC));return G.push(...oC),oC.length>0?_(oC,CI).then(()=>FI(M,P,WI,CI)):FI(M,P,WI,CI)},O=(M={},p)=>a(BC({id:p,action:"setParameters",payload:{params:M}})),L=async(M,p={},ZI={blocks:!0,text:!0,hocr:!0,tsv:!0},CI)=>a(BC({id:CI,action:"recognize",payload:{image:await HV(M),options:p,output:ZI}})),t=(M="Tesseract OCR Result",p=!1,ZI)=>(console.log("`getPDF` function is depreciated. `recognize` option `savePDF` should be used instead."),a(BC({id:ZI,action:"getPDF",payload:{title:M,textonly:p}}))),D=async(M,p)=>{if(R)throw Error("`worker.detect` requires Legacy model, which was not loaded.");return a(BC({id:p,action:"detect",payload:{image:await HV(M)}}))},H=async()=>(o!==null&&(DQ(o),o=null),Promise.resolve());XQ(o,({workerId:M,jobId:p,status:ZI,action:CI,data:P})=>{const WI=`${CI}-${p}`;if(ZI==="resolve"){yV(`[${M}]: Complete ${p}`);let Og=P;CI==="recognize"?Og=nQ(P):CI==="getPDF"&&(Og=Array.from({...P,length:Object.keys(P).length})),i[WI]({jobId:p,data:Og})}else if(ZI==="reject")if(c[WI](P),CI==="load"&&s(P),Z)Z(P);else throw Error(P);else ZI==="progress"&&l({...P,userJobId:p})});const j={id:A,worker:o,setResolve:Y,setReject:n,load:w,writeText:J,readText:y,removeFile:z,FS:u,loadLanguage:II,initialize:BI,reinitialize:RI,setParameters:O,recognize:L,getPDF:t,detect:D,terminate:H};return X().then(()=>_(d)).then(()=>FI(d,I,C)).then(()=>Q(j)).catch(()=>{}),h};const pV=uV;var yQ={recognize:async(d,I,g)=>{const C=await pV(I,1,g);return C.recognize(d).finally(async()=>{await C.terminate()})},detect:async(d,I)=>{const g=await pV("osd",0,I);return g.detect(d).finally(async()=>{await g.terminate()})}},HQ={AFR:"afr",AMH:"amh",ARA:"ara",ASM:"asm",AZE:"aze",AZE_CYRL:"aze_cyrl",BEL:"bel",BEN:"ben",BOD:"bod",BOS:"bos",BUL:"bul",CAT:"cat",CEB:"ceb",CES:"ces",CHI_SIM:"chi_sim",CHI_TRA:"chi_tra",CHR:"chr",CYM:"cym",DAN:"dan",DEU:"deu",DZO:"dzo",ELL:"ell",ENG:"eng",ENM:"enm",EPO:"epo",EST:"est",EUS:"eus",FAS:"fas",FIN:"fin",FRA:"fra",FRK:"frk",FRM:"frm",GLE:"gle",GLG:"glg",GRC:"grc",GUJ:"guj",HAT:"hat",HEB:"heb",HIN:"hin",HRV:"hrv",HUN:"hun",IKU:"iku",IND:"ind",ISL:"isl",ITA:"ita",ITA_OLD:"ita_old",JAV:"jav",JPN:"jpn",KAN:"kan",KAT:"kat",KAT_OLD:"kat_old",KAZ:"kaz",KHM:"khm",KIR:"kir",KOR:"kor",KUR:"kur",LAO:"lao",LAT:"lat",LAV:"lav",LIT:"lit",MAL:"mal",MAR:"mar",MKD:"mkd",MLT:"mlt",MSA:"msa",MYA:"mya",NEP:"nep",NLD:"nld",NOR:"nor",ORI:"ori",PAN:"pan",POL:"pol",POR:"por",PUS:"pus",RON:"ron",RUS:"rus",SAN:"san",SIN:"sin",SLK:"slk",SLV:"slv",SPA:"spa",SPA_OLD:"spa_old",SQI:"sqi",SRP:"srp",SRP_LATN:"srp_latn",SWA:"swa",SWE:"swe",SYR:"syr",TAM:"tam",TEL:"tel",TGK:"tgk",TGL:"tgl",THA:"tha",TIR:"tir",TUR:"tur",UIG:"uig",UKR:"ukr",URD:"urd",UZB:"uzb",UZB_CYRL:"uzb_cyrl",VIE:"vie",YID:"yid"},eQ={OSD_ONLY:"0",AUTO_OSD:"1",AUTO_ONLY:"2",AUTO:"3",SINGLE_COLUMN:"4",SINGLE_BLOCK_VERT_TEXT:"5",SINGLE_BLOCK:"6",SINGLE_LINE:"7",SINGLE_WORD:"8",CIRCLE_WORD:"9",SINGLE_CHAR:"10",SPARSE_TEXT:"11",SPARSE_TEXT_OSD:"12",RAW_LINE:"13"};const uQ=dQ,pQ=uV,kQ=yQ,KQ=HQ,TQ=tV,zQ=eQ,{setLogging:LQ}=XZ;var EQ={languages:KQ,OEM:TQ,PSM:zQ,createScheduler:uQ,createWorker:pQ,setLogging:LQ,...kQ};async function jQ(d,I,g,C){window.tesseractWorker||(window.tesseractWorker=await EQ.createWorker(...C));const A=window.tesseractWorker,{data:{words:l}}=await A.recognize(d);return xQ(l,I,g)}function xQ(d,I,g){return{items:d.map(l=>{const{x0:Z,y0:B,x1:i,y1:c}=l.bbox,G=i-Z,W=c-B,V=[G,0,0,W,Z,g-c];return{str:l.text,dir:"ltr",width:G,height:W,transform:V,fontName:"sans_serif"}}),lang:null,styles:{sans_serif:{ascent:0,descent:0,fontFamily:"sans-serif",vertical:!1}}}}const KF=new $m({type:"module"}),qI={},kV={value:[]};async function OQ(d){const I=this,{uid:g}=I,C=d-1;if(!qI[g].processCapabilityArray[C]){const A=Promise.withResolvers();qI[g].processCapabilityArray[C]=A,KF.postMessage({eventName:"getPage",props:{uid:g,pageIndex:C}})}return qI[g].processCapabilityArray[C].promise}async function rQ(){const d=Promise.withResolvers(),I=this,{uid:g}=I;if(qI[g])return KF.postMessage({eventName:"destroy",props:{uid:g}}),qI[g].endCapability=d,qI[g].endCapability.promise}function vQ({scale:d}){const I=this,{uid:g,pageIndex:C}=I,l=qI[g].pages[C];if(!l)throw new Error(`${I.pageIndex+1}页没有先执行getPage方法`);const{naturalWidth:Z,naturalHeight:B}=l;return{width:Math.round(Z*d),height:Math.round(B*d),scale:d,rawDims:{pageHeight:B,pageWidth:Z,pageX:0,pageY:0}}}function KV({canvasContext:d,viewport:I,page:g}){const{naturalWidth:C,naturalHeight:A,bitmap:l}=g,{width:Z,height:B}=I;d.drawImage(l,0,0,C,A,0,0,Z,B)}function PQ({canvasContext:d,viewport:I}){const g=this,{pageIndex:C,uid:A}=g,l=qI[A],{pages:Z,offscreenArray:B,offscreenWorkerArray:i}=l,c=Z[C];if(!B[C]){const{naturalWidth:G,naturalHeight:W}=c,V=new OffscreenCanvas(G,W);B[C]=V}return{promise:new Promise((G,W)=>{if(c.bitmap){requestAnimationFrame(()=>{KV({canvasContext:d,viewport:I,page:c}),requestAnimationFrame(()=>G(null))});return}if(!i[C]){const V=new gQ;i[C]=V,V.onmessage=({data:R})=>{R?(R instanceof ImageBitmap&&(c.bitmap=R,delete c.buffer,requestAnimationFrame(()=>KV({canvasContext:d,viewport:I,page:c}))),G(null)):W(null),V.terminate(),delete i[C]},V.postMessage({canvas:B[C],page:c,viewport:I},[B[C]])}})}}function fQ(){const d=this,{pageIndex:I,uid:g}=d,C=qI[g],{pages:A}=C,l=A[I],{bitmap:Z,naturalHeight:B,naturalWidth:i}=l,c=document.createElement("canvas");return c.width=i,c.height=B,c.getContext("2d").drawImage(Z,0,0),jQ(c,i,B,kV.value)}const qQ={decode:({uid:d,numPages:I})=>({uid:d,numPages:I,getPage:OQ,destroy:rQ}),getPage:({uid:d,pageIndex:I,buffer:g,bitmap:C,naturalWidth:A,naturalHeight:l})=>(qI[d].pages[I]||(qI[d].pages[I]={buffer:g,bitmap:C,naturalWidth:A,naturalHeight:l}),{uid:d,pageIndex:I,render:PQ,getViewport:vQ,view:[0,0,A,l],isOwn:!0,getTextContent:fQ}),destroy:({uid:d})=>{delete qI[d]}},_Q={decode:d=>{var I;return(I=qI[d])==null?void 0:I.startCapability},getPage:(d,I)=>{var g;return(g=qI[d])==null?void 0:g.processCapabilityArray[I]},destroy:d=>{var I;return(I=qI[d])==null?void 0:I.endCapability}};KF.onmessage=d=>{const{_eventName:I,_errorMessage:g,_props:C}=d.data,{uid:A,pageIndex:l}=C,Z=_Q[I](A,l);g&&(Z==null||Z.reject(g)),Z==null||Z.resolve(qQ[I](C))};const $Q=async(d,I,g)=>{const C=new Int32Array(I,0,I.byteLength/4),A=qm(C);if(kV.value=g,!qI[A]){const l=Promise.withResolvers(),Z=[],B=[],i=[];qI[A]={startCapability:l,processCapabilityArray:Z,offscreenArray:B,pages:[],offscreenWorkerArray:i},KF.postMessage({eventName:"decode",props:{fileType:d,uid:A,arrayBuffer:I}})}return qI[A].startCapability.promise},TV=(d,I,g)=>{switch(d){case"pdf":return xm(I);default:return $Q(d,I,g)}};function zV(d,I){const g=S.ref(),C=S.shallowRef(!1),A=new IntersectionObserver(l=>{d==null||d(l,A),C.value=!!l.find(Z=>Z.isIntersecting)},I);return S.onBeforeUnmount(()=>{A.disconnect()}),S.watch(g,(l,Z)=>{Z&&(A.unobserve(Z),C.value=!1),l&&A.observe(l)},{flush:"post"}),{intersectionRef:g,isIntersecting:C}}const zc=["rendered","error","updateScale"],IN=["instance","devicePixelRatio","pageNum","containerSize","transform","lazy","autoSize","enabledTextLayer","enabledOCR",...zc.map(d=>`on${d.replace(/^\S/,I=>I.toUpperCase())}`)],gN=S.defineComponent({name:"DViewerPage",props:IN,emits:[...zc],setup(d,{slots:I,emit:g,expose:C}){const A=zc.reduce((J,y)=>{const z=`on${y.replace(/^\S/,u=>u.toUpperCase())}`;return J[z]=(...u)=>g(y,...u),J},{}),l=S.ref(0),Z=S.ref(!1),B=S.ref(null),i=S.ref(null),c=S.ref(null),G=S.ref(null);let W=null,V=null;const R=S.ref(null),s=S.ref(),Q=S.ref(),h=J=>{if(!s.value||!R.value||J/90%2===0)return 1;const y=s.value,z=Math.round(y*R.value[2]),u=Math.round(y*R.value[3]);return z>u?qG(u,z,z,u):1},N=S.computed(()=>{const J=d.autoSize&&s.value?s.value:d.transform.scale,y=R.value?[Math.round(J*R.value[2])+"px",Math.round(J*R.value[3])+"px"]:d.containerSize?["30px",`round(var(--scale-factor) * ${d.containerSize.height}px, 1px)`]:[],z={transform:d.transform?`rotate(${d.transform.rotate}deg) rotateX(${d.transform.yFlip?.5:0}turn) rotateY(${d.transform.xFlip?.5:0}turn) scale(${h(d.transform.rotate||0)})`:""};return y.length>0?{...z,width:y[0],height:y[1]}:z}),o=PG(J=>{for(const y of J)y.isIntersecting&&a()},500),{intersectionRef:Y,isIntersecting:n}=zV(o),a=PG(async()=>{console.log(d.transform.scale);const J=S.unref(i),y=S.unref(c),{pageNum:z,devicePixelRatio:u,transform:{scale:II},instance:_,autoSize:BI,containerSize:FI,enabledTextLayer:RI,enabledOCR:O}=d;if(!(l.value===1||!II||!J||!y||!_||s.value===II||BI&&s.value&&Q.value===s.value||!n.value&&d.lazy)){try{W||(l.value=1,W=await _.getPage(z),R.value=W.view);const L=BI?qG(W.view[2],W.view[3],FI.width,FI.height):II,t=W.getViewport({scale:L*u});J.width=t.width,J.height=t.height,J.style.width=Math.round(t.width/u)+"px",J.style.height=Math.round(t.height/u)+"px";const D={canvasContext:J.getContext("2d",{colorSpace:"srgb"}),viewport:t};await W.render(D).promise,l.value=2,s.value=L,BI&&(Q.value=L,z===1&&A.onUpdateScale(L));const H={pageNum:z};A.onRendered(H)}catch(L){console.error("error",(L==null?void 0:L.message)||L),l.value=2,Z.value=!0,A.onError({eventName:"render",message:"页面渲染失败,原因："+L.message,pageNum:z})}if(RI&&!V&&(O||!W.isOwn)){const L=await W.getTextContent();V=new Lm({textContentSource:L,container:y,viewport:W.getViewport({scale:s.value})}),V.render()}}},500),w=()=>{const J=i.value;J&&(J.style.width="100%",J.style.height="100%")};return S.onMounted(()=>{S.watch(()=>d.transform.scale,()=>{w(),a()},{immediate:!0})}),S.watchEffect(()=>{d.lazy?Y.value=B.value:a()}),C({textLayerRef:c,annotationLayerRef:G,canvasRef:i,renderState:l,isRenderError:Z,view:R,serializeBitmap:async()=>{if(!W)return;const J=document.createElement("canvas"),y=J.getContext("2d"),z=W.getViewport({scale:1});J.width=z.width,J.height=z.height;const u={canvasContext:y,viewport:z};return await W.render(u).promise,J.toDataURL()}}),()=>{var J,y;return MI("div",{class:"d-page",ref:B,style:"--scale-factor:"+(s.value||d.transform.scale)},[MI("div",{class:"status-icon",style:{display:l.value<2?"":"none"}},(J=I==null?void 0:I.placeholder)==null?void 0:J.call(I)),MI("div",{class:"status-icon",style:{display:Z.value?"":"none"}},(y=I==null?void 0:I.error)==null?void 0:y.call(I)),MI("div",{class:"page",style:S.unref(N)},[MI("div",{class:"canvasWrapper"},[MI("canvas",{domProps:{width:0,height:0},ref:i})]),MI("div",{class:"textLayer",ref:c}),MI("div",{class:"annotationLayer",ref:G})])])}}}),CN=["modelValue","color","indeterminate","width"],LV=S.defineComponent({name:"DProgressCircular",model:{prop:"modelValue",event:"update:modelValue"},props:CN,setup(d,{slots:I}){const C=2*Math.PI*20,A=S.ref(),{intersectionRef:l,isIntersecting:Z}=zV(),{resizeRef:B,contentRect:i}=ei(),c=S.computed(()=>Math.max(0,Math.min(100,d.modelValue||0))),G=S.computed(()=>Number(d.width||4)),W=S.computed(()=>i.value?i.value.width:Math.max(G.value,32)),V=S.computed(()=>20/(1-G.value/W.value)*2),R=S.computed(()=>G.value/W.value*V.value),s=(h,N="px")=>{if(!(h==null||h===""))return isNaN(+h)?String(h):isFinite(+h)?`${Number(h)}${N}`:void 0},Q=S.computed(()=>s((100-c.value)/100*C));return S.watchEffect(()=>{l.value=A.value,B.value=A.value}),()=>MI("div",{ref:A,class:["d-progress-circular",{"d-progress-circular--indeterminate":!!d.indeterminate,"d-progress-circular--visible":Z.value}],style:{color:d.color||"black",width:W.value+"px",height:W.value+"px"},attrs:{role:"progressbar","aria-valuemin":"0","aria-valuemax":"100","aria-valuenow":d.indeterminate?void 0:c.value}},[MI("svg",{style:{transform:"rotate(-90deg)"},attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:`0 0 ${V.value} ${V.value}`}},[MI("circle",{class:["d-progress-circular__underlay"],attrs:{fill:"transparent",cx:"50%",cy:"50%",r:20,"stroke-width":R.value,"stroke-dasharray":C,"stroke-dashoffset":0}}),MI("circle",{class:"d-progress-circular__overlay",attrs:{fill:"transparent",cx:"50%",cy:"50%",r:20,"stroke-width":R.value,"stroke-dasharray":C,"stroke-dashoffset":Q.value}})]),I.default&&MI("div",{class:"d-progress-circular__content"},[I.default({value:c.value})])])}}),AN={img:["image/jpeg","image/png"],tiff:["image/tiff"],bmp:["image/bmp"],pdf:["application/pdf"]},EV=d=>{const I=Object.entries(AN);for(let g=0;g<I.length;g++){const[C,A]=I[g];if(A.includes(d))return C}},jV=d=>(d.scale||(d.scale=1),d.rotate||(d.rotate=0),d.xFlip||(d.xFlip=!1),d.yFlip||(d.yFlip=!1),d.offsetX||(d.offsetX=0),d.offsetY||(d.offsetY=0),d.origin=[],d),TF=["rendered","error"],xV=["src","transform","lazy","onlyFirstPage","autoSize","enabledTextLayer","enabledOCR","OCROptions",...TF.map(d=>`on${d.replace(/^\S/,I=>I.toUpperCase())}`)],l0=S.defineComponent({name:"DViewer",props:xV,emits:[...TF],setup(d,{slots:I,emit:g,expose:C,attrs:A}){const l=TF.reduce((k,v)=>{const JI=`on${v.replace(/^\S/,sg=>sg.toUpperCase())}`;return k[JI]=(...sg)=>g(v,...sg),k},{}),Z=jV({...d.transform}),B=S.ref({...Z}),i=d.autoSize!==!1,c=S.ref(i),G=S.ref(d.lazy!==!1),W=S.ref(d.onlyFirstPage===""?!0:d.onlyFirstPage),V=S.ref(!(d.enabledTextLayer===!1||W.value)),R=S.ref(d.enabledOCR===""?!0:d.enabledOCR),s=S.ref(d.OCROptions||[]),Q=()=>{var k;return MI("div",{class:"w-100 flex justify-content align-center"},[((k=I.placeholder)==null?void 0:k.call(I))||MI(LV,{props:{indeterminate:!0}})])},h=()=>{var k;return MI("div",{class:"w-100 flex justify-content align-center error"},[((k=I.error)==null?void 0:k.call(I))||[MI("svg",{style:"width:32px;",domProps:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"}},[MI("path",{style:"fill:currentColor",domProps:{d:"M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"}})]),MI("em",{style:"color:currentColor"},"failed to load")]])};let N=null;const o=S.ref(0),Y=S.ref(!1),n=S.ref(0),a=S.ref(!1),w=window.devicePixelRatio||1,X=S.ref(0),J=S.ref(!1),y=S.ref([]),z=S.ref({width:300,height:300}),u=k=>{},{resizeRef:II,contentRect:_}=ei(u),BI=()=>{o.value=0,Y.value=!1,n.value=0,a.value=!1,N=null,X.value=0,J.value=!1;let k,v;if(_.value)({width:k,height:v}=_.value);else{if(!II.value)return;({clientWidth:k,clientHeight:v}=II.value)}z.value={width:k,height:v}},FI=async k=>{BI(),o.value=1;const v=await _G(k);if(o.value=2,!v)return Y.value=!0,l.onError({eventName:"load",message:"文件加载失败",pageNum:0});let{arrayBuffer:JI,mimeType:sg}=v;const jI=EV(sg);if(jI)n.value=1,N=await TV(jI,JI,S.toRaw(s.value));else return Y.value=!0,l.onError({eventName:"load",message:"文件格式不支持",pageNum:0});if(n.value=2,!(N!=null&&N.numPages))return a.value=!0,l.onError({eventName:"load",message:"文件处理失败",pageNum:0});X.value=N.numPages},RI=k=>{k.pageNum===1&&(J.value=!0),l.onRendered(k)},O=k=>{k.pageNum===1&&(J.value=!0),l.onError(k)},L=(k=.2)=>{const v=B.value.scale*(1+k);p(v,!0)},t=(k=.2)=>{const v=B.value.scale*(1-k);p(v,!0)},D=(k=90)=>{ZI(B.value.rotate-k)},H=(k=90)=>{ZI(B.value.rotate+k)},j=k=>{let v=!B.value.xFlip;k instanceof Boolean&&(v=k),B.value.xFlip=v},M=k=>{let v=!B.value.yFlip;k instanceof Boolean&&(v=k),B.value.yFlip=v},p=(k,v=!1,[JI,sg]=[0,0])=>{v&&c.value&&(c.value=!1),B.value.scale=k,B.value.offsetX=JI,B.value.offsetY=sg},ZI=k=>{k%=360,k<0&&(k+=360),B.value.rotate!==k&&(B.value.rotate=k)};let CI=null,P=1,WI=!0;const Og=(k,v,[JI,sg]=[0,0])=>{const jI=y.value[k-1];if(!jI)return;const Bi=jI.annotationLayerRef;!v||!Bi||requestAnimationFrame(async()=>{await new Promise((NN,Ch)=>{const hN=setInterval(()=>{jI.renderState===2&&(clearInterval(hN),NN(null))},200)}),console.log(jI);const fV=jI.view,bN=fV[2]/JI,mN=fV[3]/sg,QN=Math.min(bN,mN);WI=c.value,p(QN*.5,!0),Bi.appendChild(v),requestAnimationFrame(()=>{setTimeout(()=>{v.scrollIntoView({behavior:"instant",block:"center",inline:"center"})},1e3)})})},oC=([k,v]=[0,0],[JI,sg]=[0,0])=>{const jI=document.createElement("div");return jI.style.position="absolute",jI.style.left=`round(var(--scale-factor) * ${k}px, 1px)`,jI.style.top=`round(var(--scale-factor) * ${v}px, 1px)`,jI.style.width=`round(var(--scale-factor) * ${JI}px, 1px)`,jI.style.height=`round(var(--scale-factor) * ${sg}px, 1px)`,jI.style.background="rgba(255,255,0,0.5)",jI},AC=k=>{const v=y.value[k-1];v&&v.$el.scrollIntoView(!0)},BN=(k=[0,0],v=[10,10],JI=0)=>{CI=oC(k,v),Og(JI,CI,v)},FN=()=>{CI&&(CI.remove(),CI=null,requestAnimationFrame(()=>{c.value=WI,p(P)}))},iN=(k=[0,0],v=[10,10],JI=1)=>{CI||(AC(JI),requestAnimationFrame(()=>{BN(k,v,JI)}))};let Oc=null;const cN=async()=>{if(Oc)return Oc;if(!await vV())return null;const v=[];for(const JI of y.value)v.push(await JI.serializeBitmap());return Oc=v,v},GN=()=>{for(const k of y.value)if(k.renderState!==2)return;return!0},vV=async()=>(G.value=!1,await new Promise((k,v)=>{requestAnimationFrame(()=>{let JI=0;const sg=setInterval(()=>{const jI=GN();JI++,(jI||JI>60)&&(clearInterval(sg),k(!(JI>60)))},1e3)})})),WN=()=>{B.value={...Z},c.value=i},VN=()=>{c.value=!0},RN=S.reactive({zoomIn:L,zoomOut:t,rotateLeft:D,rotateRight:H,flipX:j,flipY:M,createMagnifyArea:iN,removeMagnifyArea:FN,scrollToPage:AC,getPictures:cN,loadedPromise:vV,resetTransform:WN,zoomAuto:VN});C(RN),S.watch(()=>d.transform,k=>{B.value=jV({...k})},{immediate:!0,deep:!0});let rc=!1;const PV=k=>{if(!rc||!J.value)return;k.preventDefault();const v=II.value,JI=Math.max(-1,Math.min(1,k.deltaY||-k.detail)),sg=v.getBoundingClientRect(),jI=(k.clientX-sg.left)/B.value.scale,Bi=(k.clientY-sg.top)/B.value.scale;B.value.origin=[jI,Bi],(JI>0?t:L)()},vc=k=>{k.key==="Control"&&(rc=!0)},sN=k=>{k.key==="Control"&&(rc=!1)};return S.onMounted(()=>{S.watch(()=>d.src,v=>{S.nextTick(()=>{FI(v)})},{immediate:!0});const k=II.value;!k||W.value||(window.addEventListener("keydown",vc),window.addEventListener("keyup",sN),k.addEventListener("wheel",PV,{passive:!1}))}),S.onBeforeUnmount(async()=>{var v,JI;const k=II.value;window.removeEventListener("keydown",vc),window.removeEventListener("keyup",vc),k.removeEventListener("wheel",PV),await((JI=(v=N==null?void 0:N.destroy)==null?void 0:v.call(N))==null?void 0:JI.promise)}),()=>MI("div",{class:"d-viewer outerContainer"},[MI("div",{class:"mainContainer",ref:II},[MI("div",{class:`viewerContainer ${W.value?"thumbnail":""}`},[MI("div",{class:"status-icon",style:{display:o.value<2?"":"none"}},Q()),MI("div",{class:"status-icon",style:{display:Y.value||a.value?"":"none"}},h()),MI("div",{class:"pdfViewer"},[Array.from({length:X.value?J.value&&!W.value?X.value:1:0},(k,v)=>MI(gN,{ref:JI=>{y.value[v]=JI},key:v,props:{pageNum:v+1,instance:N,devicePixelRatio:w,transform:B.value,lazy:G.value,autoSize:c.value,containerSize:z.value,enabledTextLayer:V.value,enabledOCR:R.value},on:{rendered:RI,error:O,updateScale:p},scopedSlots:{placeholder:Q,error:h}}))])])])])}});l0.install=d=>{const I=l0.name;d.component(I,l0)};const lN=async d=>{const I=await _G(d);if(!I)return null;let{arrayBuffer:g,mimeType:C}=I;const A=EV(C);if(!A)return null;const l=await TV(A,g,[]),Z=l.numPages,B=[];for(let i=0;i<Z;i++){const c=new Promise(G=>{l.getPage(i+1).then(W=>{const V=document.createElement("canvas"),R=V.getContext("2d"),s=W.getViewport({scale:1});V.width=s.width,V.height=s.height;const Q={canvasContext:R,viewport:s};W.render(Q).promise.then(()=>{G(V.toDataURL())})})});B.push(c)}return await Promise.all(B)},OV=["permission"],ZN=S.defineComponent({name:"DAuthority",props:OV,setup(d,{slots:I}){const g=rs(),C=S.computed(()=>d.permission?g?Array.isArray(d.permission)?d.permission.every(A=>g.includes(A)):g.includes(d.permission):!1:!0);return I.default&&I.default({userPermissions:g}),()=>C.value&&I.default?S.h(I.default):null}}),dN=(d=>({install:g=>{d.forEach(C=>{S.isVue3?g.use(C):C.install(g)})}}))([...[l0,xd]]),zF=Object.freeze(Object.defineProperty({__proto__:null,default:{}},Symbol.toStringTag,{value:"Module"}));AI.DAuthority=ZN,AI.DList=xd,AI.DProgressCircular=LV,AI.DViewer=l0,AI.authorityProps=OV,AI.default=dN,AI.getPictures=lN,AI.listEmits=RF,AI.listProps=JW,AI.viewerEmits=TF,AI.viewerProps=xV,Object.defineProperties(AI,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
