(function(){"use strict";importScripts("./tiff/UTIF.js"),importScripts("./bmp/BMP.js"),importScripts("./img/IMG.js");const p={},i={decode:async({fileType:s,arrayBuffer:t,uid:e},r)=>{p[e]||(p[e]={fileType:s,pages:await r.decode(t),arrayBuffer:t});const o=p[e].pages.length;if(!o)throw new Error("解码失败");return{uid:e,numPages:o}},getPage:({pageIndex:s,uid:t},e)=>{const r=p[t];if(!r)throw new Error("请先解码文件");const{pages:o,arrayBuffer:n}=r,a=o[s];return e.decodeImage(n,a),{uid:t,pageIndex:s,buffer:e.toRGBA8(a),naturalWidth:a.width,naturalHeight:a.height,bitmap:a.bitmap}}},c=({uid:s})=>{delete p[s]},f={tiff:UTIF,bmp:BMP,img:IMG};onmessage=async function(s){const{eventName:t,props:e}=s.data;if(!t||!e)return postMessage("缺少必要参数");if(t==="destroy")return c(e),postMessage({_eventName:t,_props:e});let r=null,o="";try{const{uid:n,fileType:a}=e,g=i[t];r=await g(e,f[a||p[n].fileType])}catch(n){o=(n==null?void 0:n.message)||`${fileType}.worker.js出错了`}postMessage({_eventName:t,_props:r,_errorMessage:o})}})();
